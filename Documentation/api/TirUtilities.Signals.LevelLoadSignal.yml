### YamlMime:ManagedReference
items:
- uid: TirUtilities.Signals.LevelLoadSignal
  commentId: T:TirUtilities.Signals.LevelLoadSignal
  id: LevelLoadSignal
  parent: TirUtilities.Signals
  children:
  - TirUtilities.Signals.LevelLoadSignal.ActiveScene
  - TirUtilities.Signals.LevelLoadSignal.AdditiveScenes
  - TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  - TirUtilities.Signals.LevelLoadSignal.Emit
  - TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)
  - TirUtilities.Signals.LevelLoadSignal.RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  langs:
  - csharp
  - vb
  name: LevelLoadSignal
  nameWithType: LevelLoadSignal
  fullName: TirUtilities.Signals.LevelLoadSignal
  type: Class
  source:
    id: LevelLoadSignal
    path: ''
    startLine: 9902
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  summary: 'Signal that emits a copy of a <xref href="TirUtilities.LevelManagment.LevelData" data-throw-if-not-resolved="false"></xref> value. '
  example: []
  syntax:
    content: 'public class LevelLoadSignal : SignalBase<LevelData>, ISignal<LevelData>'
    content.vb: >-
      Public Class LevelLoadSignal
          Inherits SignalBase(Of LevelData)
          Implements ISignal(Of LevelData)
  inheritance:
  - System.Object
  - TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}
  implements:
  - TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}
  inheritedMembers:
  - TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}._description
  - TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}.Description
  - TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}._OnEmit
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: TirUtilities.Signals.LevelLoadSignal.ActiveScene
  commentId: P:TirUtilities.Signals.LevelLoadSignal.ActiveScene
  id: ActiveScene
  parent: TirUtilities.Signals.LevelLoadSignal
  langs:
  - csharp
  - vb
  name: ActiveScene
  nameWithType: LevelLoadSignal.ActiveScene
  fullName: TirUtilities.Signals.LevelLoadSignal.ActiveScene
  type: Property
  source:
    id: ActiveScene
    path: ''
    startLine: 9917
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  syntax:
    content: public string ActiveScene { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property ActiveScene As String
  overload: TirUtilities.Signals.LevelLoadSignal.ActiveScene*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TirUtilities.Signals.LevelLoadSignal.AdditiveScenes
  commentId: P:TirUtilities.Signals.LevelLoadSignal.AdditiveScenes
  id: AdditiveScenes
  parent: TirUtilities.Signals.LevelLoadSignal
  langs:
  - csharp
  - vb
  name: AdditiveScenes
  nameWithType: LevelLoadSignal.AdditiveScenes
  fullName: TirUtilities.Signals.LevelLoadSignal.AdditiveScenes
  type: Property
  source:
    id: AdditiveScenes
    path: ''
    startLine: 9918
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  syntax:
    content: public IReadOnlyList<string> AdditiveScenes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.String}
    content.vb: Public ReadOnly Property AdditiveScenes As IReadOnlyList(Of String)
  overload: TirUtilities.Signals.LevelLoadSignal.AdditiveScenes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  commentId: M:TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  id: AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  parent: TirUtilities.Signals.LevelLoadSignal
  langs:
  - csharp
  - vb
  name: AddReceiver(UnityAction<LevelData>)
  nameWithType: LevelLoadSignal.AddReceiver(UnityAction<LevelData>)
  fullName: TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction<TirUtilities.LevelManagment.LevelData>)
  type: Method
  source:
    id: AddReceiver
    path: ''
    startLine: 9928
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  summary: "\nRegister a callback function to be invoked when <xref href=\"TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)\" data-throw-if-not-resolved=\"false\"></xref> is called.\n"
  example: []
  syntax:
    content: public virtual void AddReceiver(UnityAction<LevelData> receiver)
    parameters:
    - id: receiver
      type: Global.UnityAction{TirUtilities.LevelManagment.LevelData}
      description: The callback to be invoked.
    content.vb: Public Overridable Sub AddReceiver(receiver As UnityAction(Of LevelData))
  overload: TirUtilities.Signals.LevelLoadSignal.AddReceiver*
  implements:
  - TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  nameWithType.vb: LevelLoadSignal.AddReceiver(UnityAction(Of LevelData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction(Of TirUtilities.LevelManagment.LevelData))
  name.vb: AddReceiver(UnityAction(Of LevelData))
- uid: TirUtilities.Signals.LevelLoadSignal.RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  commentId: M:TirUtilities.Signals.LevelLoadSignal.RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  id: RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  parent: TirUtilities.Signals.LevelLoadSignal
  langs:
  - csharp
  - vb
  name: RemoveReceiver(UnityAction<LevelData>)
  nameWithType: LevelLoadSignal.RemoveReceiver(UnityAction<LevelData>)
  fullName: TirUtilities.Signals.LevelLoadSignal.RemoveReceiver(UnityAction<TirUtilities.LevelManagment.LevelData>)
  type: Method
  source:
    id: RemoveReceiver
    path: ''
    startLine: 9932
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  summary: 'Unregister a callback function. '
  example: []
  syntax:
    content: public virtual void RemoveReceiver(UnityAction<LevelData> receiver)
    parameters:
    - id: receiver
      type: Global.UnityAction{TirUtilities.LevelManagment.LevelData}
      description: The callback function.
    content.vb: Public Overridable Sub RemoveReceiver(receiver As UnityAction(Of LevelData))
  overload: TirUtilities.Signals.LevelLoadSignal.RemoveReceiver*
  implements:
  - TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  nameWithType.vb: LevelLoadSignal.RemoveReceiver(UnityAction(Of LevelData))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: TirUtilities.Signals.LevelLoadSignal.RemoveReceiver(UnityAction(Of TirUtilities.LevelManagment.LevelData))
  name.vb: RemoveReceiver(UnityAction(Of LevelData))
- uid: TirUtilities.Signals.LevelLoadSignal.Emit
  commentId: M:TirUtilities.Signals.LevelLoadSignal.Emit
  id: Emit
  parent: TirUtilities.Signals.LevelLoadSignal
  langs:
  - csharp
  - vb
  name: Emit()
  nameWithType: LevelLoadSignal.Emit()
  fullName: TirUtilities.Signals.LevelLoadSignal.Emit()
  type: Method
  source:
    id: Emit
    path: ''
    startLine: 9941
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  summary: "\nEmit this signal to all receivers, calling methods registered with \n<xref href=\"TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction%7bTirUtilities.LevelManagment.LevelData%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nEmits <xref href=\"TirUtilities.Signals.LevelLoadSignal._levelData\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Emit()
    content.vb: Public Overridable Sub Emit
  overload: TirUtilities.Signals.LevelLoadSignal.Emit*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)
  commentId: M:TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)
  id: Emit(TirUtilities.LevelManagment.LevelData)
  parent: TirUtilities.Signals.LevelLoadSignal
  langs:
  - csharp
  - vb
  name: Emit(LevelData)
  nameWithType: LevelLoadSignal.Emit(LevelData)
  fullName: TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)
  type: Method
  source:
    id: Emit
    path: ''
    startLine: 9950
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Signals
  summary: "\nEmit this signal to all receivers, calling methods registered with \n<xref href=\"TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction%7bTirUtilities.LevelManagment.LevelData%7d)\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  remarks: "\nEmits the passed level data.  Prefer use of <xref href=\"TirUtilities.Signals.LevelLoadSignal.Emit\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public virtual void Emit(LevelData levelData)
    parameters:
    - id: levelData
      type: TirUtilities.LevelManagment.LevelData
    content.vb: Public Overridable Sub Emit(levelData As LevelData)
  overload: TirUtilities.Signals.LevelLoadSignal.Emit*
  implements:
  - TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.Emit(TirUtilities.LevelManagment.LevelData)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: TirUtilities.LevelManagment.LevelData
  commentId: T:TirUtilities.LevelManagment.LevelData
  parent: TirUtilities.LevelManagment
  name: LevelData
  nameWithType: LevelData
  fullName: TirUtilities.LevelManagment.LevelData
- uid: TirUtilities.Signals
  commentId: N:TirUtilities.Signals
  name: TirUtilities.Signals
  nameWithType: TirUtilities.Signals
  fullName: TirUtilities.Signals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}
  commentId: T:TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}
  parent: TirUtilities.Signals
  definition: TirUtilities.Signals.SignalBase`1
  name: SignalBase<LevelData>
  nameWithType: SignalBase<LevelData>
  fullName: TirUtilities.Signals.SignalBase<TirUtilities.LevelManagment.LevelData>
  nameWithType.vb: SignalBase(Of LevelData)
  fullName.vb: TirUtilities.Signals.SignalBase(Of TirUtilities.LevelManagment.LevelData)
  name.vb: SignalBase(Of LevelData)
  spec.csharp:
  - uid: TirUtilities.Signals.SignalBase`1
    name: SignalBase
    nameWithType: SignalBase
    fullName: TirUtilities.Signals.SignalBase
  - name: <
    nameWithType: <
    fullName: <
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TirUtilities.Signals.SignalBase`1
    name: SignalBase
    nameWithType: SignalBase
    fullName: TirUtilities.Signals.SignalBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}
  commentId: T:TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}
  parent: TirUtilities.Signals
  definition: TirUtilities.Signals.ISignal`1
  name: ISignal<LevelData>
  nameWithType: ISignal<LevelData>
  fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>
  nameWithType.vb: ISignal(Of LevelData)
  fullName.vb: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData)
  name.vb: ISignal(Of LevelData)
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1
    name: ISignal
    nameWithType: ISignal
    fullName: TirUtilities.Signals.ISignal
  - name: <
    nameWithType: <
    fullName: <
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1
    name: ISignal
    nameWithType: ISignal
    fullName: TirUtilities.Signals.ISignal
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}._description
  commentId: F:TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}._description
  parent: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}
  definition: TirUtilities.Signals.SignalBase`1._description
  name: _description
  nameWithType: SignalBase<LevelData>._description
  fullName: TirUtilities.Signals.SignalBase<TirUtilities.LevelManagment.LevelData>._description
  nameWithType.vb: SignalBase(Of LevelData)._description
  fullName.vb: TirUtilities.Signals.SignalBase(Of TirUtilities.LevelManagment.LevelData)._description
- uid: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}.Description
  commentId: P:TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}.Description
  parent: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}
  definition: TirUtilities.Signals.SignalBase`1.Description
  name: Description
  nameWithType: SignalBase<LevelData>.Description
  fullName: TirUtilities.Signals.SignalBase<TirUtilities.LevelManagment.LevelData>.Description
  nameWithType.vb: SignalBase(Of LevelData).Description
  fullName.vb: TirUtilities.Signals.SignalBase(Of TirUtilities.LevelManagment.LevelData).Description
- uid: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}._OnEmit
  commentId: F:TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}._OnEmit
  parent: TirUtilities.Signals.SignalBase{TirUtilities.LevelManagment.LevelData}
  definition: TirUtilities.Signals.SignalBase`1._OnEmit
  name: _OnEmit
  nameWithType: SignalBase<LevelData>._OnEmit
  fullName: TirUtilities.Signals.SignalBase<TirUtilities.LevelManagment.LevelData>._OnEmit
  nameWithType.vb: SignalBase(Of LevelData)._OnEmit
  fullName.vb: TirUtilities.Signals.SignalBase(Of TirUtilities.LevelManagment.LevelData)._OnEmit
- uid: TirUtilities.LevelManagment
  commentId: N:TirUtilities.LevelManagment
  name: TirUtilities.LevelManagment
  nameWithType: TirUtilities.LevelManagment
  fullName: TirUtilities.LevelManagment
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TirUtilities.Signals.SignalBase`1
  commentId: T:TirUtilities.Signals.SignalBase`1
  name: SignalBase<T0>
  nameWithType: SignalBase<T0>
  fullName: TirUtilities.Signals.SignalBase<T0>
  nameWithType.vb: SignalBase(Of T0)
  fullName.vb: TirUtilities.Signals.SignalBase(Of T0)
  name.vb: SignalBase(Of T0)
  spec.csharp:
  - uid: TirUtilities.Signals.SignalBase`1
    name: SignalBase
    nameWithType: SignalBase
    fullName: TirUtilities.Signals.SignalBase
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TirUtilities.Signals.SignalBase`1
    name: SignalBase
    nameWithType: SignalBase
    fullName: TirUtilities.Signals.SignalBase
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.ISignal`1
  commentId: T:TirUtilities.Signals.ISignal`1
  name: ISignal<T0>
  nameWithType: ISignal<T0>
  fullName: TirUtilities.Signals.ISignal<T0>
  nameWithType.vb: ISignal(Of T0)
  fullName.vb: TirUtilities.Signals.ISignal(Of T0)
  name.vb: ISignal(Of T0)
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1
    name: ISignal
    nameWithType: ISignal
    fullName: TirUtilities.Signals.ISignal
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1
    name: ISignal
    nameWithType: ISignal
    fullName: TirUtilities.Signals.ISignal
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.SignalBase`1._description
  commentId: F:TirUtilities.Signals.SignalBase`1._description
  name: _description
  nameWithType: SignalBase<T0>._description
  fullName: TirUtilities.Signals.SignalBase<T0>._description
  nameWithType.vb: SignalBase(Of T0)._description
  fullName.vb: TirUtilities.Signals.SignalBase(Of T0)._description
- uid: TirUtilities.Signals.SignalBase`1.Description
  commentId: P:TirUtilities.Signals.SignalBase`1.Description
  name: Description
  nameWithType: SignalBase<T0>.Description
  fullName: TirUtilities.Signals.SignalBase<T0>.Description
  nameWithType.vb: SignalBase(Of T0).Description
  fullName.vb: TirUtilities.Signals.SignalBase(Of T0).Description
- uid: TirUtilities.Signals.SignalBase`1._OnEmit
  commentId: F:TirUtilities.Signals.SignalBase`1._OnEmit
  name: _OnEmit
  nameWithType: SignalBase<T0>._OnEmit
  fullName: TirUtilities.Signals.SignalBase<T0>._OnEmit
  nameWithType.vb: SignalBase(Of T0)._OnEmit
  fullName.vb: TirUtilities.Signals.SignalBase(Of T0)._OnEmit
- uid: TirUtilities.Signals.LevelLoadSignal.ActiveScene*
  commentId: Overload:TirUtilities.Signals.LevelLoadSignal.ActiveScene
  name: ActiveScene
  nameWithType: LevelLoadSignal.ActiveScene
  fullName: TirUtilities.Signals.LevelLoadSignal.ActiveScene
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TirUtilities.Signals.LevelLoadSignal.AdditiveScenes*
  commentId: Overload:TirUtilities.Signals.LevelLoadSignal.AdditiveScenes
  name: AdditiveScenes
  nameWithType: LevelLoadSignal.AdditiveScenes
  fullName: TirUtilities.Signals.LevelLoadSignal.AdditiveScenes
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: System.Collections.Generic.IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)
  commentId: M:TirUtilities.Signals.LevelLoadSignal.Emit(TirUtilities.LevelManagment.LevelData)
  isExternal: true
- uid: TirUtilities.Signals.LevelLoadSignal.AddReceiver*
  commentId: Overload:TirUtilities.Signals.LevelLoadSignal.AddReceiver
  name: AddReceiver
  nameWithType: LevelLoadSignal.AddReceiver
  fullName: TirUtilities.Signals.LevelLoadSignal.AddReceiver
- uid: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  commentId: M:TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  parent: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}
  definition: TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
  name: AddReceiver(UnityAction<LevelData>)
  nameWithType: ISignal<LevelData>.AddReceiver(UnityAction<LevelData>)
  fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>.AddReceiver(UnityAction<TirUtilities.LevelManagment.LevelData>)
  nameWithType.vb: ISignal(Of LevelData).AddReceiver(UnityAction(Of LevelData))
  fullName.vb: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData).AddReceiver(UnityAction(Of TirUtilities.LevelManagment.LevelData))
  name.vb: AddReceiver(UnityAction(Of LevelData))
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
    name: AddReceiver
    nameWithType: ISignal<LevelData>.AddReceiver
    fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>.AddReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
    name: AddReceiver
    nameWithType: ISignal(Of LevelData).AddReceiver
    fullName: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData).AddReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.UnityAction{TirUtilities.LevelManagment.LevelData}
  commentId: '!:Global.UnityAction{TirUtilities.LevelManagment.LevelData}'
  definition: Global.UnityAction`1
  name: UnityAction<LevelData>
  nameWithType: UnityAction<LevelData>
  fullName: UnityAction<TirUtilities.LevelManagment.LevelData>
  nameWithType.vb: UnityAction(Of LevelData)
  fullName.vb: UnityAction(Of TirUtilities.LevelManagment.LevelData)
  name.vb: UnityAction(Of LevelData)
  spec.csharp:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
  commentId: M:TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
  isExternal: true
  name: AddReceiver(UnityAction<T0>)
  nameWithType: ISignal<T0>.AddReceiver(UnityAction<T0>)
  fullName: TirUtilities.Signals.ISignal<T0>.AddReceiver(UnityAction<T0>)
  nameWithType.vb: ISignal(Of T0).AddReceiver(UnityAction(Of T0))
  fullName.vb: TirUtilities.Signals.ISignal(Of T0).AddReceiver(UnityAction(Of T0))
  name.vb: AddReceiver(UnityAction(Of T0))
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
    name: AddReceiver
    nameWithType: ISignal<T0>.AddReceiver
    fullName: TirUtilities.Signals.ISignal<T0>.AddReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1.AddReceiver(UnityAction{`0})
    name: AddReceiver
    nameWithType: ISignal(Of T0).AddReceiver
    fullName: TirUtilities.Signals.ISignal(Of T0).AddReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.UnityAction`1
  isExternal: true
  name: UnityAction<>
  nameWithType: UnityAction<>
  fullName: UnityAction<>
  nameWithType.vb: UnityAction(Of )
  fullName.vb: UnityAction(Of )
  name.vb: UnityAction(Of )
  spec.csharp:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.LevelLoadSignal.RemoveReceiver*
  commentId: Overload:TirUtilities.Signals.LevelLoadSignal.RemoveReceiver
  name: RemoveReceiver
  nameWithType: LevelLoadSignal.RemoveReceiver
  fullName: TirUtilities.Signals.LevelLoadSignal.RemoveReceiver
- uid: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  commentId: M:TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.RemoveReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  parent: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}
  definition: TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
  name: RemoveReceiver(UnityAction<LevelData>)
  nameWithType: ISignal<LevelData>.RemoveReceiver(UnityAction<LevelData>)
  fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>.RemoveReceiver(UnityAction<TirUtilities.LevelManagment.LevelData>)
  nameWithType.vb: ISignal(Of LevelData).RemoveReceiver(UnityAction(Of LevelData))
  fullName.vb: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData).RemoveReceiver(UnityAction(Of TirUtilities.LevelManagment.LevelData))
  name.vb: RemoveReceiver(UnityAction(Of LevelData))
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
    name: RemoveReceiver
    nameWithType: ISignal<LevelData>.RemoveReceiver
    fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>.RemoveReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
    name: RemoveReceiver
    nameWithType: ISignal(Of LevelData).RemoveReceiver
    fullName: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData).RemoveReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
  commentId: M:TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
  isExternal: true
  name: RemoveReceiver(UnityAction<T0>)
  nameWithType: ISignal<T0>.RemoveReceiver(UnityAction<T0>)
  fullName: TirUtilities.Signals.ISignal<T0>.RemoveReceiver(UnityAction<T0>)
  nameWithType.vb: ISignal(Of T0).RemoveReceiver(UnityAction(Of T0))
  fullName.vb: TirUtilities.Signals.ISignal(Of T0).RemoveReceiver(UnityAction(Of T0))
  name.vb: RemoveReceiver(UnityAction(Of T0))
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
    name: RemoveReceiver
    nameWithType: ISignal<T0>.RemoveReceiver
    fullName: TirUtilities.Signals.ISignal<T0>.RemoveReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1.RemoveReceiver(UnityAction{`0})
    name: RemoveReceiver
    nameWithType: ISignal(Of T0).RemoveReceiver
    fullName: TirUtilities.Signals.ISignal(Of T0).RemoveReceiver
  - name: (
    nameWithType: (
    fullName: (
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  commentId: M:TirUtilities.Signals.LevelLoadSignal.AddReceiver(UnityAction{TirUtilities.LevelManagment.LevelData})
  isExternal: true
- uid: TirUtilities.Signals.LevelLoadSignal._levelData
  commentId: F:TirUtilities.Signals.LevelLoadSignal._levelData
  isExternal: true
- uid: TirUtilities.Signals.LevelLoadSignal.Emit*
  commentId: Overload:TirUtilities.Signals.LevelLoadSignal.Emit
  name: Emit
  nameWithType: LevelLoadSignal.Emit
  fullName: TirUtilities.Signals.LevelLoadSignal.Emit
- uid: TirUtilities.Signals.LevelLoadSignal.Emit
  commentId: M:TirUtilities.Signals.LevelLoadSignal.Emit
  isExternal: true
- uid: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.Emit(TirUtilities.LevelManagment.LevelData)
  commentId: M:TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}.Emit(TirUtilities.LevelManagment.LevelData)
  parent: TirUtilities.Signals.ISignal{TirUtilities.LevelManagment.LevelData}
  definition: TirUtilities.Signals.ISignal`1.Emit(`0)
  name: Emit(LevelData)
  nameWithType: ISignal<LevelData>.Emit(LevelData)
  fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>.Emit(TirUtilities.LevelManagment.LevelData)
  nameWithType.vb: ISignal(Of LevelData).Emit(LevelData)
  fullName.vb: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData).Emit(TirUtilities.LevelManagment.LevelData)
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1.Emit(`0)
    name: Emit
    nameWithType: ISignal<LevelData>.Emit
    fullName: TirUtilities.Signals.ISignal<TirUtilities.LevelManagment.LevelData>.Emit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1.Emit(`0)
    name: Emit
    nameWithType: ISignal(Of LevelData).Emit
    fullName: TirUtilities.Signals.ISignal(Of TirUtilities.LevelManagment.LevelData).Emit
  - name: (
    nameWithType: (
    fullName: (
  - uid: TirUtilities.LevelManagment.LevelData
    name: LevelData
    nameWithType: LevelData
    fullName: TirUtilities.LevelManagment.LevelData
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Signals.ISignal`1.Emit(`0)
  commentId: M:TirUtilities.Signals.ISignal`1.Emit(`0)
  name: Emit(T0)
  nameWithType: ISignal<T0>.Emit(T0)
  fullName: TirUtilities.Signals.ISignal<T0>.Emit(T0)
  nameWithType.vb: ISignal(Of T0).Emit(T0)
  fullName.vb: TirUtilities.Signals.ISignal(Of T0).Emit(T0)
  spec.csharp:
  - uid: TirUtilities.Signals.ISignal`1.Emit(`0)
    name: Emit
    nameWithType: ISignal<T0>.Emit
    fullName: TirUtilities.Signals.ISignal<T0>.Emit
  - name: (
    nameWithType: (
    fullName: (
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: TirUtilities.Signals.ISignal`1.Emit(`0)
    name: Emit
    nameWithType: ISignal(Of T0).Emit
    fullName: TirUtilities.Signals.ISignal(Of T0).Emit
  - name: (
    nameWithType: (
    fullName: (
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
