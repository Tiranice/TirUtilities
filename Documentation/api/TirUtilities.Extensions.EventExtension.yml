### YamlMime:ManagedReference
items:
- uid: TirUtilities.Extensions.EventExtension
  commentId: T:TirUtilities.Extensions.EventExtension
  id: EventExtension
  parent: TirUtilities.Extensions
  children:
  - TirUtilities.Extensions.EventExtension.IsNull(UnityAction)
  - TirUtilities.Extensions.EventExtension.IsNull(UnityEvent)
  - TirUtilities.Extensions.EventExtension.IsNull``1(UnityAction{``0})
  - TirUtilities.Extensions.EventExtension.IsNull``1(UnityEvent{``0})
  - TirUtilities.Extensions.EventExtension.NotNull(UnityAction)
  - TirUtilities.Extensions.EventExtension.NotNull(UnityEvent)
  - TirUtilities.Extensions.EventExtension.NotNull``1(UnityAction{``0})
  - TirUtilities.Extensions.EventExtension.NotNull``1(UnityEvent{``0})
  - TirUtilities.Extensions.EventExtension.SafeInvoke(UnityAction)
  - TirUtilities.Extensions.EventExtension.SafeInvoke(UnityEvent)
  - TirUtilities.Extensions.EventExtension.SafeInvoke``1(UnityAction{``0},``0)
  - TirUtilities.Extensions.EventExtension.SafeInvoke``1(UnityEvent{``0},``0)
  langs:
  - csharp
  - vb
  name: EventExtension
  nameWithType: EventExtension
  fullName: TirUtilities.Extensions.EventExtension
  type: Class
  source:
    id: EventExtension
    path: ''
    startLine: 42283
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nA set of extension methods for UnityActions and UnityEvents.\n"
  example: []
  syntax:
    content: public static class EventExtension
    content.vb: Public Module EventExtension
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TirUtilities.Extensions.EventExtension.SafeInvoke(UnityEvent)
  commentId: M:TirUtilities.Extensions.EventExtension.SafeInvoke(UnityEvent)
  id: SafeInvoke(UnityEvent)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: SafeInvoke(UnityEvent)
  nameWithType: EventExtension.SafeInvoke(UnityEvent)
  fullName: TirUtilities.Extensions.EventExtension.SafeInvoke(UnityEvent)
  type: Method
  source:
    id: SafeInvoke
    path: ''
    startLine: 42292
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nInvokes the event if it has listeners.\n"
  example: []
  syntax:
    content: public static bool SafeInvoke(this UnityEvent unityEvent)
    parameters:
    - id: unityEvent
      type: Global.UnityEvent
      description: This event.
    return:
      type: System.Boolean
      description: True if the invocation was successful, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeInvoke(unityEvent As UnityEvent) As Boolean
  overload: TirUtilities.Extensions.EventExtension.SafeInvoke*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TirUtilities.Extensions.EventExtension.IsNull(UnityEvent)
  commentId: M:TirUtilities.Extensions.EventExtension.IsNull(UnityEvent)
  id: IsNull(UnityEvent)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: IsNull(UnityEvent)
  nameWithType: EventExtension.IsNull(UnityEvent)
  fullName: TirUtilities.Extensions.EventExtension.IsNull(UnityEvent)
  type: Method
  source:
    id: IsNull
    path: ''
    startLine: 42305
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>unityEvent == null</code>.\n"
  example: []
  syntax:
    content: public static bool IsNull(this UnityEvent unityEvent)
    parameters:
    - id: unityEvent
      type: Global.UnityEvent
      description: This event.
    return:
      type: System.Boolean
      description: The result of <code>unityEvent == null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNull(unityEvent As UnityEvent) As Boolean
  overload: TirUtilities.Extensions.EventExtension.IsNull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TirUtilities.Extensions.EventExtension.NotNull(UnityEvent)
  commentId: M:TirUtilities.Extensions.EventExtension.NotNull(UnityEvent)
  id: NotNull(UnityEvent)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: NotNull(UnityEvent)
  nameWithType: EventExtension.NotNull(UnityEvent)
  fullName: TirUtilities.Extensions.EventExtension.NotNull(UnityEvent)
  type: Method
  source:
    id: NotNull
    path: ''
    startLine: 42312
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>unityEvent != null</code>.\n"
  example: []
  syntax:
    content: public static bool NotNull(this UnityEvent unityEvent)
    parameters:
    - id: unityEvent
      type: Global.UnityEvent
      description: This event.
    return:
      type: System.Boolean
      description: The result of <code>unityEvent != null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNull(unityEvent As UnityEvent) As Boolean
  overload: TirUtilities.Extensions.EventExtension.NotNull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TirUtilities.Extensions.EventExtension.SafeInvoke``1(UnityEvent{``0},``0)
  commentId: M:TirUtilities.Extensions.EventExtension.SafeInvoke``1(UnityEvent{``0},``0)
  id: SafeInvoke``1(UnityEvent{``0},``0)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: SafeInvoke<T0>(UnityEvent<T0>, T0)
  nameWithType: EventExtension.SafeInvoke<T0>(UnityEvent<T0>, T0)
  fullName: TirUtilities.Extensions.EventExtension.SafeInvoke<T0>(UnityEvent<T0>, T0)
  type: Method
  source:
    id: SafeInvoke
    path: ''
    startLine: 42324
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nInvokes the event if it has listeners.\n"
  example: []
  syntax:
    content: public static bool SafeInvoke<T0>(this UnityEvent<T0> unityEvent, T0 target)
    parameters:
    - id: unityEvent
      type: Global.UnityEvent{{T0}}
      description: This event.
    - id: target
      type: '{T0}'
      description: The target to be passed to listeners.
    typeParameters:
    - id: T0
    return:
      type: System.Boolean
      description: True if the invocation was successful, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeInvoke(Of T0)(unityEvent As UnityEvent(Of T0), target As T0) As Boolean
  overload: TirUtilities.Extensions.EventExtension.SafeInvoke*
  nameWithType.vb: EventExtension.SafeInvoke(Of T0)(UnityEvent(Of T0), T0)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.EventExtension.SafeInvoke(Of T0)(UnityEvent(Of T0), T0)
  name.vb: SafeInvoke(Of T0)(UnityEvent(Of T0), T0)
- uid: TirUtilities.Extensions.EventExtension.IsNull``1(UnityEvent{``0})
  commentId: M:TirUtilities.Extensions.EventExtension.IsNull``1(UnityEvent{``0})
  id: IsNull``1(UnityEvent{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: IsNull<T0>(UnityEvent<T0>)
  nameWithType: EventExtension.IsNull<T0>(UnityEvent<T0>)
  fullName: TirUtilities.Extensions.EventExtension.IsNull<T0>(UnityEvent<T0>)
  type: Method
  source:
    id: IsNull
    path: ''
    startLine: 42337
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>unityEvent == null</code>.\n"
  example: []
  syntax:
    content: public static bool IsNull<T0>(this UnityEvent<T0> unityEvent)
    parameters:
    - id: unityEvent
      type: Global.UnityEvent{{T0}}
      description: This event.
    typeParameters:
    - id: T0
    return:
      type: System.Boolean
      description: The result of <code>unityEvent == null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNull(Of T0)(unityEvent As UnityEvent(Of T0)) As Boolean
  overload: TirUtilities.Extensions.EventExtension.IsNull*
  nameWithType.vb: EventExtension.IsNull(Of T0)(UnityEvent(Of T0))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.EventExtension.IsNull(Of T0)(UnityEvent(Of T0))
  name.vb: IsNull(Of T0)(UnityEvent(Of T0))
- uid: TirUtilities.Extensions.EventExtension.NotNull``1(UnityEvent{``0})
  commentId: M:TirUtilities.Extensions.EventExtension.NotNull``1(UnityEvent{``0})
  id: NotNull``1(UnityEvent{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: NotNull<T0>(UnityEvent<T0>)
  nameWithType: EventExtension.NotNull<T0>(UnityEvent<T0>)
  fullName: TirUtilities.Extensions.EventExtension.NotNull<T0>(UnityEvent<T0>)
  type: Method
  source:
    id: NotNull
    path: ''
    startLine: 42344
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>unityEvent != null</code>.\n"
  example: []
  syntax:
    content: public static bool NotNull<T0>(this UnityEvent<T0> unityEvent)
    parameters:
    - id: unityEvent
      type: Global.UnityEvent{{T0}}
      description: This event.
    typeParameters:
    - id: T0
    return:
      type: System.Boolean
      description: The result of <code>unityEvent != null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNull(Of T0)(unityEvent As UnityEvent(Of T0)) As Boolean
  overload: TirUtilities.Extensions.EventExtension.NotNull*
  nameWithType.vb: EventExtension.NotNull(Of T0)(UnityEvent(Of T0))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.EventExtension.NotNull(Of T0)(UnityEvent(Of T0))
  name.vb: NotNull(Of T0)(UnityEvent(Of T0))
- uid: TirUtilities.Extensions.EventExtension.SafeInvoke(UnityAction)
  commentId: M:TirUtilities.Extensions.EventExtension.SafeInvoke(UnityAction)
  id: SafeInvoke(UnityAction)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: SafeInvoke(UnityAction)
  nameWithType: EventExtension.SafeInvoke(UnityAction)
  fullName: TirUtilities.Extensions.EventExtension.SafeInvoke(UnityAction)
  type: Method
  source:
    id: SafeInvoke
    path: ''
    startLine: 42355
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nInvokes the action if it has listeners.\n"
  example: []
  syntax:
    content: public static bool SafeInvoke(this UnityAction action)
    parameters:
    - id: action
      type: Global.UnityAction
      description: This event.
    return:
      type: System.Boolean
      description: True if the invocation was successful, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeInvoke(action As UnityAction) As Boolean
  overload: TirUtilities.Extensions.EventExtension.SafeInvoke*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TirUtilities.Extensions.EventExtension.IsNull(UnityAction)
  commentId: M:TirUtilities.Extensions.EventExtension.IsNull(UnityAction)
  id: IsNull(UnityAction)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: IsNull(UnityAction)
  nameWithType: EventExtension.IsNull(UnityAction)
  fullName: TirUtilities.Extensions.EventExtension.IsNull(UnityAction)
  type: Method
  source:
    id: IsNull
    path: ''
    startLine: 42368
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>action == null</code>.\n"
  example: []
  syntax:
    content: public static bool IsNull(this UnityAction action)
    parameters:
    - id: action
      type: Global.UnityAction
    return:
      type: System.Boolean
      description: The result of <code>action == null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNull(action As UnityAction) As Boolean
  overload: TirUtilities.Extensions.EventExtension.IsNull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TirUtilities.Extensions.EventExtension.NotNull(UnityAction)
  commentId: M:TirUtilities.Extensions.EventExtension.NotNull(UnityAction)
  id: NotNull(UnityAction)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: NotNull(UnityAction)
  nameWithType: EventExtension.NotNull(UnityAction)
  fullName: TirUtilities.Extensions.EventExtension.NotNull(UnityAction)
  type: Method
  source:
    id: NotNull
    path: ''
    startLine: 42375
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>action != null</code>.\n"
  example: []
  syntax:
    content: public static bool NotNull(this UnityAction action)
    parameters:
    - id: action
      type: Global.UnityAction
    return:
      type: System.Boolean
      description: The result of <code>action != null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNull(action As UnityAction) As Boolean
  overload: TirUtilities.Extensions.EventExtension.NotNull*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: TirUtilities.Extensions.EventExtension.SafeInvoke``1(UnityAction{``0},``0)
  commentId: M:TirUtilities.Extensions.EventExtension.SafeInvoke``1(UnityAction{``0},``0)
  id: SafeInvoke``1(UnityAction{``0},``0)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: SafeInvoke<T0>(UnityAction<T0>, T0)
  nameWithType: EventExtension.SafeInvoke<T0>(UnityAction<T0>, T0)
  fullName: TirUtilities.Extensions.EventExtension.SafeInvoke<T0>(UnityAction<T0>, T0)
  type: Method
  source:
    id: SafeInvoke
    path: ''
    startLine: 42388
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nInvokes the action if it has listeners.\n"
  example: []
  syntax:
    content: public static bool SafeInvoke<T0>(this UnityAction<T0> action, T0 target0)
    parameters:
    - id: action
      type: Global.UnityAction{{T0}}
      description: This action
    - id: target0
      type: '{T0}'
      description: Parameter 0
    typeParameters:
    - id: T0
      description: The type of the action&apos;s parameter.
    return:
      type: System.Boolean
      description: True if the invocation was successful, otherwise false.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SafeInvoke(Of T0)(action As UnityAction(Of T0), target0 As T0) As Boolean
  overload: TirUtilities.Extensions.EventExtension.SafeInvoke*
  nameWithType.vb: EventExtension.SafeInvoke(Of T0)(UnityAction(Of T0), T0)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.EventExtension.SafeInvoke(Of T0)(UnityAction(Of T0), T0)
  name.vb: SafeInvoke(Of T0)(UnityAction(Of T0), T0)
- uid: TirUtilities.Extensions.EventExtension.IsNull``1(UnityAction{``0})
  commentId: M:TirUtilities.Extensions.EventExtension.IsNull``1(UnityAction{``0})
  id: IsNull``1(UnityAction{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: IsNull<T0>(UnityAction<T0>)
  nameWithType: EventExtension.IsNull<T0>(UnityAction<T0>)
  fullName: TirUtilities.Extensions.EventExtension.IsNull<T0>(UnityAction<T0>)
  type: Method
  source:
    id: IsNull
    path: ''
    startLine: 42401
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>action == null</code>.\n"
  example: []
  syntax:
    content: public static bool IsNull<T0>(this UnityAction<T0> action)
    parameters:
    - id: action
      type: Global.UnityAction{{T0}}
    typeParameters:
    - id: T0
    return:
      type: System.Boolean
      description: The result of <code>action == null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNull(Of T0)(action As UnityAction(Of T0)) As Boolean
  overload: TirUtilities.Extensions.EventExtension.IsNull*
  nameWithType.vb: EventExtension.IsNull(Of T0)(UnityAction(Of T0))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.EventExtension.IsNull(Of T0)(UnityAction(Of T0))
  name.vb: IsNull(Of T0)(UnityAction(Of T0))
- uid: TirUtilities.Extensions.EventExtension.NotNull``1(UnityAction{``0})
  commentId: M:TirUtilities.Extensions.EventExtension.NotNull``1(UnityAction{``0})
  id: NotNull``1(UnityAction{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.EventExtension
  langs:
  - csharp
  - vb
  name: NotNull<T0>(UnityAction<T0>)
  nameWithType: EventExtension.NotNull<T0>(UnityAction<T0>)
  fullName: TirUtilities.Extensions.EventExtension.NotNull<T0>(UnityAction<T0>)
  type: Method
  source:
    id: NotNull
    path: ''
    startLine: 42408
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nShorthand for a <code>action != null</code>.\n"
  example: []
  syntax:
    content: public static bool NotNull<T0>(this UnityAction<T0> action)
    parameters:
    - id: action
      type: Global.UnityAction{{T0}}
    typeParameters:
    - id: T0
    return:
      type: System.Boolean
      description: The result of <code>action != null</code>
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNull(Of T0)(action As UnityAction(Of T0)) As Boolean
  overload: TirUtilities.Extensions.EventExtension.NotNull*
  nameWithType.vb: EventExtension.NotNull(Of T0)(UnityAction(Of T0))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.EventExtension.NotNull(Of T0)(UnityAction(Of T0))
  name.vb: NotNull(Of T0)(UnityAction(Of T0))
references:
- uid: TirUtilities.Extensions
  commentId: N:TirUtilities.Extensions
  name: TirUtilities.Extensions
  nameWithType: TirUtilities.Extensions
  fullName: TirUtilities.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TirUtilities.Extensions.EventExtension.SafeInvoke*
  commentId: Overload:TirUtilities.Extensions.EventExtension.SafeInvoke
  name: SafeInvoke
  nameWithType: EventExtension.SafeInvoke
  fullName: TirUtilities.Extensions.EventExtension.SafeInvoke
- uid: Global.UnityEvent
  isExternal: true
  name: UnityEvent
  nameWithType: UnityEvent
  fullName: UnityEvent
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: TirUtilities.Extensions.EventExtension.IsNull*
  commentId: Overload:TirUtilities.Extensions.EventExtension.IsNull
  name: IsNull
  nameWithType: EventExtension.IsNull
  fullName: TirUtilities.Extensions.EventExtension.IsNull
- uid: TirUtilities.Extensions.EventExtension.NotNull*
  commentId: Overload:TirUtilities.Extensions.EventExtension.NotNull
  name: NotNull
  nameWithType: EventExtension.NotNull
  fullName: TirUtilities.Extensions.EventExtension.NotNull
- uid: Global.UnityEvent{{T0}}
  commentId: '!:Global.UnityEvent{``0}'
  definition: Global.UnityEvent`1
  name: UnityEvent<T0>
  nameWithType: UnityEvent<T0>
  fullName: UnityEvent<T0>
  nameWithType.vb: UnityEvent(Of T0)
  fullName.vb: UnityEvent(Of T0)
  name.vb: UnityEvent(Of T0)
  spec.csharp:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T0}'
  commentId: '!:T0'
  definition: T0
  name: T0
  nameWithType: T0
  fullName: T0
- uid: Global.UnityEvent`1
  isExternal: true
  name: UnityEvent<>
  nameWithType: UnityEvent<>
  fullName: UnityEvent<>
  nameWithType.vb: UnityEvent(Of )
  fullName.vb: UnityEvent(Of )
  name.vb: UnityEvent(Of )
  spec.csharp:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.UnityEvent`1
    name: UnityEvent
    nameWithType: UnityEvent
    fullName: UnityEvent
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: T0
  name: T0
  nameWithType: T0
  fullName: T0
- uid: Global.UnityAction
  isExternal: true
  name: UnityAction
  nameWithType: UnityAction
  fullName: UnityAction
- uid: Global.UnityAction{{T0}}
  commentId: '!:Global.UnityAction{``0}'
  definition: Global.UnityAction`1
  name: UnityAction<T0>
  nameWithType: UnityAction<T0>
  fullName: UnityAction<T0>
  nameWithType.vb: UnityAction(Of T0)
  fullName.vb: UnityAction(Of T0)
  name.vb: UnityAction(Of T0)
  spec.csharp:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T0
    nameWithType: T0
    fullName: T0
  - name: )
    nameWithType: )
    fullName: )
- uid: Global.UnityAction`1
  isExternal: true
  name: UnityAction<>
  nameWithType: UnityAction<>
  fullName: UnityAction<>
  nameWithType.vb: UnityAction(Of )
  fullName.vb: UnityAction(Of )
  name.vb: UnityAction(Of )
  spec.csharp:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.UnityAction`1
    name: UnityAction
    nameWithType: UnityAction
    fullName: UnityAction
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
