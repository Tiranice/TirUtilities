### YamlMime:ManagedReference
items:
- uid: TirUtilities.Extensions.ListExtensions
  commentId: T:TirUtilities.Extensions.ListExtensions
  id: ListExtensions
  parent: TirUtilities.Extensions
  children:
  - TirUtilities.Extensions.ListExtensions.IndexInRange``1(List{``0},System.Int32)
  - TirUtilities.Extensions.ListExtensions.IsEmpty``1(List{``0})
  - TirUtilities.Extensions.ListExtensions.IsNull``1(List{``0})
  - TirUtilities.Extensions.ListExtensions.IsNullOrEmpty``1(List{``0})
  - TirUtilities.Extensions.ListExtensions.NotEmpty``1(List{``0})
  - TirUtilities.Extensions.ListExtensions.NotNull``1(List{``0})
  langs:
  - csharp
  - vb
  name: ListExtensions
  nameWithType: ListExtensions
  fullName: TirUtilities.Extensions.ListExtensions
  type: Class
  source:
    id: ListExtensions
    path: ''
    startLine: 1046
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: "\nA set of extensions to generic lists.\n"
  example: []
  syntax:
    content: public static class ListExtensions
    content.vb: Public Module ListExtensions
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: TirUtilities.Extensions.ListExtensions.IsEmpty``1(List{``0})
  commentId: M:TirUtilities.Extensions.ListExtensions.IsEmpty``1(List{``0})
  id: IsEmpty``1(List{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: IsEmpty<T>(List<T>)
  nameWithType: ListExtensions.IsEmpty<T>(List<T>)
  fullName: TirUtilities.Extensions.ListExtensions.IsEmpty<T>(List<T>)
  type: Method
  source:
    id: IsEmpty
    path: ''
    startLine: 1052
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: 'Shorthand for <pre><code>list.Count == 0;</code></pre> '
  example: []
  syntax:
    content: public static bool IsEmpty<T>(this List<T> list)
    parameters:
    - id: list
      type: Global.List{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: True if the list is empty.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsEmpty(Of T)(list As List(Of T)) As Boolean
  overload: TirUtilities.Extensions.ListExtensions.IsEmpty*
  nameWithType.vb: ListExtensions.IsEmpty(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.ListExtensions.IsEmpty(Of T)(List(Of T))
  name.vb: IsEmpty(Of T)(List(Of T))
- uid: TirUtilities.Extensions.ListExtensions.NotEmpty``1(List{``0})
  commentId: M:TirUtilities.Extensions.ListExtensions.NotEmpty``1(List{``0})
  id: NotEmpty``1(List{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: NotEmpty<T>(List<T>)
  nameWithType: ListExtensions.NotEmpty<T>(List<T>)
  fullName: TirUtilities.Extensions.ListExtensions.NotEmpty<T>(List<T>)
  type: Method
  source:
    id: NotEmpty
    path: ''
    startLine: 1058
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: 'Shorthand for <pre><code>list.Count > 0;</code></pre> '
  example: []
  syntax:
    content: public static bool NotEmpty<T>(this List<T> list)
    parameters:
    - id: list
      type: Global.List{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: True if the list contains an number of items
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotEmpty(Of T)(list As List(Of T)) As Boolean
  overload: TirUtilities.Extensions.ListExtensions.NotEmpty*
  nameWithType.vb: ListExtensions.NotEmpty(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.ListExtensions.NotEmpty(Of T)(List(Of T))
  name.vb: NotEmpty(Of T)(List(Of T))
- uid: TirUtilities.Extensions.ListExtensions.IsNull``1(List{``0})
  commentId: M:TirUtilities.Extensions.ListExtensions.IsNull``1(List{``0})
  id: IsNull``1(List{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: IsNull<T>(List<T>)
  nameWithType: ListExtensions.IsNull<T>(List<T>)
  fullName: TirUtilities.Extensions.ListExtensions.IsNull<T>(List<T>)
  type: Method
  source:
    id: IsNull
    path: ''
    startLine: 1064
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: Shorthand for <pre><code>list.Equals(null);</code></pre>.
  example: []
  syntax:
    content: public static bool IsNull<T>(this List<T> list)
    parameters:
    - id: list
      type: Global.List{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: True if the list is null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNull(Of T)(list As List(Of T)) As Boolean
  overload: TirUtilities.Extensions.ListExtensions.IsNull*
  nameWithType.vb: ListExtensions.IsNull(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.ListExtensions.IsNull(Of T)(List(Of T))
  name.vb: IsNull(Of T)(List(Of T))
- uid: TirUtilities.Extensions.ListExtensions.NotNull``1(List{``0})
  commentId: M:TirUtilities.Extensions.ListExtensions.NotNull``1(List{``0})
  id: NotNull``1(List{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: NotNull<T>(List<T>)
  nameWithType: ListExtensions.NotNull<T>(List<T>)
  fullName: TirUtilities.Extensions.ListExtensions.NotNull<T>(List<T>)
  type: Method
  source:
    id: NotNull
    path: ''
    startLine: 1070
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: 'Shorthand for <pre><code>!list.Equals(null);</code></pre> '
  example: []
  syntax:
    content: public static bool NotNull<T>(this List<T> list)
    parameters:
    - id: list
      type: Global.List{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: True if the list is not null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function NotNull(Of T)(list As List(Of T)) As Boolean
  overload: TirUtilities.Extensions.ListExtensions.NotNull*
  nameWithType.vb: ListExtensions.NotNull(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.ListExtensions.NotNull(Of T)(List(Of T))
  name.vb: NotNull(Of T)(List(Of T))
- uid: TirUtilities.Extensions.ListExtensions.IsNullOrEmpty``1(List{``0})
  commentId: M:TirUtilities.Extensions.ListExtensions.IsNullOrEmpty``1(List{``0})
  id: IsNullOrEmpty``1(List{``0})
  isExtensionMethod: true
  parent: TirUtilities.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty<T>(List<T>)
  nameWithType: ListExtensions.IsNullOrEmpty<T>(List<T>)
  fullName: TirUtilities.Extensions.ListExtensions.IsNullOrEmpty<T>(List<T>)
  type: Method
  source:
    id: IsNullOrEmpty
    path: ''
    startLine: 1076
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: 'Shorthand for <pre><code>list.IsNull() || list.IsEmpty();</code></pre> '
  example: []
  syntax:
    content: public static bool IsNullOrEmpty<T>(this List<T> list)
    parameters:
    - id: list
      type: Global.List{{T}}
      description: ''
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: True if the list contains no items or is null.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsNullOrEmpty(Of T)(list As List(Of T)) As Boolean
  overload: TirUtilities.Extensions.ListExtensions.IsNullOrEmpty*
  nameWithType.vb: ListExtensions.IsNullOrEmpty(Of T)(List(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.ListExtensions.IsNullOrEmpty(Of T)(List(Of T))
  name.vb: IsNullOrEmpty(Of T)(List(Of T))
- uid: TirUtilities.Extensions.ListExtensions.IndexInRange``1(List{``0},System.Int32)
  commentId: M:TirUtilities.Extensions.ListExtensions.IndexInRange``1(List{``0},System.Int32)
  id: IndexInRange``1(List{``0},System.Int32)
  isExtensionMethod: true
  parent: TirUtilities.Extensions.ListExtensions
  langs:
  - csharp
  - vb
  name: IndexInRange<T>(List<T>, Int32)
  nameWithType: ListExtensions.IndexInRange<T>(List<T>, Int32)
  fullName: TirUtilities.Extensions.ListExtensions.IndexInRange<T>(List<T>, System.Int32)
  type: Method
  source:
    id: IndexInRange
    path: ''
    startLine: 1083
  assemblies:
  - cs.temp.dll
  namespace: TirUtilities.Extensions
  summary: 'Test whether a given int index is in the range [0, list.Count). '
  example: []
  syntax:
    content: public static bool IndexInRange<T>(this List<T> list, int i)
    parameters:
    - id: list
      type: Global.List{{T}}
      description: ''
    - id: i
      type: System.Int32
      description: The index to be tested.
    typeParameters:
    - id: T
      description: ''
    return:
      type: System.Boolean
      description: True if index i is in the range [0, list.Count).
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IndexInRange(Of T)(list As List(Of T), i As Integer) As Boolean
  overload: TirUtilities.Extensions.ListExtensions.IndexInRange*
  nameWithType.vb: ListExtensions.IndexInRange(Of T)(List(Of T), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: TirUtilities.Extensions.ListExtensions.IndexInRange(Of T)(List(Of T), System.Int32)
  name.vb: IndexInRange(Of T)(List(Of T), Int32)
references:
- uid: TirUtilities.Extensions
  commentId: N:TirUtilities.Extensions
  name: TirUtilities.Extensions
  nameWithType: TirUtilities.Extensions
  fullName: TirUtilities.Extensions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: TirUtilities.Extensions.ListExtensions.IsEmpty*
  commentId: Overload:TirUtilities.Extensions.ListExtensions.IsEmpty
  name: IsEmpty
  nameWithType: ListExtensions.IsEmpty
  fullName: TirUtilities.Extensions.ListExtensions.IsEmpty
- uid: Global.List{{T}}
  commentId: '!:Global.List{``0}'
  definition: Global.List`1
  name: List<T>
  nameWithType: List<T>
  fullName: List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Global.List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullName.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Global.List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: TirUtilities.Extensions.ListExtensions.NotEmpty*
  commentId: Overload:TirUtilities.Extensions.ListExtensions.NotEmpty
  name: NotEmpty
  nameWithType: ListExtensions.NotEmpty
  fullName: TirUtilities.Extensions.ListExtensions.NotEmpty
- uid: TirUtilities.Extensions.ListExtensions.IsNull*
  commentId: Overload:TirUtilities.Extensions.ListExtensions.IsNull
  name: IsNull
  nameWithType: ListExtensions.IsNull
  fullName: TirUtilities.Extensions.ListExtensions.IsNull
- uid: TirUtilities.Extensions.ListExtensions.NotNull*
  commentId: Overload:TirUtilities.Extensions.ListExtensions.NotNull
  name: NotNull
  nameWithType: ListExtensions.NotNull
  fullName: TirUtilities.Extensions.ListExtensions.NotNull
- uid: TirUtilities.Extensions.ListExtensions.IsNullOrEmpty*
  commentId: Overload:TirUtilities.Extensions.ListExtensions.IsNullOrEmpty
  name: IsNullOrEmpty
  nameWithType: ListExtensions.IsNullOrEmpty
  fullName: TirUtilities.Extensions.ListExtensions.IsNullOrEmpty
- uid: TirUtilities.Extensions.ListExtensions.IndexInRange*
  commentId: Overload:TirUtilities.Extensions.ListExtensions.IndexInRange
  name: IndexInRange
  nameWithType: ListExtensions.IndexInRange
  fullName: TirUtilities.Extensions.ListExtensions.IndexInRange
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
