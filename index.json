{
  "api/Global.BehaviourSketch.html": {
    "href": "api/Global.BehaviourSketch.html",
    "title": "Class BehaviourSketch | TirUtilities",
    "keywords": "Class BehaviourSketch Inheritance Object BehaviourSketch Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BehaviourSketch : MonoBehaviour"
  },
  "api/Global.BuiltInResourcesWindow.html": {
    "href": "api/Global.BuiltInResourcesWindow.html",
    "title": "Class BuiltInResourcesWindow | TirUtilities",
    "keywords": "Class BuiltInResourcesWindow From Show Built In Resources on the community wiki. Inheritance Object BuiltInResourcesWindow Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BuiltInResourcesWindow : EditorWindow Methods ShowWindow() Declaration public static void ShowWindow()"
  },
  "api/Global.Connection.html": {
    "href": "api/Global.Connection.html",
    "title": "Class Connection | TirUtilities",
    "keywords": "Class Connection Inheritance Object Connection Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Connection Constructors Connection(ConnectionPoint, ConnectionPoint, Action<Connection>) Declaration public Connection(ConnectionPoint input, ConnectionPoint output, Action<Connection> OnClickRemoveCallback) Parameters Type Name Description ConnectionPoint input ConnectionPoint output Action < Connection > OnClickRemoveCallback Methods Draw() Declaration public void Draw()"
  },
  "api/Global.ConnectionPoint.html": {
    "href": "api/Global.ConnectionPoint.html",
    "title": "Class ConnectionPoint | TirUtilities",
    "keywords": "Class ConnectionPoint Inheritance Object ConnectionPoint Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ConnectionPoint Constructors ConnectionPoint(ConnectionPointType, NodeBase, GUIStyle, Action<ConnectionPoint>) Declaration public ConnectionPoint(ConnectionPointType type, NodeBase node, GUIStyle style, Action<ConnectionPoint> OnClickCallback) Parameters Type Name Description ConnectionPointType type NodeBase node GUIStyle style Action < ConnectionPoint > OnClickCallback Properties Center Declaration public Vector2 Center { get; } Property Value Type Description Vector2 Node Declaration public NodeBase Node { get; } Property Value Type Description NodeBase Methods Draw() Declaration public void Draw() Events OnClick Declaration public event Action<ConnectionPoint> OnClick Event Type Type Description Action < ConnectionPoint >"
  },
  "api/Global.ConnectionPointType.html": {
    "href": "api/Global.ConnectionPointType.html",
    "title": "Enum ConnectionPointType | TirUtilities",
    "keywords": "Enum ConnectionPointType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum ConnectionPointType Fields Name Description In Out"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | TirUtilities",
    "keywords": "Namespace Global Classes BehaviourSketch BuiltInResourcesWindow From Show Built In Resources on the community wiki. Connection ConnectionPoint NodeBase NodeBasedEditor PieChartTest RebindTest Enums ConnectionPointType"
  },
  "api/Global.NodeBase.html": {
    "href": "api/Global.NodeBase.html",
    "title": "Class NodeBase | TirUtilities",
    "keywords": "Class NodeBase Inheritance Object NodeBase Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NodeBase Constructors NodeBase(Vector2, Single, Single, String, GUIStyle, GUIStyle, GUIStyle, Action<ConnectionPoint>, Action<ConnectionPoint>) Declaration public NodeBase(Vector2 position, float width, float height, string title, GUIStyle nodeStyle, GUIStyle inputStyle, GUIStyle outputStyle, Action<ConnectionPoint> OnClickInput, Action<ConnectionPoint> OnClickOutput) Parameters Type Name Description Vector2 position Single width Single height String title GUIStyle nodeStyle GUIStyle inputStyle GUIStyle outputStyle Action < ConnectionPoint > OnClickInput Action < ConnectionPoint > OnClickOutput Properties GetRect Declaration public Rect GetRect { get; } Property Value Type Description Rect HalfHeight Declaration public float HalfHeight { get; } Property Value Type Description Single IsDragged Declaration public bool IsDragged { get; set; } Property Value Type Description Boolean Methods Drag(Vector2) Declaration public void Drag(Vector2 delta) Parameters Type Name Description Vector2 delta Draw() Declaration public void Draw() ProcessEvents(Event) Declaration public bool ProcessEvents(Event event) Parameters Type Name Description Event event Returns Type Description Boolean"
  },
  "api/Global.NodeBasedEditor.html": {
    "href": "api/Global.NodeBasedEditor.html",
    "title": "Class NodeBasedEditor | TirUtilities",
    "keywords": "Class NodeBasedEditor Inheritance Object NodeBasedEditor Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NodeBasedEditor : EditorWindow Methods Open() Declaration public static void Open()"
  },
  "api/Global.PieChartTest.html": {
    "href": "api/Global.PieChartTest.html",
    "title": "Class PieChartTest | TirUtilities",
    "keywords": "Class PieChartTest Inheritance Object PieChartTest Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PieChartTest : MonoBehaviour"
  },
  "api/Global.RebindTest.html": {
    "href": "api/Global.RebindTest.html",
    "title": "Class RebindTest | TirUtilities",
    "keywords": "Class RebindTest Inheritance Object RebindTest Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RebindTest : MonoBehaviour Methods StartInteractiveRebind() Declaration public void StartInteractiveRebind()"
  },
  "api/TirUtilities.Automation.AutoRotate.html": {
    "href": "api/TirUtilities.Automation.AutoRotate.html",
    "title": "Class AutoRotate | TirUtilities",
    "keywords": "Class AutoRotate Inheritance Object AutoRotate Namespace : TirUtilities.Automation Assembly : cs.temp.dll.dll Syntax public class AutoRotate : MonoBehaviour Methods ToggleRotation() Declaration public void ToggleRotation()"
  },
  "api/TirUtilities.Automation.html": {
    "href": "api/TirUtilities.Automation.html",
    "title": "Namespace TirUtilities.Automation | TirUtilities",
    "keywords": "Namespace TirUtilities.Automation Classes AutoRotate"
  },
  "api/TirUtilities.Controllers.CameraLookEvents.html": {
    "href": "api/TirUtilities.Controllers.CameraLookEvents.html",
    "title": "Class CameraLookEvents | TirUtilities",
    "keywords": "Class CameraLookEvents Used to inform event listeners and signal receivers what game object is in the center of the camera's view. Inheritance Object CameraLookEvents Namespace : TirUtilities.Controllers Assembly : cs.temp.dll.dll Syntax public class CameraLookEvents : MonoBehaviour Fields OnLookTargetChanged Declaration public GameObjectEvent OnLookTargetChanged Field Value Type Description GameObjectEvent"
  },
  "api/TirUtilities.Controllers.html": {
    "href": "api/TirUtilities.Controllers.html",
    "title": "Namespace TirUtilities.Controllers | TirUtilities",
    "keywords": "Namespace TirUtilities.Controllers Classes CameraLookEvents Used to inform event listeners and signal receivers what game object is in the center of the camera's view. MouseUtility Contains utility functions that make working with the mouse easier. ThirdPersonController"
  },
  "api/TirUtilities.Controllers.MouseUtility.html": {
    "href": "api/TirUtilities.Controllers.MouseUtility.html",
    "title": "Class MouseUtility | TirUtilities",
    "keywords": "Class MouseUtility Contains utility functions that make working with the mouse easier. Inheritance Object MouseUtility Namespace : TirUtilities.Controllers Assembly : cs.temp.dll.dll Syntax public sealed class MouseUtility Properties LeftMouseButtonDown Short hand for Input.GetMouseButtonDown(0) Declaration public static bool LeftMouseButtonDown { get; } Property Value Type Description Boolean MiddleMouseButtonDown Short hand for Input.GetMouseButtonDown(2) Declaration public static bool MiddleMouseButtonDown { get; } Property Value Type Description Boolean RightMouseButtonDown Short hand for Input.GetMouseButtonDown(1) Declaration public static bool RightMouseButtonDown { get; } Property Value Type Description Boolean Methods GetGameObjectAtMousePosition() Finds the first game object under the mouse that has an attached collider. Declaration public static GameObject GetGameObjectAtMousePosition() Returns Type Description GameObject The game object found or null. GetGameObjectAtMousePosition(LayerMask) Finds the first game object with an attached collider on the target layers. Declaration public static GameObject GetGameObjectAtMousePosition(LayerMask targetLayers) Parameters Type Name Description LayerMask targetLayers Returns Type Description GameObject The game object found or null. MouseRaycast() Casts a ray from the camera returning true if it hits anything. Declaration public static bool MouseRaycast() Returns Type Description Boolean True if the ray hits a Collider. MouseRaycast(out RaycastHit, LayerMask, Single, QueryTriggerInteraction) Casts a ray from the camera returning true if it hits anything. Declaration public static bool MouseRaycast(out RaycastHit raycastHit, LayerMask targetLayers, float maxDistance = default(float), QueryTriggerInteraction queryTriggerInteraction = null) Parameters Type Name Description RaycastHit raycastHit LayerMask targetLayers Single maxDistance QueryTriggerInteraction queryTriggerInteraction Returns Type Description Boolean True if the ray hits a Collider. MouseRaycast(out RaycastHit, Single) Casts a ray from the camera returning true if it hits anything and assigns that hit to the out parameter. Declaration public static bool MouseRaycast(out RaycastHit raycastHit, float maxDistance = default(float)) Parameters Type Name Description RaycastHit raycastHit Single maxDistance Returns Type Description Boolean True if the ray hits a Collider. MouseRaycast2D() Casts a ray from the camera returning true if it hits anything. Declaration public static bool MouseRaycast2D() Returns Type Description Boolean True if the ray hits a Collider2D. MouseRaycast2D(out RaycastHit2D, LayerMask, Single) Casts a ray from the camera returning true if it hits anything and assigns that hit to the out parameter. Declaration public static bool MouseRaycast2D(out RaycastHit2D raycastHit2D, LayerMask targetLayers, float distance = default(float)) Parameters Type Name Description RaycastHit2D raycastHit2D LayerMask targetLayers Single distance Returns Type Description Boolean True if the ray hits a Collider2D. TryGetGameObjectOnClick2D(out GameObject, LayerMask) Declaration public static bool TryGetGameObjectOnClick2D(out GameObject gameObject, LayerMask targetLayers) Parameters Type Name Description GameObject gameObject LayerMask targetLayers Returns Type Description Boolean TryGetHoveredCollider2D(out Collider2D, LayerMask) Declaration public static bool TryGetHoveredCollider2D(out Collider2D collider, LayerMask targetLayers) Parameters Type Name Description Collider2D collider LayerMask targetLayers Returns Type Description Boolean TryGetHoveredGameObject2D(out GameObject, LayerMask) Declaration public static bool TryGetHoveredGameObject2D(out GameObject gameObject, LayerMask targetLayers) Parameters Type Name Description GameObject gameObject LayerMask targetLayers Returns Type Description Boolean TryGetObjectAtMousePosition(out GameObject, LayerMask) Assigns to selection the first game object with an attached collider that is on any of the target layers and under the mouse pointer. Assigns null to selection if no object was found. Declaration public static bool TryGetObjectAtMousePosition(out GameObject selection, LayerMask targetLayers) Parameters Type Name Description GameObject selection The selected object is assigned to this. LayerMask targetLayers The layers that the raycast can hit. Returns Type Description Boolean True if an object was found, otherwise false. TryGetWorldSpaceMousePosition(out Vector3) Attempts to get the world space position of the mouse cursor by casting a ray through the mouse's screen point. Declaration public static bool TryGetWorldSpaceMousePosition(out Vector3 point) Parameters Type Name Description Vector3 point The point the mouse is hovering over. Returns Type Description Boolean True if there are any colliders under the mouse. TryGetWorldSpaceMousePosition(out Vector3, LayerMask) Attempts to get the world space position of the mouse cursor by casting a ray through the mouse's screen point, and into the target layers. Declaration public static bool TryGetWorldSpaceMousePosition(out Vector3 point, LayerMask targetLayers) Parameters Type Name Description Vector3 point The point the mouse is hovering over. LayerMask targetLayers The layers that the ray can hit. Returns Type Description Boolean True if any of the colliders under the mouse are on the target layers. TryGetWorldSpaceMousePosition2D(out Vector3) Gets the position of a 2D ray-cast hit. Declaration public static bool TryGetWorldSpaceMousePosition2D(out Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean True if something was hit, otherwise false."
  },
  "api/TirUtilities.Controllers.ThirdPersonController.html": {
    "href": "api/TirUtilities.Controllers.ThirdPersonController.html",
    "title": "Class ThirdPersonController | TirUtilities",
    "keywords": "Class ThirdPersonController Inheritance Object ThirdPersonController Namespace : TirUtilities.Controllers Assembly : cs.temp.dll.dll Syntax public class ThirdPersonController : MonoBehaviour Methods Jump() Declaration public void Jump() SetMoveDirection(Vector2) Declaration public void SetMoveDirection(Vector2 direction) Parameters Type Name Description Vector2 direction"
  },
  "api/TirUtilities.CustomEvents.BoolEvent.html": {
    "href": "api/TirUtilities.CustomEvents.BoolEvent.html",
    "title": "Class BoolEvent | TirUtilities",
    "keywords": "Class BoolEvent Passes a bool and a GameObject to its listeners. Inheritance Object BoolEvent Namespace : TirUtilities.CustomEvents Assembly : cs.temp.dll.dll Syntax [Serializable] public class BoolEvent : UnityEvent<bool, GameObject>"
  },
  "api/TirUtilities.CustomEvents.GameObjectEvent.html": {
    "href": "api/TirUtilities.CustomEvents.GameObjectEvent.html",
    "title": "Class GameObjectEvent | TirUtilities",
    "keywords": "Class GameObjectEvent A Unity Event that passes a game object to its listeners. Inheritance Object GameObjectEvent Namespace : TirUtilities.CustomEvents Assembly : cs.temp.dll.dll Syntax public class GameObjectEvent : UnityEvent<GameObject>"
  },
  "api/TirUtilities.CustomEvents.html": {
    "href": "api/TirUtilities.CustomEvents.html",
    "title": "Namespace TirUtilities.CustomEvents | TirUtilities",
    "keywords": "Namespace TirUtilities.CustomEvents Classes BoolEvent Passes a bool and a GameObject to its listeners. GameObjectEvent A Unity Event that passes a game object to its listeners."
  },
  "api/TirUtilities.CustomGizmos.DrawBoxGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawBoxGizmo.html",
    "title": "Class DrawBoxGizmo | TirUtilities",
    "keywords": "Class DrawBoxGizmo Draws a box around a box collider. Inheritance Object DrawBoxGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawBoxGizmo : MonoBehaviour"
  },
  "api/TirUtilities.CustomGizmos.DrawCameraGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawCameraGizmo.html",
    "title": "Class DrawCameraGizmo | TirUtilities",
    "keywords": "Class DrawCameraGizmo Inheritance Object DrawCameraGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawCameraGizmo : MonoBehaviour"
  },
  "api/TirUtilities.CustomGizmos.DrawColliderGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawColliderGizmo.html",
    "title": "Class DrawColliderGizmo | TirUtilities",
    "keywords": "Class DrawColliderGizmo Draws a gizmo for the given collider. Inheritance Object DrawColliderGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawColliderGizmo : MonoBehaviour Remarks Supported colliders: Only wire gizmo."
  },
  "api/TirUtilities.CustomGizmos.DrawForwardGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawForwardGizmo.html",
    "title": "Class DrawForwardGizmo | TirUtilities",
    "keywords": "Class DrawForwardGizmo Inheritance Object DrawForwardGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawForwardGizmo : MonoBehaviour"
  },
  "api/TirUtilities.CustomGizmos.html": {
    "href": "api/TirUtilities.CustomGizmos.html",
    "title": "Namespace TirUtilities.CustomGizmos | TirUtilities",
    "keywords": "Namespace TirUtilities.CustomGizmos Classes DrawBoxGizmo Draws a box around a box collider. DrawCameraGizmo DrawColliderGizmo Draws a gizmo for the given collider. DrawForwardGizmo TirGizmos A collection of gizmos that function like those from UnityEngine.Gizmos."
  },
  "api/TirUtilities.CustomGizmos.TirGizmos.html": {
    "href": "api/TirUtilities.CustomGizmos.TirGizmos.html",
    "title": "Class TirGizmos | TirUtilities",
    "keywords": "Class TirGizmos A collection of gizmos that function like those from UnityEngine.Gizmos. Inheritance Object TirGizmos Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public static class TirGizmos Methods DrawWireCapsule(CapsuleCollider, Single) Draws a wire gizmo in the shape of the provided capsule collider. Declaration public static void DrawWireCapsule(CapsuleCollider capsuleCollider, float sizeScaler = 1F) Parameters Type Name Description CapsuleCollider capsuleCollider Single sizeScaler Remarks Semialgebraic Description"
  },
  "api/TirUtilities.Detection.html": {
    "href": "api/TirUtilities.Detection.html",
    "title": "Namespace TirUtilities.Detection | TirUtilities",
    "keywords": "Namespace TirUtilities.Detection Classes TriggerVolume Checks if the object that enter's its collider is on a layer in the layer mask. If it was, TirUtilities.Detection.TriggerVolume.OnEnterVolume is invoked."
  },
  "api/TirUtilities.Detection.TriggerVolume.html": {
    "href": "api/TirUtilities.Detection.TriggerVolume.html",
    "title": "Class TriggerVolume | TirUtilities",
    "keywords": "Class TriggerVolume Checks if the object that enter's its collider is on a layer in the layer mask. If it was, TirUtilities.Detection.TriggerVolume.OnEnterVolume is invoked. Inheritance Object TriggerVolume Namespace : TirUtilities.Detection Assembly : cs.temp.dll.dll Syntax public class TriggerVolume : MonoBehaviour"
  },
  "api/TirUtilities.DisplayOnlyAttribute.html": {
    "href": "api/TirUtilities.DisplayOnlyAttribute.html",
    "title": "Class DisplayOnlyAttribute | TirUtilities",
    "keywords": "Class DisplayOnlyAttribute The decorated field is be displayed in the inspector, but cannot be edited. Inheritance Object DisplayOnlyAttribute Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public class DisplayOnlyAttribute : PropertyAttribute Remarks Property drawer: TirUtilities/Editor/PropertyDrawers/DisplayOnlyDrawer.cs"
  },
  "api/TirUtilities.Editor.Experimental.html": {
    "href": "api/TirUtilities.Editor.Experimental.html",
    "title": "Namespace TirUtilities.Editor.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.Experimental Classes MenuStateMachineInspector"
  },
  "api/TirUtilities.Editor.Experimental.MenuStateMachineInspector.html": {
    "href": "api/TirUtilities.Editor.Experimental.MenuStateMachineInspector.html",
    "title": "Class MenuStateMachineInspector | TirUtilities",
    "keywords": "Class MenuStateMachineInspector Inheritance Object MenuStateMachineInspector Namespace : TirUtilities.Editor.Experimental Assembly : cs.temp.dll.dll Syntax public class MenuStateMachineInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TirUtilities.Editor.FlexGridInpector.html": {
    "href": "api/TirUtilities.Editor.FlexGridInpector.html",
    "title": "Class FlexGridInpector | TirUtilities",
    "keywords": "Class FlexGridInpector Draws the inspector for FlexibleGridLayoutGroup . Inheritance Object FlexGridInpector Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public class FlexGridInpector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TirUtilities.Editor.html": {
    "href": "api/TirUtilities.Editor.html",
    "title": "Namespace TirUtilities.Editor | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor Classes FlexGridInpector Draws the inspector for FlexibleGridLayoutGroup . MenuPageContextMenu Context menu to create new Menu Pages int he hierarchy. MenuPageInspector Structs ProjectEditorPaths Paths to important locations used by editor scripts."
  },
  "api/TirUtilities.Editor.MenuPageContextMenu.html": {
    "href": "api/TirUtilities.Editor.MenuPageContextMenu.html",
    "title": "Class MenuPageContextMenu | TirUtilities",
    "keywords": "Class MenuPageContextMenu Context menu to create new Menu Pages int he hierarchy. Inheritance Object MenuPageContextMenu Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public class MenuPageContextMenu : UEditor"
  },
  "api/TirUtilities.Editor.MenuPageInspector.html": {
    "href": "api/TirUtilities.Editor.MenuPageInspector.html",
    "title": "Class MenuPageInspector | TirUtilities",
    "keywords": "Class MenuPageInspector Inheritance Object MenuPageInspector Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public class MenuPageInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TirUtilities.Editor.Prefs.EditorPrefsBool.html": {
    "href": "api/TirUtilities.Editor.Prefs.EditorPrefsBool.html",
    "title": "Class EditorPrefsBool | TirUtilities",
    "keywords": "Class EditorPrefsBool Inheritance Object EditorPrefsItem < Boolean > EditorPrefsBool Inherited Members EditorPrefsItem<Boolean>.Key EditorPrefsItem<Boolean>.Label EditorPrefsItem<Boolean>.DefaultValue Namespace : TirUtilities.Editor.Prefs Assembly : cs.temp.dll.dll Syntax public class EditorPrefsBool : EditorPrefsItem<bool> Remarks Based on the EditorPrefString class in the source of RainbowFolders. Constructors EditorPrefsBool(String, GUIContent, Boolean) Declaration public EditorPrefsBool(string key, GUIContent label, bool defaultValue) Parameters Type Name Description String key GUIContent label Boolean defaultValue Properties Value Declaration public override bool Value { get; set; } Property Value Type Description Boolean Overrides TirUtilities.Editor.Prefs.EditorPrefsItem<System.Boolean>.Value Methods Draw() Declaration public override void Draw() Overrides TirUtilities.Editor.Prefs.EditorPrefsItem<System.Boolean>.Draw()"
  },
  "api/TirUtilities.Editor.Prefs.EditorPrefsItem-1.html": {
    "href": "api/TirUtilities.Editor.Prefs.EditorPrefsItem-1.html",
    "title": "Class EditorPrefsItem<T> | TirUtilities",
    "keywords": "Class EditorPrefsItem<T> Inheritance Object EditorPrefsItem<T> EditorPrefsBool EditorPrefsVector2 Namespace : TirUtilities.Editor.Prefs Assembly : cs.temp.dll.dll Syntax public abstract class EditorPrefsItem<T> Type Parameters Name Description T Remarks Based on the EditorPrefItem class in the source of RainbowFolders. Constructors EditorPrefsItem(String, GUIContent, T) Declaration protected EditorPrefsItem(string key, GUIContent label, T defaultValue) Parameters Type Name Description String key GUIContent label T defaultValue Properties DefaultValue The default value stored with the key when it is created. Declaration protected T DefaultValue { get; } Property Value Type Description T Key Key used by EditorPrefs. Declaration protected string Key { get; } Property Value Type Description String Label Content to be drawn. Declaration protected GUIContent Label { get; } Property Value Type Description GUIContent Value Actual value of the item. Declaration public abstract T Value { get; set; } Property Value Type Description T Methods Draw() Draw this IMGUI item. Declaration public abstract void Draw() Operators Implicit(EditorPrefsItem<T> to T) Declaration public static implicit operator T(EditorPrefsItem<T> other) Parameters Type Name Description EditorPrefsItem <T> other Returns Type Description T"
  },
  "api/TirUtilities.Editor.Prefs.EditorPrefsVector2.html": {
    "href": "api/TirUtilities.Editor.Prefs.EditorPrefsVector2.html",
    "title": "Class EditorPrefsVector2 | TirUtilities",
    "keywords": "Class EditorPrefsVector2 Inheritance Object EditorPrefsItem < Vector2 > EditorPrefsVector2 Inherited Members EditorPrefsItem<Vector2>.Key EditorPrefsItem<Vector2>.Label EditorPrefsItem<Vector2>.DefaultValue Namespace : TirUtilities.Editor.Prefs Assembly : cs.temp.dll.dll Syntax public class EditorPrefsVector2 : EditorPrefsItem<Vector2> Remarks Based on the EditorPrefString class in the source of RainbowFolders. Constructors EditorPrefsVector2(String, GUIContent, Vector2) Declaration public EditorPrefsVector2(string key, GUIContent label, Vector2 defaultValue) Parameters Type Name Description String key GUIContent label Vector2 defaultValue Properties Value Declaration public override Vector2 Value { get; set; } Property Value Type Description Vector2 Overrides TirUtilities.Editor.Prefs.EditorPrefsItem<Vector2>.Value Methods Draw() Declaration public override void Draw() Overrides TirUtilities.Editor.Prefs.EditorPrefsItem<Vector2>.Draw()"
  },
  "api/TirUtilities.Editor.Prefs.Experimental.html": {
    "href": "api/TirUtilities.Editor.Prefs.Experimental.html",
    "title": "Namespace TirUtilities.Editor.Prefs.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.Prefs.Experimental Classes ScriptTemplateIntercept Structs ScriptTemplateKeys"
  },
  "api/TirUtilities.Editor.Prefs.Experimental.ScriptTemplateIntercept.html": {
    "href": "api/TirUtilities.Editor.Prefs.Experimental.ScriptTemplateIntercept.html",
    "title": "Class ScriptTemplateIntercept | TirUtilities",
    "keywords": "Class ScriptTemplateIntercept Inheritance Object ScriptTemplateIntercept Namespace : TirUtilities.Editor.Prefs.Experimental Assembly : cs.temp.dll.dll Syntax public class ScriptTemplateIntercept : UnityEditor.AssetModificationProcessor Methods OnWillCreateAsset(String) Declaration public static void OnWillCreateAsset(string path) Parameters Type Name Description String path"
  },
  "api/TirUtilities.Editor.Prefs.Experimental.ScriptTemplateKeys.html": {
    "href": "api/TirUtilities.Editor.Prefs.Experimental.ScriptTemplateKeys.html",
    "title": "Struct ScriptTemplateKeys | TirUtilities",
    "keywords": "Struct ScriptTemplateKeys Namespace : TirUtilities.Editor.Prefs.Experimental Assembly : cs.temp.dll.dll Syntax public ref readonly struct ScriptTemplateKeys Properties AuthorName Declaration public static readonly string AuthorName { get; } Property Value Type Description String CompanyName Declaration public static readonly string CompanyName { get; } Property Value Type Description String DateToday Declaration public static readonly string DateToday { get; } Property Value Type Description String ProjectName Declaration public static readonly string ProjectName { get; } Property Value Type Description String VersionNumber Declaration public static readonly string VersionNumber { get; } Property Value Type Description String"
  },
  "api/TirUtilities.Editor.Prefs.html": {
    "href": "api/TirUtilities.Editor.Prefs.html",
    "title": "Namespace TirUtilities.Editor.Prefs | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.Prefs Classes EditorPrefsBool EditorPrefsItem<T> EditorPrefsVector2 TirUtilitesProjectSettings"
  },
  "api/TirUtilities.Editor.Prefs.TirUtilitesProjectSettings.html": {
    "href": "api/TirUtilities.Editor.Prefs.TirUtilitesProjectSettings.html",
    "title": "Class TirUtilitesProjectSettings | TirUtilities",
    "keywords": "Class TirUtilitesProjectSettings Inheritance Object TirUtilitesProjectSettings Namespace : TirUtilities.Editor.Prefs Assembly : cs.temp.dll.dll Syntax public static class TirUtilitesProjectSettings Remarks Based on the ProjectPreferences class in the source of RainbowFolders. Properties AuthorName Declaration public static string AuthorName { get; } Property Value Type Description String HomeFolder Declaration public static string HomeFolder { get; } Property Value Type Description String Methods CreateSettingsProvider() Declaration public static SettingsProvider CreateSettingsProvider() Returns Type Description SettingsProvider"
  },
  "api/TirUtilities.Editor.ProjectEditorPaths.html": {
    "href": "api/TirUtilities.Editor.ProjectEditorPaths.html",
    "title": "Struct ProjectEditorPaths | TirUtilities",
    "keywords": "Struct ProjectEditorPaths Paths to important locations used by editor scripts. Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public ref readonly struct ProjectEditorPaths Properties PathToHierarchyDividerSettings Declaration public static readonly string PathToHierarchyDividerSettings { get; } Property Value Type Description String PathToLevelSystemPrefab Declaration public static readonly string PathToLevelSystemPrefab { get; } Property Value Type Description String PathToMenuPagePrefab Declaration public static readonly string PathToMenuPagePrefab { get; } Property Value Type Description String PathToRootMenuPrefab Declaration public static readonly string PathToRootMenuPrefab { get; } Property Value Type Description String ProjectName Declaration public static readonly string ProjectName { get; } Property Value Type Description String"
  },
  "api/TirUtilities.Editor.PropertyDrawers.DisplayOnlyDrawer.html": {
    "href": "api/TirUtilities.Editor.PropertyDrawers.DisplayOnlyDrawer.html",
    "title": "Class DisplayOnlyDrawer | TirUtilities",
    "keywords": "Class DisplayOnlyDrawer Draws the DisplayOnlyAttribute . Inheritance Object DisplayOnlyDrawer Namespace : TirUtilities.Editor.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class DisplayOnlyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/TirUtilities.Editor.PropertyDrawers.html": {
    "href": "api/TirUtilities.Editor.PropertyDrawers.html",
    "title": "Namespace TirUtilities.Editor.PropertyDrawers | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.PropertyDrawers Classes DisplayOnlyDrawer Draws the DisplayOnlyAttribute . ScenePathDrawer Converts a string field to a UnityEditor.SceneAsset in the inspector."
  },
  "api/TirUtilities.Editor.PropertyDrawers.ScenePathDrawer.html": {
    "href": "api/TirUtilities.Editor.PropertyDrawers.ScenePathDrawer.html",
    "title": "Class ScenePathDrawer | TirUtilities",
    "keywords": "Class ScenePathDrawer Converts a string field to a UnityEditor.SceneAsset in the inspector. Inheritance Object ScenePathDrawer Namespace : TirUtilities.Editor.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class ScenePathDrawer : PropertyDrawer Remarks Based on SceneDrawer.cs from Mirror. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/TirUtilities.Editor.SignalMenus.html": {
    "href": "api/TirUtilities.Editor.SignalMenus.html",
    "title": "Namespace TirUtilities.Editor.SignalMenus | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.SignalMenus Classes LevelLoaderMenu"
  },
  "api/TirUtilities.Editor.SignalMenus.LevelLoaderMenu.html": {
    "href": "api/TirUtilities.Editor.SignalMenus.LevelLoaderMenu.html",
    "title": "Class LevelLoaderMenu | TirUtilities",
    "keywords": "Class LevelLoaderMenu Inheritance Object LevelLoaderMenu Namespace : TirUtilities.Editor.SignalMenus Assembly : cs.temp.dll.dll Syntax public sealed class LevelLoaderMenu : EditorWindow Methods Open() Declaration public static void Open()"
  },
  "api/TirUtilities.Experimental.ApplicationState.html": {
    "href": "api/TirUtilities.Experimental.ApplicationState.html",
    "title": "Class ApplicationState | TirUtilities",
    "keywords": "Class ApplicationState Base class for states that belong to the ApplicationStateMachine . Inheritance Object ApplicationState MenuState PausedState PlayingState QuittingState Implements IState < ApplicationStateMachine > Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class ApplicationState : IState<ApplicationStateMachine> Fields _description The description of what this state is intended to be used for. Declaration protected string _description Field Value Type Description String Properties Description The description of what this state is intended to be used for. Declaration public string Description { get; } Property Value Type Description String PausedTimeScale Small number 1.0e-13f. Declaration protected static float PausedTimeScale { get; } Property Value Type Description Single PlayingTimeScale One 1.0f Declaration protected static float PlayingTimeScale { get; } Property Value Type Description Single Methods EnterState(ApplicationStateMachine) Logic that should run when the state is entered. Declaration public virtual void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine ExitState(ApplicationStateMachine) Logic that should run when the state is exited. Declaration public virtual void ExitState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine UpdateState(ApplicationStateMachine) Logic that should run when the state machine needs to update data maintained by the current state. Declaration public virtual void UpdateState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Implements IState<T>"
  },
  "api/TirUtilities.Experimental.ApplicationStateMachine.html": {
    "href": "api/TirUtilities.Experimental.ApplicationStateMachine.html",
    "title": "Class ApplicationStateMachine | TirUtilities",
    "keywords": "Class ApplicationStateMachine Controls the current state of the application. See also: ApplicationState Inheritance Object StateMachine ApplicationStateMachine Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class ApplicationStateMachine : StateMachine Properties CurrentState Declaration public ApplicationState CurrentState { get; set; } Property Value Type Description ApplicationState InGame Declaration public bool InGame { get; set; } Property Value Type Description Boolean Methods QuitGame() Declaration public void QuitGame() TogglePaused() Declaration public void TogglePaused()"
  },
  "api/TirUtilities.Experimental.Command.html": {
    "href": "api/TirUtilities.Experimental.Command.html",
    "title": "Class Command | TirUtilities",
    "keywords": "Class Command Inheritance Object Command Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public abstract class Command Methods Execute() Declaration public abstract void Execute() Undo() Declaration public abstract void Undo()"
  },
  "api/TirUtilities.Experimental.html": {
    "href": "api/TirUtilities.Experimental.html",
    "title": "Namespace TirUtilities.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.Experimental Classes ApplicationState Base class for states that belong to the ApplicationStateMachine . ApplicationStateMachine Controls the current state of the application. See also: ApplicationState Command MenuState State machine enters this state when in a menu. PausedState Sets the time scale to PausedTimeScale when entered. PlayingState Sets the time scale to PausedTimeScale . QuittingState Quits the game or exits play mode in the editor. Singleton This is intended only as an example. DO NOT USE!!! State StateAction"
  },
  "api/TirUtilities.Experimental.MenuState.html": {
    "href": "api/TirUtilities.Experimental.MenuState.html",
    "title": "Class MenuState | TirUtilities",
    "keywords": "Class MenuState State machine enters this state when in a menu. Inheritance Object ApplicationState MenuState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public sealed class MenuState : ApplicationState, IState<ApplicationStateMachine> Methods EnterState(ApplicationStateMachine) Declaration public override void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Overrides ApplicationState.EnterState(ApplicationStateMachine) Implements IState<T>"
  },
  "api/TirUtilities.Experimental.PausedState.html": {
    "href": "api/TirUtilities.Experimental.PausedState.html",
    "title": "Class PausedState | TirUtilities",
    "keywords": "Class PausedState Sets the time scale to PausedTimeScale when entered. Inheritance Object ApplicationState PausedState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public sealed class PausedState : ApplicationState, IState<ApplicationStateMachine> Methods EnterState(ApplicationStateMachine) Declaration public override void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Overrides ApplicationState.EnterState(ApplicationStateMachine) Implements IState<T>"
  },
  "api/TirUtilities.Experimental.PlayingState.html": {
    "href": "api/TirUtilities.Experimental.PlayingState.html",
    "title": "Class PlayingState | TirUtilities",
    "keywords": "Class PlayingState Sets the time scale to PausedTimeScale . Inheritance Object ApplicationState PlayingState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public sealed class PlayingState : ApplicationState, IState<ApplicationStateMachine> Methods EnterState(ApplicationStateMachine) Declaration public override void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Overrides ApplicationState.EnterState(ApplicationStateMachine) Implements IState<T>"
  },
  "api/TirUtilities.Experimental.QuittingState.html": {
    "href": "api/TirUtilities.Experimental.QuittingState.html",
    "title": "Class QuittingState | TirUtilities",
    "keywords": "Class QuittingState Quits the game or exits play mode in the editor. Inheritance Object ApplicationState QuittingState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public sealed class QuittingState : ApplicationState, IState<ApplicationStateMachine> Methods EnterState(ApplicationStateMachine) Declaration public override void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Overrides ApplicationState.EnterState(ApplicationStateMachine) Implements IState<T>"
  },
  "api/TirUtilities.Experimental.Singleton.html": {
    "href": "api/TirUtilities.Experimental.Singleton.html",
    "title": "Class Singleton | TirUtilities",
    "keywords": "Class Singleton This is intended only as an example. DO NOT USE!!! Inheritance Object Singleton Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public sealed class Singleton Properties Exists Declaration public static bool Exists { get; } Property Value Type Description Boolean Instance Declaration public static Singleton Instance { get; } Property Value Type Description Singleton"
  },
  "api/TirUtilities.Experimental.State.html": {
    "href": "api/TirUtilities.Experimental.State.html",
    "title": "Class State | TirUtilities",
    "keywords": "Class State Inheritance Object State Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public abstract class State : ScriptableObject Methods EnterState(StateMachine) Declaration public abstract void EnterState(StateMachine stateMachine) Parameters Type Name Description StateMachine stateMachine ExitState(StateMachine) Declaration public abstract void ExitState(StateMachine stateMachine) Parameters Type Name Description StateMachine stateMachine ExitState(StateMachine, out State) Declaration public abstract void ExitState(StateMachine stateMachine, out State nextState) Parameters Type Name Description StateMachine stateMachine State nextState UpdateState(StateMachine) Declaration public abstract void UpdateState(StateMachine stateMachine) Parameters Type Name Description StateMachine stateMachine"
  },
  "api/TirUtilities.Experimental.StateAction.html": {
    "href": "api/TirUtilities.Experimental.StateAction.html",
    "title": "Class StateAction | TirUtilities",
    "keywords": "Class StateAction Inheritance Object StateAction Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class StateAction : ScriptableObject"
  },
  "api/TirUtilities.Extensions.EventExtension.html": {
    "href": "api/TirUtilities.Extensions.EventExtension.html",
    "title": "Class EventExtension | TirUtilities",
    "keywords": "Class EventExtension A set of extension methods for UnityActions and UnityEvents. Inheritance Object EventExtension Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class EventExtension Methods IsNull(UnityAction) Shorthand for a action == null . Declaration public static bool IsNull(this UnityAction action) Parameters Type Name Description UnityAction action Returns Type Description Boolean The result of action == null IsNull(UnityEvent) Shorthand for a unityEvent == null . Declaration public static bool IsNull(this UnityEvent unityEvent) Parameters Type Name Description UnityEvent unityEvent This event. Returns Type Description Boolean The result of unityEvent == null IsNull<T0>(UnityAction<T0>) Shorthand for a action == null . Declaration public static bool IsNull<T0>(this UnityAction<T0> action) Parameters Type Name Description UnityAction <T0> action Returns Type Description Boolean The result of action == null Type Parameters Name Description T0 IsNull<T0>(UnityEvent<T0>) Shorthand for a unityEvent == null . Declaration public static bool IsNull<T0>(this UnityEvent<T0> unityEvent) Parameters Type Name Description UnityEvent <T0> unityEvent This event. Returns Type Description Boolean The result of unityEvent == null Type Parameters Name Description T0 NotNull(UnityAction) Shorthand for a action != null . Declaration public static bool NotNull(this UnityAction action) Parameters Type Name Description UnityAction action Returns Type Description Boolean The result of action != null NotNull(UnityEvent) Shorthand for a unityEvent != null . Declaration public static bool NotNull(this UnityEvent unityEvent) Parameters Type Name Description UnityEvent unityEvent This event. Returns Type Description Boolean The result of unityEvent != null NotNull<T0>(UnityAction<T0>) Shorthand for a action != null . Declaration public static bool NotNull<T0>(this UnityAction<T0> action) Parameters Type Name Description UnityAction <T0> action Returns Type Description Boolean The result of action != null Type Parameters Name Description T0 NotNull<T0>(UnityEvent<T0>) Shorthand for a unityEvent != null . Declaration public static bool NotNull<T0>(this UnityEvent<T0> unityEvent) Parameters Type Name Description UnityEvent <T0> unityEvent This event. Returns Type Description Boolean The result of unityEvent != null Type Parameters Name Description T0 SafeInvoke(UnityAction) Invokes the action if it has listeners. Declaration public static bool SafeInvoke(this UnityAction action) Parameters Type Name Description UnityAction action This event. Returns Type Description Boolean True if the invocation was successful, otherwise false. SafeInvoke(UnityEvent) Invokes the event if it has listeners. Declaration public static bool SafeInvoke(this UnityEvent unityEvent) Parameters Type Name Description UnityEvent unityEvent This event. Returns Type Description Boolean True if the invocation was successful, otherwise false. SafeInvoke<T0>(UnityAction<T0>, T0) Invokes the action if it has listeners. Declaration public static bool SafeInvoke<T0>(this UnityAction<T0> action, T0 target0) Parameters Type Name Description UnityAction <T0> action This action T0 target0 Parameter 0 Returns Type Description Boolean True if the invocation was successful, otherwise false. Type Parameters Name Description T0 The type of the action's parameter. SafeInvoke<T0>(UnityEvent<T0>, T0) Invokes the event if it has listeners. Declaration public static bool SafeInvoke<T0>(this UnityEvent<T0> unityEvent, T0 target) Parameters Type Name Description UnityEvent <T0> unityEvent This event. T0 target The target to be passed to listeners. Returns Type Description Boolean True if the invocation was successful, otherwise false. Type Parameters Name Description T0"
  },
  "api/TirUtilities.Extensions.html": {
    "href": "api/TirUtilities.Extensions.html",
    "title": "Namespace TirUtilities.Extensions | TirUtilities",
    "keywords": "Namespace TirUtilities.Extensions Classes EventExtension A set of extension methods for UnityActions and UnityEvents. ListExtensions A set of extensions to generic lists. ObjectExstentions A set of extensions to UnityEngine.Object. RigidbodyExtensions Extension methods for Unity rigidbodies."
  },
  "api/TirUtilities.Extensions.ListExtensions.html": {
    "href": "api/TirUtilities.Extensions.ListExtensions.html",
    "title": "Class ListExtensions | TirUtilities",
    "keywords": "Class ListExtensions A set of extensions to generic lists. Inheritance Object ListExtensions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class ListExtensions Methods IndexInRange<T>(List<T>, Int32) Test whether a given int index is in the range [0, list.Count). Declaration public static bool IndexInRange<T>(this List<T> list, int i) Parameters Type Name Description List <T> list Int32 i The index to be tested. Returns Type Description Boolean True if index i is in the range [0, list.Count). Type Parameters Name Description T IsEmpty<T>(List<T>) Shorthand for list.Count == 0; Declaration public static bool IsEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list is empty. Type Parameters Name Description T IsNull<T>(List<T>) Shorthand for list.Equals(null); . Declaration public static bool IsNull<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list is null. Type Parameters Name Description T IsNullOrEmpty<T>(List<T>) Shorthand for list.IsNull() || list.IsEmpty(); Declaration public static bool IsNullOrEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list contains no items or is null. Type Parameters Name Description T NotEmpty<T>(List<T>) Shorthand for list.Count > 0; Declaration public static bool NotEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list contains an number of items Type Parameters Name Description T NotNull<T>(List<T>) Shorthand for !list.Equals(null); Declaration public static bool NotNull<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list is not null. Type Parameters Name Description T"
  },
  "api/TirUtilities.Extensions.ObjectExstentions.html": {
    "href": "api/TirUtilities.Extensions.ObjectExstentions.html",
    "title": "Class ObjectExstentions | TirUtilities",
    "keywords": "Class ObjectExstentions A set of extensions to UnityEngine.Object. Inheritance Object ObjectExstentions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class ObjectExstentions Methods IsNull(Object) Declaration public static bool IsNull(this object self) Parameters Type Name Description Object self Returns Type Description Boolean NotNull(Object) Declaration public static bool NotNull(this object self) Parameters Type Name Description Object self Returns Type Description Boolean"
  },
  "api/TirUtilities.Extensions.RigidbodyExtensions.html": {
    "href": "api/TirUtilities.Extensions.RigidbodyExtensions.html",
    "title": "Class RigidbodyExtensions | TirUtilities",
    "keywords": "Class RigidbodyExtensions Extension methods for Unity rigidbodies. Inheritance Object RigidbodyExtensions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class RigidbodyExtensions Methods CancelAllVelocity(Rigidbody) Set velocity and angular velocity to zero. Declaration public static void CancelAllVelocity(this Rigidbody rigidbody) Parameters Type Name Description Rigidbody rigidbody This rigidbody."
  },
  "api/TirUtilities.html": {
    "href": "api/TirUtilities.html",
    "title": "Namespace TirUtilities | TirUtilities",
    "keywords": "Namespace TirUtilities Classes DisplayOnlyAttribute The decorated field is be displayed in the inspector, but cannot be edited. ScenePathAttribute Converts a string field to a UnityEditor.SceneAsset in the inspector. StateMachine Base class for all state machines. TirLogger Vector3Extensions Interfaces IState<T> Implement this interface on object that should be states in a StateMachine ."
  },
  "api/TirUtilities.IState-1.html": {
    "href": "api/TirUtilities.IState-1.html",
    "title": "Interface IState<T> | TirUtilities",
    "keywords": "Interface IState<T> Implement this interface on object that should be states in a StateMachine . Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public interface IState<T> where T : StateMachine Type Parameters Name Description T Methods EnterState(T) Declaration void EnterState(T stateMachine) Parameters Type Name Description T stateMachine ExitState(T) Declaration void ExitState(T stateMachine) Parameters Type Name Description T stateMachine UpdateState(T) Declaration void UpdateState(T stateMachine) Parameters Type Name Description T stateMachine"
  },
  "api/TirUtilities.LevelManagment.Experimental.html": {
    "href": "api/TirUtilities.LevelManagment.Experimental.html",
    "title": "Namespace TirUtilities.LevelManagment.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.LevelManagment.Experimental Classes LoadingScreen"
  },
  "api/TirUtilities.LevelManagment.Experimental.LoadingScreen.html": {
    "href": "api/TirUtilities.LevelManagment.Experimental.LoadingScreen.html",
    "title": "Class LoadingScreen | TirUtilities",
    "keywords": "Class LoadingScreen Inheritance Object LoadingScreen Namespace : TirUtilities.LevelManagment.Experimental Assembly : cs.temp.dll.dll Syntax public class LoadingScreen : MonoBehaviour Methods Hide() Declaration public IEnumerator Hide() Returns Type Description IEnumerator Hide(IEnumerator) Declaration public IEnumerator Hide(IEnumerator callbackCoroutine) Parameters Type Name Description IEnumerator callbackCoroutine Returns Type Description IEnumerator Show(IEnumerator) Declaration public IEnumerator Show(IEnumerator callbackCoroutine) Parameters Type Name Description IEnumerator callbackCoroutine Returns Type Description IEnumerator"
  },
  "api/TirUtilities.LevelManagment.html": {
    "href": "api/TirUtilities.LevelManagment.html",
    "title": "Namespace TirUtilities.LevelManagment | TirUtilities",
    "keywords": "Namespace TirUtilities.LevelManagment Classes LevelLoader Loads scenes asynchronously when passed LevelData . LevelSystem Handles the loading of LevelData emitted from LevelLoadSignal assets. Structs LevelData"
  },
  "api/TirUtilities.LevelManagment.LevelData.html": {
    "href": "api/TirUtilities.LevelManagment.LevelData.html",
    "title": "Struct LevelData | TirUtilities",
    "keywords": "Struct LevelData Namespace : TirUtilities.LevelManagment Assembly : cs.temp.dll.dll Syntax [Serializable] public struct LevelData Constructors LevelData(String, List<String>) Declaration public LevelData(string activeScene, List<string> addativeScenes = null) Parameters Type Name Description String activeScene List < String > addativeScenes Properties ActiveScene Declaration public readonly string ActiveScene { get; } Property Value Type Description String AdditiveScenes Declaration public readonly List<string> AdditiveScenes { get; } Property Value Type Description List < String >"
  },
  "api/TirUtilities.LevelManagment.LevelLoader.html": {
    "href": "api/TirUtilities.LevelManagment.LevelLoader.html",
    "title": "Class LevelLoader | TirUtilities",
    "keywords": "Class LevelLoader Loads scenes asynchronously when passed LevelData . Inheritance Object LevelLoader Namespace : TirUtilities.LevelManagment Assembly : cs.temp.dll.dll Syntax public static class LevelLoader Methods LoadLevelDataAsync(LevelData) Loads the scene in the given level data. Declaration public static IEnumerator LoadLevelDataAsync(LevelData level) Parameters Type Name Description LevelData level The data of the level being loaded. Returns Type Description IEnumerator AsyncOperation that loads the active scene. Events OnLoadComplete Invoked once all load operations have completed. Declaration public static event Action OnLoadComplete Event Type Type Description Action"
  },
  "api/TirUtilities.LevelManagment.LevelSystem.html": {
    "href": "api/TirUtilities.LevelManagment.LevelSystem.html",
    "title": "Class LevelSystem | TirUtilities",
    "keywords": "Class LevelSystem Handles the loading of LevelData emitted from LevelLoadSignal assets. Inheritance Object LevelSystem Namespace : TirUtilities.LevelManagment Assembly : cs.temp.dll.dll Syntax public class LevelSystem : MonoBehaviour"
  },
  "api/TirUtilities.ScenePathAttribute.html": {
    "href": "api/TirUtilities.ScenePathAttribute.html",
    "title": "Class ScenePathAttribute | TirUtilities",
    "keywords": "Class ScenePathAttribute Converts a string field to a UnityEditor.SceneAsset in the inspector. Inheritance Object ScenePathAttribute Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public class ScenePathAttribute : PropertyAttribute Remarks Based on [Scene] from Mirror. Property drawer: TirUtilities/Editor/PropertyDrawers/ScenePathDrawer.cs"
  },
  "api/TirUtilities.Serialization.html": {
    "href": "api/TirUtilities.Serialization.html",
    "title": "Namespace TirUtilities.Serialization | TirUtilities",
    "keywords": "Namespace TirUtilities.Serialization Classes TirJsonUtility Loads song jsons from a directory."
  },
  "api/TirUtilities.Serialization.TirJsonUtility.html": {
    "href": "api/TirUtilities.Serialization.TirJsonUtility.html",
    "title": "Class TirJsonUtility | TirUtilities",
    "keywords": "Class TirJsonUtility Loads song jsons from a directory. Inheritance Object TirJsonUtility Namespace : TirUtilities.Serialization Assembly : cs.temp.dll.dll Syntax public class TirJsonUtility Methods GetFilesInDirectory(String, String) Stores the paths to all files within the given directory, whose file extensions match the supplied regex. Declaration public static IEnumerable<string> GetFilesInDirectory(string path, string fileExtensions = \"*.txt\") Parameters Type Name Description String path The path to the json files. String fileExtensions A regex of file extensions, *.txt by default. Returns Type Description IEnumerable < String > An IEnumerable over the file paths. ParseJsonToList<T>(String) Deserializes a json file into a list of objects of type T. Declaration public static List<T> ParseJsonToList<T>(string path) Parameters Type Name Description String path The path to the json file. Returns Type Description List <T> List of objects. Type Parameters Name Description T Remarks The json must be formated so that the curly braces are on their own lines. TryParseJsonToList<T>(out List<T>, String) Deserializes a json file into a list of objects of type T. If the path is invalid, then the output list is set to null and false is returned. Declaration public static bool TryParseJsonToList<T>(out List<T> data, string path) Parameters Type Name Description List <T> data The list that will hold the deserialized objects. String path The path to the json file. Returns Type Description Boolean True the path is valid, false if the path is invalid. Type Parameters Name Description T Type of the objects represented by the json."
  },
  "api/TirUtilities.Signals.BoolSignal.html": {
    "href": "api/TirUtilities.Signals.BoolSignal.html",
    "title": "Class BoolSignal | TirUtilities",
    "keywords": "Class BoolSignal A Signal that emits a bool. Inheritance Object SignalBase BoolSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class BoolSignal : SignalBase Fields _OnEmit Invoked in Emit(Boolean) , calling receivers. Declaration protected UnityAction<bool> _OnEmit Field Value Type Description UnityAction < Boolean > Methods AddReceiver(UnityAction<Boolean>) Register a callback function to be invoked when this signal is Emit(Boolean) . Declaration public virtual void AddReceiver(UnityAction<bool> receiver) Parameters Type Name Description UnityAction < Boolean > receiver The callback to be invoked. Emit(Boolean) Emit this signal to all receivers, calling their AddReceiver(UnityAction<Boolean>) . Declaration public virtual void Emit(bool value) Parameters Type Name Description Boolean value RemoveReceiver(UnityAction<Boolean>) Register a callback function. Declaration public virtual void RemoveReceiver(UnityAction<bool> receiver) Parameters Type Name Description UnityAction < Boolean > receiver The callback function."
  },
  "api/TirUtilities.Signals.ByteSignal.html": {
    "href": "api/TirUtilities.Signals.ByteSignal.html",
    "title": "Class ByteSignal | TirUtilities",
    "keywords": "Class ByteSignal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. Inheritance Object SignalBase ByteSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class ByteSignal : SignalBase Fields _OnEmit Invoked in Emit(Byte) , calling receivers. Declaration protected UnityAction<byte> _OnEmit Field Value Type Description UnityAction < Byte > Methods AddReceiver(UnityAction<Byte>) Register a callback function to be invoked when this signal is Emit(Byte) . Declaration public virtual void AddReceiver(UnityAction<byte> receiver) Parameters Type Name Description UnityAction < Byte > receiver The callback to be invoked. Emit(Byte) Emit this signal to all receivers registered with AddReceiver(UnityAction<Byte>) . Declaration public virtual void Emit(byte value) Parameters Type Name Description Byte value RemoveReceiver(UnityAction<Byte>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<byte> receiver) Parameters Type Name Description UnityAction < Byte > receiver The callback function."
  },
  "api/TirUtilities.Signals.FloatSignal.html": {
    "href": "api/TirUtilities.Signals.FloatSignal.html",
    "title": "Class FloatSignal | TirUtilities",
    "keywords": "Class FloatSignal A Signal that emits a float. Inheritance Object SignalBase FloatSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class FloatSignal : SignalBase Fields _OnEmit Invoked in Emit(Single) , calling receivers. Declaration protected UnityAction<float> _OnEmit Field Value Type Description UnityAction < Single > Methods AddReceiver(UnityAction<Single>) Register a callback function to be invoked when this signal is Emit(Single) . Declaration public virtual void AddReceiver(UnityAction<float> receiver) Parameters Type Name Description UnityAction < Single > receiver The callback to be invoked. Emit(Single) Emit this signal to all receivers registered with AddReceiver(UnityAction<Single>) . Declaration public virtual void Emit(float value) Parameters Type Name Description Single value RemoveReceiver(UnityAction<Single>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<float> receiver) Parameters Type Name Description UnityAction < Single > receiver The callback function."
  },
  "api/TirUtilities.Signals.GameObjectSignal.html": {
    "href": "api/TirUtilities.Signals.GameObjectSignal.html",
    "title": "Class GameObjectSignal | TirUtilities",
    "keywords": "Class GameObjectSignal A Signal that emits a game object. Inheritance Object SignalBase GameObjectSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class GameObjectSignal : SignalBase Fields _OnEmit Invoked in Emit(GameObject) , calling receivers. Declaration protected UnityAction<GameObject> _OnEmit Field Value Type Description UnityAction < GameObject > Methods AddReceiver(UnityAction<GameObject>) Register a callback function to be invoked when this signal is Emit(GameObject) . Declaration public virtual void AddReceiver(UnityAction<GameObject> receiver) Parameters Type Name Description UnityAction < GameObject > receiver The callback to be invoked. Emit(GameObject) Emit this signal to all receivers, calling their AddReceiver(UnityAction<GameObject>) . Declaration public virtual void Emit(GameObject target) Parameters Type Name Description GameObject target RemoveReceiver(UnityAction<GameObject>) Register a callback function. Declaration public virtual void RemoveReceiver(UnityAction<GameObject> receiver) Parameters Type Name Description UnityAction < GameObject > receiver The callback function."
  },
  "api/TirUtilities.Signals.html": {
    "href": "api/TirUtilities.Signals.html",
    "title": "Namespace TirUtilities.Signals | TirUtilities",
    "keywords": "Namespace TirUtilities.Signals Classes BoolSignal A Signal that emits a bool. ByteSignal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. FloatSignal A Signal that emits a float. GameObjectSignal A Signal that emits a game object. IntSignal A Signal that emits an int. LevelLoadSignal Signal that emits a copy of a LevelData value. Signal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. SignalBase Base type for all signals. SignalReceiver Invokes TirUtilities.Signals.SignalReceiver._OnSignalReceived when the TirUtilities.Signals.SignalReceiver._signal is Emit() . StringSignal A Signal that emits a string."
  },
  "api/TirUtilities.Signals.IntSignal.html": {
    "href": "api/TirUtilities.Signals.IntSignal.html",
    "title": "Class IntSignal | TirUtilities",
    "keywords": "Class IntSignal A Signal that emits an int. Inheritance Object SignalBase IntSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class IntSignal : SignalBase Fields _OnEmit Invoked in Emit(Int32) , calling receivers. Declaration protected UnityAction<int> _OnEmit Field Value Type Description UnityAction < Int32 > Methods AddReceiver(UnityAction<Int32>) Register a callback function to be invoked when this signal is Emit(Int32) . Declaration public virtual void AddReceiver(UnityAction<int> receiver) Parameters Type Name Description UnityAction < Int32 > receiver The callback to be invoked. Emit(Int32) Emit this signal to all receivers registered with AddReceiver(UnityAction<Int32>) . Declaration public virtual void Emit(int value) Parameters Type Name Description Int32 value RemoveReceiver(UnityAction<Int32>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<int> receiver) Parameters Type Name Description UnityAction < Int32 > receiver The callback function."
  },
  "api/TirUtilities.Signals.LevelLoadSignal.html": {
    "href": "api/TirUtilities.Signals.LevelLoadSignal.html",
    "title": "Class LevelLoadSignal | TirUtilities",
    "keywords": "Class LevelLoadSignal Signal that emits a copy of a LevelData value. Inheritance Object SignalBase LevelLoadSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class LevelLoadSignal : SignalBase Fields _OnEmit Invoked in Emit() , calling receivers. Declaration protected UnityAction<LevelData> _OnEmit Field Value Type Description UnityAction < LevelData > Properties ActiveScene Declaration public string ActiveScene { get; } Property Value Type Description String Methods AddReceiver(UnityAction<LevelData>) Register a callback function to be invoked when this signal is Emit() . Declaration public virtual void AddReceiver(UnityAction<LevelData> receiver) Parameters Type Name Description UnityAction < LevelData > receiver The callback to be invoked. Emit() Emit this signal to all receivers, calling their AddReceiver(UnityAction<LevelData>) . Declaration public virtual void Emit() RemoveReceiver(UnityAction<LevelData>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<LevelData> receiver) Parameters Type Name Description UnityAction < LevelData > receiver The callback function."
  },
  "api/TirUtilities.Signals.Signal.html": {
    "href": "api/TirUtilities.Signals.Signal.html",
    "title": "Class Signal | TirUtilities",
    "keywords": "Class Signal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. Inheritance Object SignalBase Signal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class Signal : SignalBase Fields _OnEmit Invoked in Emit() , calling receivers. Declaration protected UnityAction _OnEmit Field Value Type Description UnityAction Methods AddReceiver(UnityAction) Register a callback function to be invoked when this signal is Emit() . Declaration public virtual void AddReceiver(UnityAction receiver) Parameters Type Name Description UnityAction receiver The callback to be invoked. Emit() Emit this signal to all receivers, calling their AddReceiver(UnityAction) . Declaration public virtual void Emit() RemoveReceiver(UnityAction) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction receiver) Parameters Type Name Description UnityAction receiver The callback function."
  },
  "api/TirUtilities.Signals.SignalBase.html": {
    "href": "api/TirUtilities.Signals.SignalBase.html",
    "title": "Class SignalBase | TirUtilities",
    "keywords": "Class SignalBase Base type for all signals. Inheritance Object SignalBase BoolSignal ByteSignal FloatSignal GameObjectSignal IntSignal LevelLoadSignal Signal StringSignal Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public abstract class SignalBase : ScriptableObject Fields _description The description of what this signal is intended to be used for. Declaration protected string _description Field Value Type Description String Properties Description The description of what this signal is intended to be used for. Declaration public string Description { get; } Property Value Type Description String"
  },
  "api/TirUtilities.Signals.SignalReceiver.html": {
    "href": "api/TirUtilities.Signals.SignalReceiver.html",
    "title": "Class SignalReceiver | TirUtilities",
    "keywords": "Class SignalReceiver Invokes TirUtilities.Signals.SignalReceiver._OnSignalReceived when the TirUtilities.Signals.SignalReceiver._signal is Emit() . Inheritance Object SignalReceiver Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class SignalReceiver : MonoBehaviour"
  },
  "api/TirUtilities.Signals.StringSignal.html": {
    "href": "api/TirUtilities.Signals.StringSignal.html",
    "title": "Class StringSignal | TirUtilities",
    "keywords": "Class StringSignal A Signal that emits a string. Inheritance Object SignalBase StringSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class StringSignal : SignalBase Fields _OnEmit Invoked in Emit(String) , calling receivers. Declaration protected UnityAction<string> _OnEmit Field Value Type Description UnityAction < String > Methods AddReceiver(UnityAction<String>) Register a callback function to be invoked when this signal is Emit(String) . Declaration public virtual void AddReceiver(UnityAction<string> receiver) Parameters Type Name Description UnityAction < String > receiver The callback to be invoked. Emit(String) Emit this signal to all receivers registered with AddReceiver(UnityAction<String>) . Declaration public virtual void Emit(string value) Parameters Type Name Description String value RemoveReceiver(UnityAction<String>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<string> receiver) Parameters Type Name Description UnityAction < String > receiver The callback function."
  },
  "api/TirUtilities.StateMachine.html": {
    "href": "api/TirUtilities.StateMachine.html",
    "title": "Class StateMachine | TirUtilities",
    "keywords": "Class StateMachine Base class for all state machines. Inheritance Object StateMachine ApplicationStateMachine MenuStateMachine Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public abstract class StateMachine : MonoBehaviour"
  },
  "api/TirUtilities.TirLogger.html": {
    "href": "api/TirUtilities.TirLogger.html",
    "title": "Class TirLogger | TirUtilities",
    "keywords": "Class TirLogger Inheritance Object TirLogger Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public static class TirLogger Methods LogCall() Logs the name of the class and the method to the console. Declaration public static void LogCall() LogCall(String, String) Declaration [Obsolete(\"This has been replaced with a stack frame inspection.Use TirLogger.LogCall() instead.\")] public static void LogCall(string className, string methodName) Parameters Type Name Description String className String methodName"
  },
  "api/TirUtilities.UI.Buttons.ButtonHotKey.html": {
    "href": "api/TirUtilities.UI.Buttons.ButtonHotKey.html",
    "title": "Class ButtonHotKey | TirUtilities",
    "keywords": "Class ButtonHotKey Invokes the OnClick event on a button. Inheritance Object ButtonHotKey Namespace : TirUtilities.UI.Buttons Assembly : cs.temp.dll.dll Syntax public class ButtonHotKey : MonoBehaviour"
  },
  "api/TirUtilities.UI.Buttons.html": {
    "href": "api/TirUtilities.UI.Buttons.html",
    "title": "Namespace TirUtilities.UI.Buttons | TirUtilities",
    "keywords": "Namespace TirUtilities.UI.Buttons Classes ButtonHotKey Invokes the OnClick event on a button."
  },
  "api/TirUtilities.UI.Experimental.html": {
    "href": "api/TirUtilities.UI.Experimental.html",
    "title": "Namespace TirUtilities.UI.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.UI.Experimental Classes TabMenu"
  },
  "api/TirUtilities.UI.Experimental.TabMenu.html": {
    "href": "api/TirUtilities.UI.Experimental.TabMenu.html",
    "title": "Class TabMenu | TirUtilities",
    "keywords": "Class TabMenu Inheritance Object TabMenu Namespace : TirUtilities.UI.Experimental Assembly : cs.temp.dll.dll Syntax public class TabMenu : MonoBehaviour"
  },
  "api/TirUtilities.UI.html": {
    "href": "api/TirUtilities.UI.html",
    "title": "Namespace TirUtilities.UI | TirUtilities",
    "keywords": "Namespace TirUtilities.UI Classes MenuPage Represents a UI canvas to the MenuStateMachine . MenuState Used by the MenuStateMachine to control which menu is shown. MenuStateMachine Controls the state of a set of MenuPage objects in the scene. MessagePanel A UI panel that displays TMP text elements and moves through them in order. TabButton Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Contains all of the pointer event logic. TabGroup Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Maintains all tabs in child objects. UIBillboard Turns the attached canvas to face the main camera and sets the text of the child TMP text component. UIMessageBox WorldSpaceMessageBox A world space UI panel that holds TMP text and links to another message."
  },
  "api/TirUtilities.UI.Layout.FitType.html": {
    "href": "api/TirUtilities.UI.Layout.FitType.html",
    "title": "Enum FitType | TirUtilities",
    "keywords": "Enum FitType Namespace : TirUtilities.UI.Layout Assembly : cs.temp.dll.dll Syntax public enum FitType Fields Name Description FixedColumns FixedRows Height Uniform Width"
  },
  "api/TirUtilities.UI.Layout.FitTypeExtensions.html": {
    "href": "api/TirUtilities.UI.Layout.FitTypeExtensions.html",
    "title": "Class FitTypeExtensions | TirUtilities",
    "keywords": "Class FitTypeExtensions Inheritance Object FitTypeExtensions Namespace : TirUtilities.UI.Layout Assembly : cs.temp.dll.dll Syntax public static class FitTypeExtensions Methods DistributesColumnwise(FitType) Declaration public static bool DistributesColumnwise(this FitType fitType) Parameters Type Name Description FitType fitType Returns Type Description Boolean DistributesEvenly(FitType) Declaration public static bool DistributesEvenly(this FitType fitType) Parameters Type Name Description FitType fitType Returns Type Description Boolean DistributesRowise(FitType) Declaration public static bool DistributesRowise(this FitType fitType) Parameters Type Name Description FitType fitType Returns Type Description Boolean"
  },
  "api/TirUtilities.UI.Layout.FlexibleGridLayoutGroup.html": {
    "href": "api/TirUtilities.UI.Layout.FlexibleGridLayoutGroup.html",
    "title": "Class FlexibleGridLayoutGroup | TirUtilities",
    "keywords": "Class FlexibleGridLayoutGroup Inheritance Object FlexibleGridLayoutGroup Namespace : TirUtilities.UI.Layout Assembly : cs.temp.dll.dll Syntax public class FlexibleGridLayoutGroup : LayoutGroup Methods CalculateLayoutInputHorizontal() Declaration public override void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Declaration public override void CalculateLayoutInputVertical() SetLayoutHorizontal() Declaration public override void SetLayoutHorizontal() SetLayoutVertical() Declaration public override void SetLayoutVertical()"
  },
  "api/TirUtilities.UI.Layout.html": {
    "href": "api/TirUtilities.UI.Layout.html",
    "title": "Namespace TirUtilities.UI.Layout | TirUtilities",
    "keywords": "Namespace TirUtilities.UI.Layout Classes FitTypeExtensions FlexibleGridLayoutGroup Enums FitType"
  },
  "api/TirUtilities.UI.MenuPage.html": {
    "href": "api/TirUtilities.UI.MenuPage.html",
    "title": "Class MenuPage | TirUtilities",
    "keywords": "Class MenuPage Represents a UI canvas to the MenuStateMachine . Inheritance Object MenuPage Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MenuPage : MonoBehaviour Properties State This page's MenuState . Declaration public MenuState State { get; } Property Value Type Description MenuState Methods HidePanel() Deactivate the menu panel. Declaration public void HidePanel() ShowPanel() Activate the menu panel. Declaration public void ShowPanel()"
  },
  "api/TirUtilities.UI.MenuState.html": {
    "href": "api/TirUtilities.UI.MenuState.html",
    "title": "Class MenuState | TirUtilities",
    "keywords": "Class MenuState Used by the MenuStateMachine to control which menu is shown. Inheritance Object MenuState Implements IState < MenuStateMachine > Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MenuState : ScriptableObject, IState<MenuStateMachine> Remarks Each MenuPage needs a menu state. This is done to avoid having to add entries to an enum every time a new page is created. Methods EnterState(MenuStateMachine) Transition from PreviousPage to ActivePage . Declaration public void EnterState(MenuStateMachine stateMachine) Parameters Type Name Description MenuStateMachine stateMachine The state machine that requires the update. ExitState(MenuStateMachine) Calls HidePanel for the active state. Declaration public void ExitState(MenuStateMachine stateMachine) Parameters Type Name Description MenuStateMachine stateMachine UpdateState(MenuStateMachine) Calls show panel for the active state. Declaration public void UpdateState(MenuStateMachine stateMachine) Parameters Type Name Description MenuStateMachine stateMachine Implements IState<T>"
  },
  "api/TirUtilities.UI.MenuStateMachine.html": {
    "href": "api/TirUtilities.UI.MenuStateMachine.html",
    "title": "Class MenuStateMachine | TirUtilities",
    "keywords": "Class MenuStateMachine Controls the state of a set of MenuPage objects in the scene. Inheritance Object StateMachine MenuStateMachine Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MenuStateMachine : StateMachine Properties ActivePage Get the currently active page. Declaration public MenuPage ActivePage { get; } Property Value Type Description MenuPage MenuPages Declaration public List<MenuPage> MenuPages { get; } Property Value Type Description List < MenuPage > PreviousPage Get the last active page. Declaration public MenuPage PreviousPage { get; } Property Value Type Description MenuPage Methods Back() Go back to the previous page in the history. Declaration public void Back() TransitionTo(MenuState) Transitions the state machine to the given state. Declaration public void TransitionTo(MenuState state) Parameters Type Name Description MenuState state"
  },
  "api/TirUtilities.UI.MessagePanel.html": {
    "href": "api/TirUtilities.UI.MessagePanel.html",
    "title": "Class MessagePanel | TirUtilities",
    "keywords": "Class MessagePanel A UI panel that displays TMP text elements and moves through them in order. Inheritance Object MessagePanel Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MessagePanel : MonoBehaviour Fields OnMessagePanelClosed Invoked after the TirUtilities.UI.MessagePanel._messagePanel is deactivated. Declaration public UnityEvent OnMessagePanelClosed Field Value Type Description UnityEvent Methods NextMessage() Activates the next message in the TirUtilities.UI.MessagePanel._messages list. Declaration public void NextMessage() Remarks If called when the final message is active, the TirUtilities.UI.MessagePanel._messagePanel is deactivated and OnMessagePanelClosed is invoked."
  },
  "api/TirUtilities.UI.TabButton.html": {
    "href": "api/TirUtilities.UI.TabButton.html",
    "title": "Class TabButton | TirUtilities",
    "keywords": "Class TabButton Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Contains all of the pointer event logic. Inheritance Object TabButton Implements IPointerEnterHandler IPointerClickHandler IPointerExitHandler Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class TabButton : MonoBehaviour, IPointerEnterHandler, IPointerClickHandler, IPointerExitHandler Fields onTabDeselected Declaration public UnityEvent onTabDeselected Field Value Type Description UnityEvent onTabSelected Declaration public UnityEvent onTabSelected Field Value Type Description UnityEvent Properties Background Declaration public Image Background { get; } Property Value Type Description Image Methods Deselect() Invokes onTabDeselected. Declaration public void Deselect() OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerEnter(PointerEventData) Declaration public void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerExit(PointerEventData) Declaration public void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Select() Invokes onTabSelected. Declaration public void Select() Implements IPointerEnterHandler IPointerClickHandler IPointerExitHandler"
  },
  "api/TirUtilities.UI.TabGroup.html": {
    "href": "api/TirUtilities.UI.TabGroup.html",
    "title": "Class TabGroup | TirUtilities",
    "keywords": "Class TabGroup Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Maintains all tabs in child objects. Inheritance Object TabGroup Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class TabGroup : MonoBehaviour Methods OnTabEnter(TabButton) Call when the mouse hovers over a tab. Declaration public void OnTabEnter(TabButton button) Parameters Type Name Description TabButton button OnTabExit() Call when a tab is deselected or the mouse leaves the tab. Declaration public void OnTabExit() OnTabSelected(TabButton) Call when a tab is selected. Declaration public void OnTabSelected(TabButton button) Parameters Type Name Description TabButton button ResetTabs() Call to reset all tabs to their default state. Declaration public void ResetTabs() Subscribe(TabButton) Adds a button the list of buttons managed by the tab group. Declaration public void Subscribe(TabButton button) Parameters Type Name Description TabButton button"
  },
  "api/TirUtilities.UI.UIBillboard.html": {
    "href": "api/TirUtilities.UI.UIBillboard.html",
    "title": "Class UIBillboard | TirUtilities",
    "keywords": "Class UIBillboard Turns the attached canvas to face the main camera and sets the text of the child TMP text component. Inheritance Object UIBillboard Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class UIBillboard : MonoBehaviour Properties Text Get and set the TirUtilities.UI.UIBillboard._text displayed on the billboard. Declaration public string Text { get; set; } Property Value Type Description String"
  },
  "api/TirUtilities.UI.UIMessageBox.html": {
    "href": "api/TirUtilities.UI.UIMessageBox.html",
    "title": "Class UIMessageBox | TirUtilities",
    "keywords": "Class UIMessageBox Inheritance Object UIMessageBox Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class UIMessageBox : MonoBehaviour Fields OnDissmissed Declaration public UnityEvent OnDissmissed Field Value Type Description UnityEvent"
  },
  "api/TirUtilities.UI.WorldSpaceMessageBox.html": {
    "href": "api/TirUtilities.UI.WorldSpaceMessageBox.html",
    "title": "Class WorldSpaceMessageBox | TirUtilities",
    "keywords": "Class WorldSpaceMessageBox A world space UI panel that holds TMP text and links to another message. Inheritance Object WorldSpaceMessageBox Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class WorldSpaceMessageBox : MonoBehaviour Fields OnMessageBoxDismissed Declaration public UnityEvent OnMessageBoxDismissed Field Value Type Description UnityEvent Properties IsFirstMessage Whether or not this is the first message in a chain. Declaration public bool IsFirstMessage { get; } Property Value Type Description Boolean Text The text stored in this message's TirUtilities.UI.WorldSpaceMessageBox._billboard . Declaration public string Text { get; } Property Value Type Description String Methods CreateMessageBox(String, GameObject) UNFINISHED Declaration public static WorldSpaceMessageBox CreateMessageBox(string text, GameObject nextMessage = null) Parameters Type Name Description String text GameObject nextMessage Returns Type Description WorldSpaceMessageBox"
  },
  "api/TirUtilities.Vector3Extensions.html": {
    "href": "api/TirUtilities.Vector3Extensions.html",
    "title": "Class Vector3Extensions | TirUtilities",
    "keywords": "Class Vector3Extensions Inheritance Object Vector3Extensions Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public static class Vector3Extensions Methods Invariant(Vector3) Declaration public static bool Invariant(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Boolean IsZero(Vector3) Declaration public static bool IsZero(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Boolean NotZero(Vector3) Declaration public static bool NotZero(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "TirUtilities | TirUtilities",
    "keywords": "TirUtilities Description This is a set of utilities that I use in all of my projects. Usage Open the Unity package found under releases. You may have to go to the assembly definition TirUtilities.Editor and exclude all platforms except the editor. Unity tends to lose the settings for assembly definitions when exporting a package for some reason."
  },
  "manual/CHANGELOG.html": {
    "href": "manual/CHANGELOG.html",
    "title": "Changelog | TirUtilities",
    "keywords": "Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Added: New features. Changed: Changes in existing functionality. Deprecated: Once-stable features removed in upcoming releases. Removed: Deprecated features removed in this release. Fixed: Any bug fixes. Security: Invite users to upgrade in case of vulnerabilities. [Unreleased] Added Mouse Utility now has layer mask option for some 2D methods. Changed Level System now fades the loading screen before the load operation starts. [0.0.0-alpha.5] — Next release"
  },
  "manual/level-data.html": {
    "href": "manual/level-data.html",
    "title": "| TirUtilities",
    "keywords": ""
  },
  "manual/level-system.html": {
    "href": "manual/level-system.html",
    "title": "Level System | TirUtilities",
    "keywords": "Level System This functions as a centralized system for loading scenes. Loading scenes is usually a simple process, but leads to a lot of code duplication. For example: // This behaviour would need to be attached to each object that // needs to will needs to start a scene transition. public class Loader : MonoBehaviour { [SerializeField] private string _activeSceneName; [SerializeField] private List<string> _additiveScenes = new List<string>(); // This will load the scenes asynchronously. public void LoadLevel() { SceneManager.LoadSceneAsync(_activeSceneName) .completed += LevelLoader__completed; OnLoadComplete?.Invoke(); } private static void LevelLoader__completed(AsyncOperation operation) { foreach (string scene in _additiveScenes) SceneManager.LoadSceneAsync(scene, LoadSceneMode.Additive); } } Maintaining these string references on multiple objects is cumbersome and error prone. The level system avoids this by isolating all of the logic from the scene references. A prefab with the level system attached can be found under Resources/Prefabs. This object will be moved to DontDestroyOnLoad on awake. Usage Component Setup The level system component should be placed on a game object that can be moved to DontDestroyOnLoad. The optional root level data will be loaded if required, then each level load signal will be assigned the receiver StartCoroutine(LevelLoader.LoadLevelDataAsync(levelData)) . As a result, level signals SHOULD NOT be emitted in awake or start to avoid race conditions. When the level system finishes loading a level it will emit the signal assigned to Load Complete Signal. Loading Levels In this system level consist of an active scene and a set of optional additive scenes. These are stored as a level data struct on a level load signal. When adding new levels to your game, you must first create a new level load signal in the resources folder as pictured below. Once the signal has bee created scenes can be assigned in the inspector. To load a level, simply emit its signal."
  },
  "manual/manual.html": {
    "href": "manual/manual.html",
    "title": "TirUtilities Manual | TirUtilities",
    "keywords": "TirUtilities Manual This is a set of generally useful scripts and assets that I use in most projects."
  },
  "manual/ROADMAP.html": {
    "href": "manual/ROADMAP.html",
    "title": "Roadmap | TirUtilities",
    "keywords": "Roadmap Last Updated: 07-08-2021 Key ⚪ Planned 🔵 Research 🟢 Active Work Features 🔵 Save System A system to create save files using Odin Serializer. 🟢 Application State Machine This will control the game's play/pause state as well as keeping track of what should happen when the is in a menu vs. when it is in the normal game."
  },
  "manual/signals.html": {
    "href": "manual/signals.html",
    "title": "Signals | TirUtilities",
    "keywords": "Signals These are scriptable objects that create a flexible event system. Each signal asset can be assigned in the inspector and referenced in code just like a normal Unity Event. For example:"
  }
}