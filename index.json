{
  "api/TirUtilities.Automation.AutoRotate.html": {
    "href": "api/TirUtilities.Automation.AutoRotate.html",
    "title": "Class AutoRotate | TirUtilities",
    "keywords": "Class AutoRotate Inheritance Object AutoRotate Namespace : TirUtilities.Automation Assembly : cs.temp.dll.dll Syntax public class AutoRotate : MonoBehaviour Methods ToggleRotation() Declaration public void ToggleRotation()"
  },
  "api/TirUtilities.Automation.html": {
    "href": "api/TirUtilities.Automation.html",
    "title": "Namespace TirUtilities.Automation | TirUtilities",
    "keywords": "Namespace TirUtilities.Automation Classes AutoRotate"
  },
  "api/TirUtilities.Controllers.CameraLookEvents.html": {
    "href": "api/TirUtilities.Controllers.CameraLookEvents.html",
    "title": "Class CameraLookEvents | TirUtilities",
    "keywords": "Class CameraLookEvents Used to inform event listeners and signal receivers what game object is in the center of the camera's view. Inheritance Object CameraLookEvents Namespace : TirUtilities.Controllers Assembly : cs.temp.dll.dll Syntax public class CameraLookEvents : MonoBehaviour Fields OnLookTargetChanged Declaration public GameObjectEvent OnLookTargetChanged Field Value Type Description GameObjectEvent"
  },
  "api/TirUtilities.Controllers.html": {
    "href": "api/TirUtilities.Controllers.html",
    "title": "Namespace TirUtilities.Controllers | TirUtilities",
    "keywords": "Namespace TirUtilities.Controllers Classes CameraLookEvents Used to inform event listeners and signal receivers what game object is in the center of the camera's view. MouseUtility Contains utility functions that make working with the mouse easier. ThirdPersonController"
  },
  "api/TirUtilities.Controllers.MouseUtility.html": {
    "href": "api/TirUtilities.Controllers.MouseUtility.html",
    "title": "Class MouseUtility | TirUtilities",
    "keywords": "Class MouseUtility Contains utility functions that make working with the mouse easier. Inheritance Object MouseUtility Namespace : TirUtilities.Controllers Assembly : cs.temp.dll.dll Syntax public sealed class MouseUtility Properties LeftMouseButtonDown Declaration public static bool LeftMouseButtonDown { get; } Property Value Type Description Boolean MiddleMouseButtonDown Declaration public static bool MiddleMouseButtonDown { get; } Property Value Type Description Boolean RightMouseButtonDown Declaration public static bool RightMouseButtonDown { get; } Property Value Type Description Boolean Methods GetGameObjectAtMousePosition() Finds the first game object under the mouse that has an attached collider. Declaration public static GameObject GetGameObjectAtMousePosition() Returns Type Description GameObject The game object found or null. GetGameObjectAtMousePosition(LayerMask) Finds the first game object with an attached collider on the target layers. Declaration public static GameObject GetGameObjectAtMousePosition(LayerMask targetLayers) Parameters Type Name Description LayerMask targetLayers Returns Type Description GameObject The game object found or null. MouseRaycast() Casts a ray from the camera returning true if it hits anything. Declaration public static bool MouseRaycast() Returns Type Description Boolean True if the ray hits a Collider. MouseRaycast(out RaycastHit, LayerMask, Single, QueryTriggerInteraction) Casts a ray from the camera returning true if it hits anything. Declaration public static bool MouseRaycast(out RaycastHit raycastHit, LayerMask targetLayers, float maxDistance = default(float), QueryTriggerInteraction queryTriggerInteraction = null) Parameters Type Name Description RaycastHit raycastHit LayerMask targetLayers Single maxDistance QueryTriggerInteraction queryTriggerInteraction Returns Type Description Boolean True if the ray hits a Collider. MouseRaycast(out RaycastHit, Single) Casts a ray from the camera returning true if it hits anything and assigns that hit to the out parameter. Declaration public static bool MouseRaycast(out RaycastHit raycastHit, float maxDistance = default(float)) Parameters Type Name Description RaycastHit raycastHit Single maxDistance Returns Type Description Boolean True if the ray hits a Collider. MouseRaycast2D() Casts a ray from the camera returning true if it hits anything. Declaration public static bool MouseRaycast2D() Returns Type Description Boolean True if the ray hits a Collider2D. MouseRaycast2D(out RaycastHit2D) Casts a ray from the camera returning true if it hits anything and assigns that hit to the out parameter. Declaration public static bool MouseRaycast2D(out RaycastHit2D raycastHit2D) Parameters Type Name Description RaycastHit2D raycastHit2D Returns Type Description Boolean True if the ray hits a Collider2D. TryGetGameObjectOnClick2D(out GameObject) Declaration public static bool TryGetGameObjectOnClick2D(out GameObject gameObject) Parameters Type Name Description GameObject gameObject Returns Type Description Boolean TryGetHoveredCollider2D(out Collider2D) Declaration public static bool TryGetHoveredCollider2D(out Collider2D collider) Parameters Type Name Description Collider2D collider Returns Type Description Boolean TryGetHoveredGameObject2D(out GameObject) Declaration public static bool TryGetHoveredGameObject2D(out GameObject gameObject) Parameters Type Name Description GameObject gameObject Returns Type Description Boolean TryGetObjectAtMousePosition(out GameObject, LayerMask) Assigns to selection the first game object with an attached collider that is on any of the target layers and under the mouse pointer. Assigns null to selection if no object was found. Declaration public static bool TryGetObjectAtMousePosition(out GameObject selection, LayerMask targetLayers) Parameters Type Name Description GameObject selection The selected object is assigned to this. LayerMask targetLayers The layers that the raycast can hit. Returns Type Description Boolean True if an object was found, otherwise false. TryGetWorldSpaceMousePosition(out Vector3) Attempts to get the world space position of the mouse cursor by casting a ray through the mouse's screen point. Declaration public static bool TryGetWorldSpaceMousePosition(out Vector3 point) Parameters Type Name Description Vector3 point The point the mouse is hovering over. Returns Type Description Boolean True if there are any colliders under the mouse. TryGetWorldSpaceMousePosition(out Vector3, LayerMask) Attempts to get the world space position of the mouse cursor by casting a ray through the mouse's screen point, and into the target layers. Declaration public static bool TryGetWorldSpaceMousePosition(out Vector3 point, LayerMask targetLayers) Parameters Type Name Description Vector3 point The point the mouse is hovering over. LayerMask targetLayers The layers that the ray can hit. Returns Type Description Boolean True if any of the colliders under the mouse are on the target layers. TryGetWorldSpaceMousePosition2D(out Vector3) Gets the position of a 2D ray-cast hit. Declaration public static bool TryGetWorldSpaceMousePosition2D(out Vector3 point) Parameters Type Name Description Vector3 point Returns Type Description Boolean True if something was hit, otherwise false."
  },
  "api/TirUtilities.Controllers.ThirdPersonController.html": {
    "href": "api/TirUtilities.Controllers.ThirdPersonController.html",
    "title": "Class ThirdPersonController | TirUtilities",
    "keywords": "Class ThirdPersonController Inheritance Object ThirdPersonController Namespace : TirUtilities.Controllers Assembly : cs.temp.dll.dll Syntax public class ThirdPersonController : MonoBehaviour Methods Jump() Declaration public void Jump() SetMoveDirection(Vector2) Declaration public void SetMoveDirection(Vector2 direction) Parameters Type Name Description Vector2 direction"
  },
  "api/TirUtilities.CustomEvents.BoolEvent.html": {
    "href": "api/TirUtilities.CustomEvents.BoolEvent.html",
    "title": "Class BoolEvent | TirUtilities",
    "keywords": "Class BoolEvent Passes a bool and a GameObject to its listeners. Inheritance Object BoolEvent Namespace : TirUtilities.CustomEvents Assembly : cs.temp.dll.dll Syntax [Serializable] public class BoolEvent : UnityEvent<bool, GameObject>"
  },
  "api/TirUtilities.CustomEvents.GameObjectEvent.html": {
    "href": "api/TirUtilities.CustomEvents.GameObjectEvent.html",
    "title": "Class GameObjectEvent | TirUtilities",
    "keywords": "Class GameObjectEvent A Unity Event that passes a game object to its listeners. Inheritance Object GameObjectEvent Namespace : TirUtilities.CustomEvents Assembly : cs.temp.dll.dll Syntax public class GameObjectEvent : UnityEvent<GameObject>"
  },
  "api/TirUtilities.CustomEvents.html": {
    "href": "api/TirUtilities.CustomEvents.html",
    "title": "Namespace TirUtilities.CustomEvents | TirUtilities",
    "keywords": "Namespace TirUtilities.CustomEvents Classes BoolEvent Passes a bool and a GameObject to its listeners. GameObjectEvent A Unity Event that passes a game object to its listeners."
  },
  "api/TirUtilities.CustomGizmos.DrawBoxGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawBoxGizmo.html",
    "title": "Class DrawBoxGizmo | TirUtilities",
    "keywords": "Class DrawBoxGizmo Draws a box around a box collider. Inheritance Object DrawBoxGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawBoxGizmo : MonoBehaviour"
  },
  "api/TirUtilities.CustomGizmos.DrawCameraGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawCameraGizmo.html",
    "title": "Class DrawCameraGizmo | TirUtilities",
    "keywords": "Class DrawCameraGizmo Inheritance Object DrawCameraGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawCameraGizmo : MonoBehaviour"
  },
  "api/TirUtilities.CustomGizmos.DrawColliderGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawColliderGizmo.html",
    "title": "Class DrawColliderGizmo | TirUtilities",
    "keywords": "Class DrawColliderGizmo Draws a gizmo for the given collider. Inheritance Object DrawColliderGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawColliderGizmo : MonoBehaviour Remarks Supported colliders: Only wire gizmo."
  },
  "api/TirUtilities.CustomGizmos.DrawForwardGizmo.html": {
    "href": "api/TirUtilities.CustomGizmos.DrawForwardGizmo.html",
    "title": "Class DrawForwardGizmo | TirUtilities",
    "keywords": "Class DrawForwardGizmo Inheritance Object DrawForwardGizmo Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public class DrawForwardGizmo : MonoBehaviour"
  },
  "api/TirUtilities.CustomGizmos.html": {
    "href": "api/TirUtilities.CustomGizmos.html",
    "title": "Namespace TirUtilities.CustomGizmos | TirUtilities",
    "keywords": "Namespace TirUtilities.CustomGizmos Classes DrawBoxGizmo Draws a box around a box collider. DrawCameraGizmo DrawColliderGizmo Draws a gizmo for the given collider. DrawForwardGizmo TirGizmos A collection of gizmos that function like those from UnityEngine.Gizmos."
  },
  "api/TirUtilities.CustomGizmos.TirGizmos.html": {
    "href": "api/TirUtilities.CustomGizmos.TirGizmos.html",
    "title": "Class TirGizmos | TirUtilities",
    "keywords": "Class TirGizmos A collection of gizmos that function like those from UnityEngine.Gizmos. Inheritance Object TirGizmos Namespace : TirUtilities.CustomGizmos Assembly : cs.temp.dll.dll Syntax public static class TirGizmos Methods DrawWireCapsule(CapsuleCollider, Single) Draws a wire gizmo in the shape of the provided capsule collider. Declaration public static void DrawWireCapsule(CapsuleCollider capsuleCollider, float sizeScaler = 1F) Parameters Type Name Description CapsuleCollider capsuleCollider Single sizeScaler Remarks Semialgebraic Description"
  },
  "api/TirUtilities.Detection.html": {
    "href": "api/TirUtilities.Detection.html",
    "title": "Namespace TirUtilities.Detection | TirUtilities",
    "keywords": "Namespace TirUtilities.Detection Classes TriggerVolume Checks if the object that enter's its collider is on a layer in the layer mask. If it was, TirUtilities.Detection.TriggerVolume.OnEnterVolume is invoked."
  },
  "api/TirUtilities.Detection.TriggerVolume.html": {
    "href": "api/TirUtilities.Detection.TriggerVolume.html",
    "title": "Class TriggerVolume | TirUtilities",
    "keywords": "Class TriggerVolume Checks if the object that enter's its collider is on a layer in the layer mask. If it was, TirUtilities.Detection.TriggerVolume.OnEnterVolume is invoked. Inheritance Object TriggerVolume Namespace : TirUtilities.Detection Assembly : cs.temp.dll.dll Syntax public class TriggerVolume : MonoBehaviour"
  },
  "api/TirUtilities.DisplayOnlyAttribute.html": {
    "href": "api/TirUtilities.DisplayOnlyAttribute.html",
    "title": "Class DisplayOnlyAttribute | TirUtilities",
    "keywords": "Class DisplayOnlyAttribute The tagged field is be displayed in the inspector, but cannot be edited. Inheritance Object DisplayOnlyAttribute Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public class DisplayOnlyAttribute : PropertyAttribute Remarks Property drawer: TirUtilities/Editor/PropertyDrawers/DisplayOnlyDrawer.cs"
  },
  "api/TirUtilities.Editor.Experimental.html": {
    "href": "api/TirUtilities.Editor.Experimental.html",
    "title": "Namespace TirUtilities.Editor.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.Experimental Classes MenuStateMachineInspector"
  },
  "api/TirUtilities.Editor.Experimental.MenuStateMachineInspector.html": {
    "href": "api/TirUtilities.Editor.Experimental.MenuStateMachineInspector.html",
    "title": "Class MenuStateMachineInspector | TirUtilities",
    "keywords": "Class MenuStateMachineInspector Inheritance Object MenuStateMachineInspector Namespace : TirUtilities.Editor.Experimental Assembly : cs.temp.dll.dll Syntax public class MenuStateMachineInspector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TirUtilities.Editor.FlexGridInpector.html": {
    "href": "api/TirUtilities.Editor.FlexGridInpector.html",
    "title": "Class FlexGridInpector | TirUtilities",
    "keywords": "Class FlexGridInpector Draws the inspector for FlexibleGridLayoutGroup . Inheritance Object FlexGridInpector Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public class FlexGridInpector : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/TirUtilities.Editor.html": {
    "href": "api/TirUtilities.Editor.html",
    "title": "Namespace TirUtilities.Editor | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor Classes FlexGridInpector Draws the inspector for FlexibleGridLayoutGroup . MenuPageContextMenu Context menu to create new Menu Pages int he hierarchy. Structs ProjectEditorPaths Paths to important locations used by editor scripts."
  },
  "api/TirUtilities.Editor.MenuPageContextMenu.html": {
    "href": "api/TirUtilities.Editor.MenuPageContextMenu.html",
    "title": "Class MenuPageContextMenu | TirUtilities",
    "keywords": "Class MenuPageContextMenu Context menu to create new Menu Pages int he hierarchy. Inheritance Object MenuPageContextMenu Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public class MenuPageContextMenu : UEditor"
  },
  "api/TirUtilities.Editor.ProjectEditorPaths.html": {
    "href": "api/TirUtilities.Editor.ProjectEditorPaths.html",
    "title": "Struct ProjectEditorPaths | TirUtilities",
    "keywords": "Struct ProjectEditorPaths Paths to important locations used by editor scripts. Namespace : TirUtilities.Editor Assembly : cs.temp.dll.dll Syntax public ref readonly struct ProjectEditorPaths Properties PathToHierarchyDividerSettings Declaration public static readonly string PathToHierarchyDividerSettings { get; } Property Value Type Description String PathToMenuPagePrefab Declaration public static readonly string PathToMenuPagePrefab { get; } Property Value Type Description String"
  },
  "api/TirUtilities.Editor.PropertyDrawers.DisplayOnlyDrawer.html": {
    "href": "api/TirUtilities.Editor.PropertyDrawers.DisplayOnlyDrawer.html",
    "title": "Class DisplayOnlyDrawer | TirUtilities",
    "keywords": "Class DisplayOnlyDrawer Draws the DisplayOnlyAttribute . Inheritance Object DisplayOnlyDrawer Namespace : TirUtilities.Editor.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class DisplayOnlyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/TirUtilities.Editor.PropertyDrawers.html": {
    "href": "api/TirUtilities.Editor.PropertyDrawers.html",
    "title": "Namespace TirUtilities.Editor.PropertyDrawers | TirUtilities",
    "keywords": "Namespace TirUtilities.Editor.PropertyDrawers Classes DisplayOnlyDrawer Draws the DisplayOnlyAttribute . ScenePathDrawer Converts a string field to a UnityEditor.SceneAsset in the inspector."
  },
  "api/TirUtilities.Editor.PropertyDrawers.ScenePathDrawer.html": {
    "href": "api/TirUtilities.Editor.PropertyDrawers.ScenePathDrawer.html",
    "title": "Class ScenePathDrawer | TirUtilities",
    "keywords": "Class ScenePathDrawer Converts a string field to a UnityEditor.SceneAsset in the inspector. Inheritance Object ScenePathDrawer Namespace : TirUtilities.Editor.PropertyDrawers Assembly : cs.temp.dll.dll Syntax public class ScenePathDrawer : PropertyDrawer Remarks Based on SceneDrawer.cs from Mirror. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/TirUtilities.Experimental.ApplicationState.html": {
    "href": "api/TirUtilities.Experimental.ApplicationState.html",
    "title": "Class ApplicationState | TirUtilities",
    "keywords": "Class ApplicationState Inheritance Object ApplicationState PausedState PlayingState QuittingState Implements IState < ApplicationStateMachine > Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class ApplicationState : ScriptableObject, IState<ApplicationStateMachine> Fields _description The description of what this state is intended to be used for. Declaration protected string _description Field Value Type Description String Properties Description The description of what this state is intended to be used for. Declaration public string Description { get; } Property Value Type Description String PausedTimeScale Declaration protected static float PausedTimeScale { get; } Property Value Type Description Single PlayingTimeScale Declaration protected static float PlayingTimeScale { get; } Property Value Type Description Single Methods EnterState(ApplicationStateMachine) Declaration public virtual void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine ExitState(ApplicationStateMachine) Declaration public virtual void ExitState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine UpdateState(ApplicationStateMachine) Declaration public virtual void UpdateState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Implements IState<T>"
  },
  "api/TirUtilities.Experimental.ApplicationStateMachine.html": {
    "href": "api/TirUtilities.Experimental.ApplicationStateMachine.html",
    "title": "Class ApplicationStateMachine | TirUtilities",
    "keywords": "Class ApplicationStateMachine Inheritance Object StateMachine ApplicationStateMachine Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class ApplicationStateMachine : StateMachine Properties CurrentState Declaration public ApplicationState CurrentState { get; set; } Property Value Type Description ApplicationState Methods TogglePaused() Declaration public static void TogglePaused()"
  },
  "api/TirUtilities.Experimental.Command.html": {
    "href": "api/TirUtilities.Experimental.Command.html",
    "title": "Class Command | TirUtilities",
    "keywords": "Class Command Inheritance Object Command Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public abstract class Command Methods Execute() Declaration public abstract void Execute() Undo() Declaration public abstract void Undo()"
  },
  "api/TirUtilities.Experimental.html": {
    "href": "api/TirUtilities.Experimental.html",
    "title": "Namespace TirUtilities.Experimental | TirUtilities",
    "keywords": "Namespace TirUtilities.Experimental Classes ApplicationState ApplicationStateMachine Command PausedState PlayingState QuittingState Singleton This is intended only as an example. DO NOT USE!!! State StateAction"
  },
  "api/TirUtilities.Experimental.PausedState.html": {
    "href": "api/TirUtilities.Experimental.PausedState.html",
    "title": "Class PausedState | TirUtilities",
    "keywords": "Class PausedState Inheritance Object ApplicationState PausedState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class PausedState : ApplicationState, IState<ApplicationStateMachine> Methods EnterState(ApplicationStateMachine) Declaration public override void EnterState(ApplicationStateMachine stateMachine) Parameters Type Name Description ApplicationStateMachine stateMachine Overrides ApplicationState.EnterState(ApplicationStateMachine) Implements IState<T>"
  },
  "api/TirUtilities.Experimental.PlayingState.html": {
    "href": "api/TirUtilities.Experimental.PlayingState.html",
    "title": "Class PlayingState | TirUtilities",
    "keywords": "Class PlayingState Inheritance Object ApplicationState PlayingState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.EnterState(ApplicationStateMachine) ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class PlayingState : ApplicationState, IState<ApplicationStateMachine> Implements IState<T>"
  },
  "api/TirUtilities.Experimental.QuittingState.html": {
    "href": "api/TirUtilities.Experimental.QuittingState.html",
    "title": "Class QuittingState | TirUtilities",
    "keywords": "Class QuittingState Inheritance Object ApplicationState QuittingState Implements IState < ApplicationStateMachine > Inherited Members ApplicationState._description ApplicationState.Description ApplicationState.PausedTimeScale ApplicationState.PlayingTimeScale ApplicationState.EnterState(ApplicationStateMachine) ApplicationState.ExitState(ApplicationStateMachine) ApplicationState.UpdateState(ApplicationStateMachine) Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class QuittingState : ApplicationState, IState<ApplicationStateMachine> Implements IState<T>"
  },
  "api/TirUtilities.Experimental.Singleton.html": {
    "href": "api/TirUtilities.Experimental.Singleton.html",
    "title": "Class Singleton | TirUtilities",
    "keywords": "Class Singleton This is intended only as an example. DO NOT USE!!! Inheritance Object Singleton Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public sealed class Singleton Properties Exists Declaration public static bool Exists { get; } Property Value Type Description Boolean Instance Declaration public static Singleton Instance { get; } Property Value Type Description Singleton"
  },
  "api/TirUtilities.Experimental.State.html": {
    "href": "api/TirUtilities.Experimental.State.html",
    "title": "Class State | TirUtilities",
    "keywords": "Class State Inheritance Object State Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public abstract class State : ScriptableObject Methods EnterState(StateMachine) Declaration public abstract void EnterState(StateMachine stateMachine) Parameters Type Name Description StateMachine stateMachine ExitState(StateMachine) Declaration public abstract void ExitState(StateMachine stateMachine) Parameters Type Name Description StateMachine stateMachine ExitState(StateMachine, out State) Declaration public abstract void ExitState(StateMachine stateMachine, out State nextState) Parameters Type Name Description StateMachine stateMachine State nextState UpdateState(StateMachine) Declaration public abstract void UpdateState(StateMachine stateMachine) Parameters Type Name Description StateMachine stateMachine"
  },
  "api/TirUtilities.Experimental.StateAction.html": {
    "href": "api/TirUtilities.Experimental.StateAction.html",
    "title": "Class StateAction | TirUtilities",
    "keywords": "Class StateAction Inheritance Object StateAction Namespace : TirUtilities.Experimental Assembly : cs.temp.dll.dll Syntax public class StateAction : ScriptableObject"
  },
  "api/TirUtilities.Extensions.ColorExtensions.html": {
    "href": "api/TirUtilities.Extensions.ColorExtensions.html",
    "title": "Class ColorExtensions | TirUtilities",
    "keywords": "Class ColorExtensions Inheritance Object ColorExtensions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class ColorExtensions Methods SetRandColor(Color, Single) Declaration public static void SetRandColor(this Color color, float alpha = 1F) Parameters Type Name Description Color color Single alpha"
  },
  "api/TirUtilities.Extensions.EventExtension.html": {
    "href": "api/TirUtilities.Extensions.EventExtension.html",
    "title": "Class EventExtension | TirUtilities",
    "keywords": "Class EventExtension A set of extension methods for UnityActions and UnityEvents. Inheritance Object EventExtension Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class EventExtension Methods IsNull(UnityAction) Shorthand for a action == null . Declaration public static bool IsNull(this UnityAction action) Parameters Type Name Description UnityAction action Returns Type Description Boolean The result of action == null IsNull(UnityEvent) Shorthand for a unityEvent == null . Declaration public static bool IsNull(this UnityEvent unityEvent) Parameters Type Name Description UnityEvent unityEvent This event. Returns Type Description Boolean The result of unityEvent == null IsNull<T0>(UnityAction<T0>) Shorthand for a action == null . Declaration public static bool IsNull<T0>(this UnityAction<T0> action) Parameters Type Name Description UnityAction <T0> action Returns Type Description Boolean The result of action == null Type Parameters Name Description T0 IsNull<T0>(UnityEvent<T0>) Shorthand for a unityEvent == null . Declaration public static bool IsNull<T0>(this UnityEvent<T0> unityEvent) Parameters Type Name Description UnityEvent <T0> unityEvent This event. Returns Type Description Boolean The result of unityEvent == null Type Parameters Name Description T0 NotNull(UnityAction) Shorthand for a action != null . Declaration public static bool NotNull(this UnityAction action) Parameters Type Name Description UnityAction action Returns Type Description Boolean The result of action != null NotNull(UnityEvent) Shorthand for a unityEvent != null . Declaration public static bool NotNull(this UnityEvent unityEvent) Parameters Type Name Description UnityEvent unityEvent This event. Returns Type Description Boolean The result of unityEvent != null NotNull<T0>(UnityAction<T0>) Shorthand for a action != null . Declaration public static bool NotNull<T0>(this UnityAction<T0> action) Parameters Type Name Description UnityAction <T0> action Returns Type Description Boolean The result of action != null Type Parameters Name Description T0 NotNull<T0>(UnityEvent<T0>) Shorthand for a unityEvent != null . Declaration public static bool NotNull<T0>(this UnityEvent<T0> unityEvent) Parameters Type Name Description UnityEvent <T0> unityEvent This event. Returns Type Description Boolean The result of unityEvent != null Type Parameters Name Description T0 SafeInvoke(UnityAction) Invokes the action if it has listeners. Declaration public static bool SafeInvoke(this UnityAction action) Parameters Type Name Description UnityAction action This event. Returns Type Description Boolean True if the invocation was successful, otherwise false. SafeInvoke(UnityEvent) Invokes the event if it has listeners. Declaration public static bool SafeInvoke(this UnityEvent unityEvent) Parameters Type Name Description UnityEvent unityEvent This event. Returns Type Description Boolean True if the invocation was successful, otherwise false. SafeInvoke<T0>(UnityAction<T0>, T0) Invokes the action if it has listeners. Declaration public static bool SafeInvoke<T0>(this UnityAction<T0> action, T0 target0) Parameters Type Name Description UnityAction <T0> action This action T0 target0 Parameter 0 Returns Type Description Boolean True if the invocation was successful, otherwise false. Type Parameters Name Description T0 The type of the action's parameter. SafeInvoke<T0>(UnityEvent<T0>, T0) Invokes the event if it has listeners. Declaration public static bool SafeInvoke<T0>(this UnityEvent<T0> unityEvent, T0 target) Parameters Type Name Description UnityEvent <T0> unityEvent This event. T0 target The target to be passed to listeners. Returns Type Description Boolean True if the invocation was successful, otherwise false. Type Parameters Name Description T0"
  },
  "api/TirUtilities.Extensions.html": {
    "href": "api/TirUtilities.Extensions.html",
    "title": "Namespace TirUtilities.Extensions | TirUtilities",
    "keywords": "Namespace TirUtilities.Extensions Classes ColorExtensions EventExtension A set of extension methods for UnityActions and UnityEvents. ListExtensions A set of extensions to generic lists. ObjectExstentions A set of extensions to UnityEngine.Object. RigidbodyExtensions Extension methods for Unity rigidbodies."
  },
  "api/TirUtilities.Extensions.ListExtensions.html": {
    "href": "api/TirUtilities.Extensions.ListExtensions.html",
    "title": "Class ListExtensions | TirUtilities",
    "keywords": "Class ListExtensions A set of extensions to generic lists. Inheritance Object ListExtensions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class ListExtensions Methods IndexInRange<T>(List<T>, Int32) Test whether a given int index is in the range [0, list.Count). Declaration public static bool IndexInRange<T>(this List<T> list, int i) Parameters Type Name Description List <T> list Int32 i The index to be tested. Returns Type Description Boolean True if index i is in the range [0, list.Count). Type Parameters Name Description T IsEmpty<T>(List<T>) Shorthand for list.Count == 0; Declaration public static bool IsEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list is empty. Type Parameters Name Description T IsNull<T>(List<T>) Shorthand for list.Equals(null); . Declaration public static bool IsNull<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list is null. Type Parameters Name Description T IsNullOrEmpty<T>(List<T>) Shorthand for list.IsNull() || list.IsEmpty(); Declaration public static bool IsNullOrEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list contains no items or is null. Type Parameters Name Description T NotEmpty<T>(List<T>) Shorthand for list.Count > 0; Declaration public static bool NotEmpty<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list contains an number of items Type Parameters Name Description T NotNull<T>(List<T>) Shorthand for !list.Equals(null); Declaration public static bool NotNull<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description Boolean True if the list is not null. Type Parameters Name Description T"
  },
  "api/TirUtilities.Extensions.ObjectExstentions.html": {
    "href": "api/TirUtilities.Extensions.ObjectExstentions.html",
    "title": "Class ObjectExstentions | TirUtilities",
    "keywords": "Class ObjectExstentions A set of extensions to UnityEngine.Object. Inheritance Object ObjectExstentions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class ObjectExstentions Methods IsNull(Object) Declaration public static bool IsNull(this Object self) Parameters Type Name Description Object self Returns Type Description Boolean NotNull(Object) Declaration public static bool NotNull(this Object self) Parameters Type Name Description Object self Returns Type Description Boolean"
  },
  "api/TirUtilities.Extensions.RigidbodyExtensions.html": {
    "href": "api/TirUtilities.Extensions.RigidbodyExtensions.html",
    "title": "Class RigidbodyExtensions | TirUtilities",
    "keywords": "Class RigidbodyExtensions Extension methods for Unity rigidbodies. Inheritance Object RigidbodyExtensions Namespace : TirUtilities.Extensions Assembly : cs.temp.dll.dll Syntax public static class RigidbodyExtensions Methods CancelAllVelocity(Rigidbody) Set velocity and angular velocity to zero. Declaration public static void CancelAllVelocity(this Rigidbody rigidbody) Parameters Type Name Description Rigidbody rigidbody This rigidbody."
  },
  "api/TirUtilities.External.OdinSerializer.AllowDeserializeInvalidDataAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.AllowDeserializeInvalidDataAttribute.html",
    "title": "Class AllowDeserializeInvalidDataAttribute | TirUtilities",
    "keywords": "Class AllowDeserializeInvalidDataAttribute Applying this attribute to a type indicates that in the case where, when expecting to deserialize an instance of the type or any of its derived types, but encountering an incompatible, uncastable type in the data being read, the serializer should attempt to deserialize an instance of the expected type using the stored, possibly invalid data. This is equivalent to the AllowDeserializeInvalidData option, expect type-specific instead of global. Inheritance Object Attribute AllowDeserializeInvalidDataAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = true)] public class AllowDeserializeInvalidDataAttribute : Attribute, _Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.AlwaysFormatsSelfAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.AlwaysFormatsSelfAttribute.html",
    "title": "Class AlwaysFormatsSelfAttribute | TirUtilities",
    "keywords": "Class AlwaysFormatsSelfAttribute Use this attribute to specify that a type that implements the ISelfFormatter interface should always format itself regardless of other formatters being specified. This means that the interface will be used to format all types derived from the type that is decorated with this attribute, regardless of custom formatters for the derived types. Inheritance Object Attribute AlwaysFormatsSelfAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = false, Inherited = true)] public sealed class AlwaysFormatsSelfAttribute : Attribute, _Attribute See Also Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.AnimationCurveFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.AnimationCurveFormatter.html",
    "title": "Class AnimationCurveFormatter | TirUtilities",
    "keywords": "Class AnimationCurveFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < AnimationCurve > AnimationCurveFormatter Implements IFormatter < AnimationCurve > IFormatter Inherited Members MinimalBaseFormatter<AnimationCurve>.IsValueType MinimalBaseFormatter<AnimationCurve>.SerializedType MinimalBaseFormatter<AnimationCurve>.Deserialize(IDataReader) MinimalBaseFormatter<AnimationCurve>.Serialize(AnimationCurve, IDataWriter) MinimalBaseFormatter<AnimationCurve>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<AnimationCurve>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<AnimationCurve>.RegisterReferenceID(AnimationCurve, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class AnimationCurveFormatter : MinimalBaseFormatter<AnimationCurve>, IFormatter<AnimationCurve>, IFormatter Methods GetUninitializedObject() Returns null. Declaration protected override AnimationCurve GetUninitializedObject() Returns Type Description AnimationCurve A null value. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<AnimationCurve>.GetUninitializedObject() Read(ref AnimationCurve, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref AnimationCurve value, IDataReader reader) Parameters Type Name Description AnimationCurve value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<AnimationCurve>.Read(AnimationCurve, TirUtilities.External.OdinSerializer.IDataReader) Write(ref AnimationCurve, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref AnimationCurve value, IDataWriter writer) Parameters Type Name Description AnimationCurve value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<AnimationCurve>.Write(AnimationCurve, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ArchitectureInfo.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ArchitectureInfo.html",
    "title": "Class ArchitectureInfo | TirUtilities",
    "keywords": "Class ArchitectureInfo This class gathers info about the current architecture for the purpose of determinining the unaligned read/write capabilities that we have to work with. Inheritance Object ArchitectureInfo Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class ArchitectureInfo Fields Architecture_Supports_All_Unaligned_ReadWrites This will be false on some ARM architectures, such as ARMv7. In these cases, we will have to perform slower but safer int-by-int read/writes of data. Since this value will never change at runtime, performance hits from checking this everywhere should hopefully be negligible, since branch prediction from speculative execution will always predict it correctly. Declaration public static bool Architecture_Supports_All_Unaligned_ReadWrites Field Value Type Description Boolean Architecture_Supports_Unaligned_Float32_Reads Declaration public static bool Architecture_Supports_Unaligned_Float32_Reads Field Value Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.ArrayFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ArrayFormatter-1.html",
    "title": "Class ArrayFormatter<T> | TirUtilities",
    "keywords": "Class ArrayFormatter<T> Formatter for all non-primitive one-dimensional arrays. Inheritance Object BaseFormatter <T[]> ArrayFormatter<T> Implements IFormatter <T[]> IFormatter Inherited Members BaseFormatter<T[]>.OnSerializingCallbacks BaseFormatter<T[]>.OnSerializedCallbacks BaseFormatter<T[]>.OnDeserializingCallbacks BaseFormatter<T[]>.OnDeserializedCallbacks BaseFormatter<T[]>.IsValueType BaseFormatter<T[]>.ImplementsISerializationCallbackReceiver BaseFormatter<T[]>.ImplementsIDeserializationCallback BaseFormatter<T[]>.ImplementsIObjectReference BaseFormatter<T[]>.SerializedType BaseFormatter<T[]>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T[]>.IFormatter.Deserialize(IDataReader) BaseFormatter<T[]>.Deserialize(IDataReader) BaseFormatter<T[]>.Serialize(T[], IDataWriter) BaseFormatter<T[]>.GetUninitializedObject() BaseFormatter<T[]>.RegisterReferenceID(T[], IDataReader) BaseFormatter<T[]>.InvokeOnDeserializingCallbacks(T[], DeserializationContext) BaseFormatter<T[]>.InvokeOnDeserializingCallbacks(T[], DeserializationContext) BaseFormatter<T[]>.DeserializeImplementation(T[], IDataReader) BaseFormatter<T[]>.SerializeImplementation(T[], IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class ArrayFormatter<T> : BaseFormatter<T[]>, IFormatter<T[]>, IFormatter Type Parameters Name Description T The element type of the formatted array. Methods DeserializeImplementation(ref T[], IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref T[] value, IDataReader reader) Parameters Type Name Description T[] value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T[]>.DeserializeImplementation(T[], TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override T[] GetUninitializedObject() Returns Type Description T[] A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T[]>.GetUninitializedObject() SerializeImplementation(ref T[], IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref T[] value, IDataWriter writer) Parameters Type Name Description T[] value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T[]>.SerializeImplementation(T[], TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ArrayListFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ArrayListFormatter.html",
    "title": "Class ArrayListFormatter | TirUtilities",
    "keywords": "Class ArrayListFormatter Custom formatter for the type ArrayList . Inheritance Object BaseFormatter < ArrayList > ArrayListFormatter Implements IFormatter < ArrayList > IFormatter Inherited Members BaseFormatter<ArrayList>.OnSerializingCallbacks BaseFormatter<ArrayList>.OnSerializedCallbacks BaseFormatter<ArrayList>.OnDeserializingCallbacks BaseFormatter<ArrayList>.OnDeserializedCallbacks BaseFormatter<ArrayList>.IsValueType BaseFormatter<ArrayList>.ImplementsISerializationCallbackReceiver BaseFormatter<ArrayList>.ImplementsIDeserializationCallback BaseFormatter<ArrayList>.ImplementsIObjectReference BaseFormatter<ArrayList>.SerializedType BaseFormatter<ArrayList>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<ArrayList>.IFormatter.Deserialize(IDataReader) BaseFormatter<ArrayList>.Deserialize(IDataReader) BaseFormatter<ArrayList>.Serialize(ArrayList, IDataWriter) BaseFormatter<ArrayList>.RegisterReferenceID(ArrayList, IDataReader) BaseFormatter<ArrayList>.InvokeOnDeserializingCallbacks(ArrayList, DeserializationContext) BaseFormatter<ArrayList>.InvokeOnDeserializingCallbacks(ArrayList, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class ArrayListFormatter : BaseFormatter<ArrayList>, IFormatter<ArrayList>, IFormatter Methods DeserializeImplementation(ref ArrayList, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref ArrayList value, IDataReader reader) Parameters Type Name Description ArrayList value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.ArrayList>.DeserializeImplementation(System.Collections.ArrayList, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override ArrayList GetUninitializedObject() Returns Type Description ArrayList A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.ArrayList>.GetUninitializedObject() SerializeImplementation(ref ArrayList, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref ArrayList value, IDataWriter writer) Parameters Type Name Description ArrayList value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.ArrayList>.SerializeImplementation(System.Collections.ArrayList, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.BaseDataReader.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BaseDataReader.html",
    "title": "Class BaseDataReader | TirUtilities",
    "keywords": "Class BaseDataReader Provides basic functionality and overridable abstract methods for implementing a data reader. If you inherit this class, it is VERY IMPORTANT that you implement each abstract method to the exact specifications the documentation specifies. Inheritance Object BaseDataReaderWriter BaseDataReader BinaryDataReader JsonDataReader SerializationNodeDataReader Implements IDataReader Inherited Members BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class BaseDataReader : BaseDataReaderWriter, IDataReader, IDisposable Constructors BaseDataReader(Stream, DeserializationContext) Initializes a new instance of the BaseDataReader class. Declaration protected BaseDataReader(Stream stream, DeserializationContext context) Parameters Type Name Description Stream stream The base stream of the reader. DeserializationContext context The deserialization context to use. Exceptions Type Condition ArgumentNullException The stream or context is null. ArgumentException Cannot read from stream. Properties Context Gets the deserialization context. Declaration public DeserializationContext Context { get; set; } Property Value Type Description DeserializationContext The deserialization context. CurrentNodeDepth Gets the current node depth. In other words, the current count of the node stack. Declaration public int CurrentNodeDepth { get; } Property Value Type Description Int32 The current node depth. CurrentNodeId Gets the current node id. If this is less than zero, the current node has no id. Declaration public int CurrentNodeId { get; } Property Value Type Description Int32 The current node id. CurrentNodeName Gets the name of the current node. Declaration public string CurrentNodeName { get; } Property Value Type Description String The name of the current node. Stream Gets or sets the base stream of the reader. Declaration public virtual Stream Stream { get; set; } Property Value Type Description Stream The base stream of the reader. Exceptions Type Condition ArgumentNullException value ArgumentException Cannot read from stream Methods Dispose() Disposes all resources and streams kept by the data reader. Declaration public abstract void Dispose() EnterArray(out Int64) Tries to enters an array node. This will succeed if the next entry is an StartOfArray . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current array node. Declaration public abstract bool EnterArray(out long length) Parameters Type Name Description Int64 length The length of the array that was entered. Returns Type Description Boolean true if an array was entered, otherwise false EnterNode(out Type) Tries to enter a node. This will succeed if the next entry is an StartOfNode . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current node. Declaration public abstract bool EnterNode(out Type type) Parameters Type Name Description Type type The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name. Returns Type Description Boolean true if entering a node succeeded, otherwise false ExitArray() Exits the closest array. This method will keep skipping entries using until an EndOfArray is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterArray(out Int64) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the exited array node. Declaration public abstract bool ExitArray() Returns Type Description Boolean true if the method exited an array, false if it reached the end of the stream. ExitNode() Exits the current node. This method will keep skipping entries using until an EndOfNode is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterNode(out Type) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the current node. Declaration public abstract bool ExitNode() Returns Type Description Boolean true if the method exited a node, false if it reached the end of the stream. GetDataDump() Gets a dump of the data being read by the writer. The format of this dump varies, but should be useful for debugging purposes. Declaration public abstract string GetDataDump() Returns Type Description String PeekEntry() Peeks the current entry. Declaration protected abstract EntryType PeekEntry() Returns Type Description EntryType The peeked entry. PeekEntry(out String) Peeks ahead and returns the type of the next entry in the stream. Declaration public abstract EntryType PeekEntry(out string name) Parameters Type Name Description String name The name of the next entry, if it has one. Returns Type Description EntryType The type of the next entry. PrepareNewSerializationSession() Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same reader is used to deserialize several different, unrelated values. Declaration public virtual void PrepareNewSerializationSession() ReadBoolean(out Boolean) Reads a Boolean value. This call will succeed if the next entry is an Boolean . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadBoolean(out bool value) Parameters Type Name Description Boolean value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadByte(out Byte) Reads a Byte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Byte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadByte(out byte value) Parameters Type Name Description Byte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadChar(out Char) Reads a Char value. This call will succeed if the next entry is an String . If the string of the entry is longer than 1 character, the first character of the string will be taken as the result. If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadChar(out char value) Parameters Type Name Description Char value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadDecimal(out Decimal) Reads a Decimal value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Decimal ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadDecimal(out decimal value) Parameters Type Name Description Decimal value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadDouble(out Double) Reads a Double value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Double ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadDouble(out double value) Parameters Type Name Description Double value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadExternalReference(out Guid) Reads an external reference guid. This call will succeed if the next entry is an ExternalReferenceByGuid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadExternalReference(out Guid guid) Parameters Type Name Description Guid guid The external reference guid. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadExternalReference(out Int32) Reads an external reference index. This call will succeed if the next entry is an ExternalReferenceByIndex . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadExternalReference(out int index) Parameters Type Name Description Int32 index The external reference index. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadExternalReference(out String) Reads an external reference string. This call will succeed if the next entry is an ExternalReferenceByString . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadExternalReference(out string id) Parameters Type Name Description String id The external reference string. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadGuid(out Guid) Reads a Guid value. This call will succeed if the next entry is an Guid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadGuid(out Guid value) Parameters Type Name Description Guid value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInt16(out Int16) Reads a Int16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadInt16(out short value) Parameters Type Name Description Int16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInt32(out Int32) Reads an Int32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadInt32(out int value) Parameters Type Name Description Int32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInt64(out Int64) Reads a Int64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadInt64(out long value) Parameters Type Name Description Int64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInternalReference(out Int32) Reads an internal reference id. This call will succeed if the next entry is an InternalReference . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadInternalReference(out int id) Parameters Type Name Description Int32 id The internal reference id. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadNull() Reads a null value. This call will succeed if the next entry is an Null . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadNull() Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadPrimitiveArray<T>(out T[]) Reads a primitive array value. This call will succeed if the next entry is an PrimitiveArray . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadPrimitiveArray<T>(out T[] array) where T : struct Parameters Type Name Description T[] array The resulting primitive array. Returns Type Description Boolean true if reading a primitive array succeeded, otherwise false Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . ReadSByte(out SByte) Reads an SByte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( SByte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadSByte(out sbyte value) Parameters Type Name Description SByte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadSingle(out Single) Reads a Single value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Single ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadSingle(out float value) Parameters Type Name Description Single value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadString(out String) Reads a String value. This call will succeed if the next entry is an String . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadString(out string value) Parameters Type Name Description String value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadToNextEntry() Consumes the current entry, and reads to the next one. Declaration protected abstract EntryType ReadToNextEntry() Returns Type Description EntryType The next entry. ReadUInt16(out UInt16) Reads an UInt16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadUInt16(out ushort value) Parameters Type Name Description UInt16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadUInt32(out UInt32) Reads an UInt32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadUInt32(out uint value) Parameters Type Name Description UInt32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadUInt64(out UInt64) Reads an UInt64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public abstract bool ReadUInt64(out ulong value) Parameters Type Name Description UInt64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false SkipEntry() Skips the next entry value, unless it is an EndOfNode or an EndOfArray . If the next entry value is an StartOfNode or an StartOfArray , all of its contents will be processed, deserialized and registered in the deserialization context, so that internal reference values are not lost to entries further down the stream. Declaration public virtual void SkipEntry() Implements IDataReader See Also BaseDataReaderWriter IDataReader"
  },
  "api/TirUtilities.External.OdinSerializer.BaseDataReaderWriter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BaseDataReaderWriter.html",
    "title": "Class BaseDataReaderWriter | TirUtilities",
    "keywords": "Class BaseDataReaderWriter Implements functionality that is shared by both data readers and data writers. Inheritance Object BaseDataReaderWriter BaseDataReader BaseDataWriter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class BaseDataReaderWriter Properties Binder Gets or sets the context's or writer's serialization binder. Declaration [Obsolete(\"Use the Binder member on the writer's SerializationContext/DeserializationContext instead.\", false)] public TwoWaySerializationBinder Binder { get; set; } Property Value Type Description TwoWaySerializationBinder The reader's or writer's serialization binder. CurrentNode Gets the current node, or Empty if there is no current node. Declaration protected NodeInfo CurrentNode { get; } Property Value Type Description NodeInfo The current node. IsInArrayNode Gets a value indicating whether the reader or writer is in an array node. Declaration public bool IsInArrayNode { get; } Property Value Type Description Boolean true if the reader or writer is in an array node; otherwise, false . NodeDepth Gets the current node depth. In other words, the current count of the node stack. Declaration protected int NodeDepth { get; } Property Value Type Description Int32 The current node depth. Methods ClearNodes() Declaration protected void ClearNodes() PopArray() Pops the current node if the current node is an array node. Declaration protected void PopArray() PopNode(String) Pops the current node off of the node stack. Declaration protected void PopNode(string name) Parameters Type Name Description String name The name of the node to pop. Exceptions Type Condition InvalidOperationException There are no nodes to pop. or Tried to pop node with given name, but the current node's name was different. PushArray() Pushes an array node onto the node stack. This uses values from the current node to provide extra info about the array node. Declaration protected void PushArray() PushNode(String, Int32, Type) Pushes a node with the given name, id and type onto the node stack. Declaration protected void PushNode(string name, int id, Type type) Parameters Type Name Description String name The name of the node. Int32 id The id of the node. Type type The type of the node. PushNode(NodeInfo) Pushes a node onto the node stack. Declaration protected void PushNode(NodeInfo node) Parameters Type Name Description NodeInfo node The node to push."
  },
  "api/TirUtilities.External.OdinSerializer.BaseDataWriter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BaseDataWriter.html",
    "title": "Class BaseDataWriter | TirUtilities",
    "keywords": "Class BaseDataWriter Provides basic functionality and overridable abstract methods for implementing a data writer. If you inherit this class, it is VERY IMPORTANT that you implement each abstract method to the exact specifications the documentation specifies. Inheritance Object BaseDataReaderWriter BaseDataWriter BinaryDataWriter JsonDataWriter SerializationNodeDataWriter Implements IDataWriter Inherited Members BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class BaseDataWriter : BaseDataReaderWriter, IDataWriter, IDisposable Constructors BaseDataWriter(Stream, SerializationContext) Initializes a new instance of the BaseDataWriter class. Declaration protected BaseDataWriter(Stream stream, SerializationContext context) Parameters Type Name Description Stream stream The base stream of the writer. SerializationContext context The serialization context to use. Exceptions Type Condition ArgumentNullException The stream or context is null. ArgumentException Cannot write to the stream. Properties Context Gets the serialization context. Declaration public SerializationContext Context { get; set; } Property Value Type Description SerializationContext The serialization context. Stream Gets or sets the base stream of the writer. Declaration public virtual Stream Stream { get; set; } Property Value Type Description Stream The base stream of the writer. Exceptions Type Condition ArgumentNullException value ArgumentException Cannot write to stream Methods BeginArrayNode(Int64) Begins an array node of the given length. Declaration public abstract void BeginArrayNode(long length) Parameters Type Name Description Int64 length The length of the array to come. BeginReferenceNode(String, Type, Int32) Writes the beginning of a reference node. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration public abstract void BeginReferenceNode(string name, Type type, int id) Parameters Type Name Description String name The name of the reference node. Type type The type of the reference node. If null, no type metadata will be written. Int32 id The id of the reference node. This id is acquired by calling TryRegisterInternalReference(Object, out Int32) . BeginStructNode(String, Type) Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration public abstract void BeginStructNode(string name, Type type) Parameters Type Name Description String name The name of the struct node. Type type The type of the struct node. If null, no type metadata will be written. Dispose() Disposes all resources and streams kept by the data writer. Declaration public abstract void Dispose() EndArrayNode() Ends the current array node, if the current node is an array node. Declaration public abstract void EndArrayNode() EndNode(String) Ends the current node with the given name. If the current node has another name, an InvalidOperationException is thrown. Declaration public abstract void EndNode(string name) Parameters Type Name Description String name The name of the node to end. This has to be the name of the current node. FlushToStream() Flushes everything that has been written so far to the writer's base stream. Declaration public virtual void FlushToStream() GetDataDump() Gets a dump of the data currently written by the writer. The format of this dump varies, but should be useful for debugging purposes. Declaration public abstract string GetDataDump() Returns Type Description String PrepareNewSerializationSession() Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same writer is used to serialize several different, unrelated values. Declaration public virtual void PrepareNewSerializationSession() WriteBoolean(String, Boolean) Writes a Boolean value to the stream. Declaration public abstract void WriteBoolean(string name, bool value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Boolean value The value to write. WriteByte(String, Byte) Writes a Byte value to the stream. Declaration public abstract void WriteByte(string name, byte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Byte value The value to write. WriteChar(String, Char) Writes a Char value to the stream. Declaration public abstract void WriteChar(string name, char value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Char value The value to write. WriteDecimal(String, Decimal) Writes a Decimal value to the stream. Declaration public abstract void WriteDecimal(string name, decimal value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Decimal value The value to write. WriteDouble(String, Double) Writes a Double value to the stream. Declaration public abstract void WriteDouble(string name, double value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Double value The value to write. WriteExternalReference(String, Guid) Writes an external guid reference to the stream. Declaration public abstract void WriteExternalReference(string name, Guid guid) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid guid The value to write. WriteExternalReference(String, Int32) Writes an external index reference to the stream. Declaration public abstract void WriteExternalReference(string name, int index) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 index The value to write. WriteExternalReference(String, String) Writes an external string reference to the stream. Declaration public abstract void WriteExternalReference(string name, string id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String id The value to write. WriteGuid(String, Guid) Writes a Guid value to the stream. Declaration public abstract void WriteGuid(string name, Guid value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid value The value to write. WriteInt16(String, Int16) Writes a Int16 value to the stream. Declaration public abstract void WriteInt16(string name, short value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int16 value The value to write. WriteInt32(String, Int32) Writes an Int32 value to the stream. Declaration public abstract void WriteInt32(string name, int value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 value The value to write. WriteInt64(String, Int64) Writes a Int64 value to the stream. Declaration public abstract void WriteInt64(string name, long value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int64 value The value to write. WriteInternalReference(String, Int32) Writes an internal reference to the stream. Declaration public abstract void WriteInternalReference(string name, int id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 id The value to write. WriteNull(String) Writes a null value to the stream. Declaration public abstract void WriteNull(string name) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. WritePrimitiveArray<T>(T[]) Writes a primitive array to the stream. Declaration public abstract void WritePrimitiveArray<T>(T[] array) where T : struct Parameters Type Name Description T[] array The primitive array to write. Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . WriteSByte(String, SByte) Writes an SByte value to the stream. Declaration public abstract void WriteSByte(string name, sbyte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. SByte value The value to write. WriteSingle(String, Single) Writes a Single value to the stream. Declaration public abstract void WriteSingle(string name, float value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Single value The value to write. WriteString(String, String) Writes a String value to the stream. Declaration public abstract void WriteString(string name, string value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String value The value to write. WriteUInt16(String, UInt16) Writes an UInt16 value to the stream. Declaration public abstract void WriteUInt16(string name, ushort value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt16 value The value to write. WriteUInt32(String, UInt32) Writes an UInt32 value to the stream. Declaration public abstract void WriteUInt32(string name, uint value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt32 value The value to write. WriteUInt64(String, UInt64) Writes an UInt64 value to the stream. Declaration public abstract void WriteUInt64(string name, ulong value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt64 value The value to write. Implements IDataWriter See Also BaseDataReaderWriter IDataWriter"
  },
  "api/TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider-1.html",
    "title": "Class BaseDictionaryKeyPathProvider<T> | TirUtilities",
    "keywords": "Class BaseDictionaryKeyPathProvider<T> Not yet documented. Inheritance Object BaseDictionaryKeyPathProvider<T> Vector2DictionaryKeyPathProvider Vector3DictionaryKeyPathProvider Vector4DictionaryKeyPathProvider Implements IDictionaryKeyPathProvider <T> IDictionaryKeyPathProvider Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class BaseDictionaryKeyPathProvider<T> : IDictionaryKeyPathProvider<T>, IDictionaryKeyPathProvider, IComparer<T> Type Parameters Name Description T Not yet documented. Properties ProviderID Not yet documented. Declaration public abstract string ProviderID { get; } Property Value Type Description String Methods Compare(T, T) Not yet documented. Declaration public abstract int Compare(T x, T y) Parameters Type Name Description T x Not yet documented. T y Not yet documented. Returns Type Description Int32 Not yet documented. GetKeyFromPathString(String) Not yet documented. Declaration public abstract T GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr Not yet documented. Returns Type Description T Not yet documented. GetPathStringFromKey(T) Not yet documented. Declaration public abstract string GetPathStringFromKey(T key) Parameters Type Name Description T key Not yet documented. Returns Type Description String Not yet documented. Explicit Interface Implementations IDictionaryKeyPathProvider.Compare(Object, Object) Declaration int IDictionaryKeyPathProvider.Compare(object x, object y) Parameters Type Name Description Object x Object y Returns Type Description Int32 IDictionaryKeyPathProvider.GetKeyFromPathString(String) Declaration object IDictionaryKeyPathProvider.GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr Returns Type Description Object IDictionaryKeyPathProvider.GetPathStringFromKey(Object) Declaration string IDictionaryKeyPathProvider.GetPathStringFromKey(object key) Parameters Type Name Description Object key Returns Type Description String Implements IDictionaryKeyPathProvider<T> IDictionaryKeyPathProvider"
  },
  "api/TirUtilities.External.OdinSerializer.BaseFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BaseFormatter-1.html",
    "title": "Class BaseFormatter<T> | TirUtilities",
    "keywords": "Class BaseFormatter<T> Provides common functionality for serializing and deserializing values of type , and provides automatic support for the following common serialization conventions: IObjectReference , , OnSerializingAttribute , OnSerializedAttribute , OnDeserializingAttribute and OnDeserializedAttribute . Inheritance Object BaseFormatter<T> ArrayFormatter<T> ArrayListFormatter DelegateFormatter<T> DictionaryFormatter<TKey, TValue> DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> EasyBaseFormatter<T> GenericCollectionFormatter<TCollection, TElement> HashSetFormatter<T> KeyValuePairFormatter<TKey, TValue> ListFormatter<T> MethodInfoFormatter<T> MultiDimensionalArrayFormatter<TArray, TElement> NullableFormatter<T> QueueFormatter<TQueue, TValue> ReflectionFormatter<T> SelfFormatterFormatter<T> SerializableFormatter<T> StackFormatter<TStack, TValue> Implements IFormatter <T> IFormatter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class BaseFormatter<T> : IFormatter<T>, IFormatter Type Parameters Name Description T The type which can be serialized and deserialized by the formatter. Fields ImplementsIDeserializationCallback Declaration protected static readonly bool ImplementsIDeserializationCallback Field Value Type Description Boolean ImplementsIObjectReference Declaration protected static readonly bool ImplementsIObjectReference Field Value Type Description Boolean ImplementsISerializationCallbackReceiver Declaration protected static readonly bool ImplementsISerializationCallbackReceiver Field Value Type Description Boolean IsValueType Whether the serialized value is a value type. Declaration protected static readonly bool IsValueType Field Value Type Description Boolean OnDeserializedCallbacks The on deserialized callbacks for type . Declaration protected static readonly BaseFormatter<T>.SerializationCallback[] OnDeserializedCallbacks Field Value Type Description BaseFormatter.SerializationCallback <>[] OnDeserializingCallbacks The on deserializing callbacks for type . Declaration protected static readonly BaseFormatter<T>.SerializationCallback[] OnDeserializingCallbacks Field Value Type Description BaseFormatter.SerializationCallback <>[] OnSerializedCallbacks The on serialized callbacks for type . Declaration protected static readonly BaseFormatter<T>.SerializationCallback[] OnSerializedCallbacks Field Value Type Description BaseFormatter.SerializationCallback <>[] OnSerializingCallbacks The on serializing callbacks for type . Declaration protected static readonly BaseFormatter<T>.SerializationCallback[] OnSerializingCallbacks Field Value Type Description BaseFormatter.SerializationCallback <>[] Properties SerializedType Gets the type that the formatter can serialize. Declaration public Type SerializedType { get; } Property Value Type Description Type The type that the formatter can serialize. Methods Deserialize(IDataReader) Deserializes a value of type using a specified IDataReader . Declaration public T Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The deserialized value. DeserializeImplementation(ref T, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected abstract void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. GetUninitializedObject() Get an uninitialized object of type . WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins. You will have to call RegisterReferenceID(T, IDataReader) and InvokeOnDeserializingCallbacks(ref T, DeserializationContext) immediately after creating the object yourself during deserialization. Declaration protected virtual T GetUninitializedObject() Returns Type Description T An uninitialized object of type . InvokeOnDeserializingCallbacks(T, DeserializationContext) Invokes all methods on the object with the [OnDeserializing] attribute. WARNING: This method will not be called automatically if you override GetUninitializedObject and return null! You will have to call it manually after having created the object instance during deserialization. Declaration [Obsolete(\"Use the InvokeOnDeserializingCallbacks variant that takes a ref T value instead. This is for struct compatibility reasons.\", false)] protected void InvokeOnDeserializingCallbacks(T value, DeserializationContext context) Parameters Type Name Description T value The value to invoke the callbacks on. DeserializationContext context The deserialization context. InvokeOnDeserializingCallbacks(ref T, DeserializationContext) Invokes all methods on the object with the [OnDeserializing] attribute. WARNING: This method will not be called automatically if you override GetUninitializedObject and return null! You will have to call it manually after having created the object instance during deserialization. Declaration protected void InvokeOnDeserializingCallbacks(ref T value, DeserializationContext context) Parameters Type Name Description T value The value to invoke the callbacks on. DeserializationContext context The deserialization context. RegisterReferenceID(T, IDataReader) Registers the given object reference in the deserialization context. NOTE that this method only does anything if is not a value type. Declaration protected void RegisterReferenceID(T value, IDataReader reader) Parameters Type Name Description T value The value to register. IDataReader reader The reader which is currently being used. Serialize(T, IDataWriter) Serializes a value of type using a specified IDataWriter . Declaration public void Serialize(T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to use. SerializeImplementation(ref T, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected abstract void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to serialize with. Explicit Interface Implementations IFormatter.Deserialize(IDataReader) Deserializes a value using a specified IDataReader . Declaration object IFormatter.Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Object The deserialized value. IFormatter.Serialize(Object, IDataWriter) Serializes a value using a specified IDataWriter . Declaration void IFormatter.Serialize(object value, IDataWriter writer) Parameters Type Name Description Object value The value to serialize. IDataWriter writer The writer to use. Implements IFormatter<T> IFormatter See Also IFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.BaseFormatter-1.SerializationCallback.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BaseFormatter-1.SerializationCallback.html",
    "title": "Delegate BaseFormatter<T>.SerializationCallback | TirUtilities",
    "keywords": "Delegate BaseFormatter<T>.SerializationCallback Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax protected delegate void SerializationCallback(ref T value, StreamingContext context); Parameters Type Name Description T value StreamingContext context"
  },
  "api/TirUtilities.External.OdinSerializer.BinaryDataReader.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BinaryDataReader.html",
    "title": "Class BinaryDataReader | TirUtilities",
    "keywords": "Class BinaryDataReader Reads data from a stream that has been written by a BinaryDataWriter . Inheritance Object BaseDataReaderWriter BaseDataReader BinaryDataReader Implements IDataReader Inherited Members BaseDataReader.CurrentNodeId BaseDataReader.CurrentNodeDepth BaseDataReader.CurrentNodeName BaseDataReader.Stream BaseDataReader.Context BaseDataReader.SkipEntry() BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class BinaryDataReader : BaseDataReader, IDataReader, IDisposable Constructors BinaryDataReader() Declaration public BinaryDataReader() BinaryDataReader(Stream, DeserializationContext) Initializes a new instance of the BinaryDataReader class. Declaration public BinaryDataReader(Stream stream, DeserializationContext context) Parameters Type Name Description Stream stream The base stream of the reader. DeserializationContext context The deserialization context to use. Methods Dispose() Disposes all resources kept by the data reader, except the stream, which can be reused later. Declaration public override void Dispose() Overrides BaseDataReader.Dispose() EnterArray(out Int64) Tries to enters an array node. This will succeed if the next entry is an StartOfArray . This call MUST (eventually) be followed by a corresponding call to ExitArray() This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current array node. Declaration public override bool EnterArray(out long length) Parameters Type Name Description Int64 length The length of the array that was entered. Returns Type Description Boolean true if an array was entered, otherwise false Overrides BaseDataReader.EnterArray(out Int64) EnterNode(out Type) Tries to enter a node. This will succeed if the next entry is an StartOfNode . This call MUST (eventually) be followed by a corresponding call to ExitNode() This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current node. Declaration public override bool EnterNode(out Type type) Parameters Type Name Description Type type The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name. Returns Type Description Boolean true if entering a node succeeded, otherwise false Overrides BaseDataReader.EnterNode(out Type) ExitArray() Exits the closest array. This method will keep skipping entries using SkipEntry() until an EndOfArray is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterArray(out Int64) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the exited array node. Declaration public override bool ExitArray() Returns Type Description Boolean true if the method exited an array, false if it reached the end of the stream. Overrides BaseDataReader.ExitArray() ExitNode() Exits the current node. This method will keep skipping entries using SkipEntry() until an EndOfNode is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterNode(out Type) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the current node. Declaration public override bool ExitNode() Returns Type Description Boolean true if the method exited a node, false if it reached the end of the stream. Overrides BaseDataReader.ExitNode() GetDataDump() Declaration public override string GetDataDump() Returns Type Description String Overrides BaseDataReader.GetDataDump() PeekEntry() Peeks the current entry. Declaration protected override EntryType PeekEntry() Returns Type Description EntryType The peeked entry. Overrides BaseDataReader.PeekEntry() PeekEntry(out String) Peeks ahead and returns the type of the next entry in the stream. Declaration public override EntryType PeekEntry(out string name) Parameters Type Name Description String name The name of the next entry, if it has one. Returns Type Description EntryType The type of the next entry. Overrides BaseDataReader.PeekEntry(out String) PrepareNewSerializationSession() Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same reader is used to deserialize several different, unrelated values. Declaration public override void PrepareNewSerializationSession() Overrides BaseDataReader.PrepareNewSerializationSession() ReadBoolean(out Boolean) Reads a Boolean value. This call will succeed if the next entry is an Boolean . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadBoolean(out bool value) Parameters Type Name Description Boolean value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadBoolean(out Boolean) ReadByte(out Byte) Reads a Byte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Byte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadByte(out byte value) Parameters Type Name Description Byte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadByte(out Byte) ReadChar(out Char) Reads a Char value. This call will succeed if the next entry is an String . If the string of the entry is longer than 1 character, the first character of the string will be taken as the result. If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadChar(out char value) Parameters Type Name Description Char value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadChar(out Char) ReadDecimal(out Decimal) Reads a Decimal value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Decimal ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadDecimal(out decimal value) Parameters Type Name Description Decimal value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadDecimal(out Decimal) ReadDouble(out Double) Reads a Double value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Double ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadDouble(out double value) Parameters Type Name Description Double value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadDouble(out Double) ReadExternalReference(out Guid) Reads an external reference guid. This call will succeed if the next entry is an ExternalReferenceByGuid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadExternalReference(out Guid guid) Parameters Type Name Description Guid guid The external reference guid. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadExternalReference(out Guid) ReadExternalReference(out Int32) Reads an external reference index. This call will succeed if the next entry is an ExternalReferenceByIndex . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadExternalReference(out int index) Parameters Type Name Description Int32 index The external reference index. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadExternalReference(out Int32) ReadExternalReference(out String) Reads an external reference string. This call will succeed if the next entry is an ExternalReferenceByString . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadExternalReference(out string id) Parameters Type Name Description String id The external reference string. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadExternalReference(out String) ReadGuid(out Guid) Reads a Guid value. This call will succeed if the next entry is an Guid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadGuid(out Guid value) Parameters Type Name Description Guid value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadGuid(out Guid) ReadInt16(out Int16) Reads a Int16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInt16(out short value) Parameters Type Name Description Int16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInt16(out Int16) ReadInt32(out Int32) Reads an Int32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInt32(out int value) Parameters Type Name Description Int32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInt32(out Int32) ReadInt64(out Int64) Reads a Int64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInt64(out long value) Parameters Type Name Description Int64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInt64(out Int64) ReadInternalReference(out Int32) Reads an internal reference id. This call will succeed if the next entry is an InternalReference . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInternalReference(out int id) Parameters Type Name Description Int32 id The internal reference id. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInternalReference(out Int32) ReadNull() Reads a null value. This call will succeed if the next entry is an Null . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadNull() Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadNull() ReadPrimitiveArray<T>(out T[]) Reads a primitive array value. This call will succeed if the next entry is an PrimitiveArray . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadPrimitiveArray<T>(out T[] array) where T : struct Parameters Type Name Description T[] array The resulting primitive array. Returns Type Description Boolean true if reading a primitive array succeeded, otherwise false Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . Overrides TirUtilities.External.OdinSerializer.BaseDataReader.ReadPrimitiveArray<T>(T[]) Exceptions Type Condition ArgumentException Type + typeof(T).Name + is not a valid primitive array type. ReadSByte(out SByte) Reads an SByte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( SByte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadSByte(out sbyte value) Parameters Type Name Description SByte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadSByte(out SByte) ReadSingle(out Single) Reads a Single value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Single ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadSingle(out float value) Parameters Type Name Description Single value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadSingle(out Single) ReadString(out String) Reads a String value. This call will succeed if the next entry is an String . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadString(out string value) Parameters Type Name Description String value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadString(out String) ReadToNextEntry() Consumes the current entry, and reads to the next one. Declaration protected override EntryType ReadToNextEntry() Returns Type Description EntryType The next entry. Overrides BaseDataReader.ReadToNextEntry() ReadUInt16(out UInt16) Reads an UInt16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadUInt16(out ushort value) Parameters Type Name Description UInt16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadUInt16(out UInt16) ReadUInt32(out UInt32) Reads an UInt32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadUInt32(out uint value) Parameters Type Name Description UInt32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadUInt32(out UInt32) ReadUInt64(out UInt64) Reads an UInt64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadUInt64(out ulong value) Parameters Type Name Description UInt64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadUInt64(out UInt64) Implements IDataReader See Also BaseDataReader"
  },
  "api/TirUtilities.External.OdinSerializer.BinaryDataWriter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BinaryDataWriter.html",
    "title": "Class BinaryDataWriter | TirUtilities",
    "keywords": "Class BinaryDataWriter Writes data to a stream that can be read by a BinaryDataReader . Inheritance Object BaseDataReaderWriter BaseDataWriter BinaryDataWriter Implements IDataWriter Inherited Members BaseDataWriter.Stream BaseDataWriter.Context BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class BinaryDataWriter : BaseDataWriter, IDataWriter, IDisposable Constructors BinaryDataWriter() Declaration public BinaryDataWriter() BinaryDataWriter(Stream, SerializationContext) Initializes a new instance of the BinaryDataWriter class. Declaration public BinaryDataWriter(Stream stream, SerializationContext context) Parameters Type Name Description Stream stream The base stream of the writer. SerializationContext context The serialization context to use. Fields CompressStringsTo8BitWhenPossible Declaration public bool CompressStringsTo8BitWhenPossible Field Value Type Description Boolean Methods BeginArrayNode(Int64) Begins an array node of the given length. Declaration public override void BeginArrayNode(long length) Parameters Type Name Description Int64 length The length of the array to come. Overrides BaseDataWriter.BeginArrayNode(Int64) BeginReferenceNode(String, Type, Int32) Writes the beginning of a reference node. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration public override void BeginReferenceNode(string name, Type type, int id) Parameters Type Name Description String name The name of the reference node. Type type The type of the reference node. If null, no type metadata will be written. Int32 id The id of the reference node. This id is acquired by calling TryRegisterInternalReference(Object, out Int32) . Overrides BaseDataWriter.BeginReferenceNode(String, Type, Int32) BeginStructNode(String, Type) Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration public override void BeginStructNode(string name, Type type) Parameters Type Name Description String name The name of the struct node. Type type The type of the struct node. If null, no type metadata will be written. Overrides BaseDataWriter.BeginStructNode(String, Type) Dispose() Disposes all resources kept by the data writer, except the stream, which can be reused later. Declaration public override void Dispose() Overrides BaseDataWriter.Dispose() EndArrayNode() Ends the current array node, if the current node is an array node. Declaration public override void EndArrayNode() Overrides BaseDataWriter.EndArrayNode() EndNode(String) Ends the current node with the given name. If the current node has another name, an InvalidOperationException is thrown. Declaration public override void EndNode(string name) Parameters Type Name Description String name The name of the node to end. This has to be the name of the current node. Overrides BaseDataWriter.EndNode(String) FlushToStream() Declaration public override void FlushToStream() Overrides BaseDataWriter.FlushToStream() GetDataDump() Declaration public override string GetDataDump() Returns Type Description String Overrides BaseDataWriter.GetDataDump() PrepareNewSerializationSession() Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same writer is used to serialize several different, unrelated values. Declaration public override void PrepareNewSerializationSession() Overrides BaseDataWriter.PrepareNewSerializationSession() WriteBoolean(String, Boolean) Writes a Boolean value to the stream. Declaration public override void WriteBoolean(string name, bool value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Boolean value The value to write. Overrides BaseDataWriter.WriteBoolean(String, Boolean) WriteByte(String, Byte) Writes a Byte value to the stream. Declaration public override void WriteByte(string name, byte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Byte value The value to write. Overrides BaseDataWriter.WriteByte(String, Byte) WriteChar(String, Char) Writes a Char value to the stream. Declaration public override void WriteChar(string name, char value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Char value The value to write. Overrides BaseDataWriter.WriteChar(String, Char) WriteDecimal(String, Decimal) Writes a Decimal value to the stream. Declaration public override void WriteDecimal(string name, decimal value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Decimal value The value to write. Overrides BaseDataWriter.WriteDecimal(String, Decimal) WriteDouble(String, Double) Writes a Double value to the stream. Declaration public override void WriteDouble(string name, double value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Double value The value to write. Overrides BaseDataWriter.WriteDouble(String, Double) WriteExternalReference(String, Guid) Writes an external guid reference to the stream. Declaration public override void WriteExternalReference(string name, Guid guid) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid guid The value to write. Overrides BaseDataWriter.WriteExternalReference(String, Guid) WriteExternalReference(String, Int32) Writes an external index reference to the stream. Declaration public override void WriteExternalReference(string name, int index) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 index The value to write. Overrides BaseDataWriter.WriteExternalReference(String, Int32) WriteExternalReference(String, String) Writes an external string reference to the stream. Declaration public override void WriteExternalReference(string name, string id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String id The value to write. Overrides BaseDataWriter.WriteExternalReference(String, String) WriteGuid(String, Guid) Writes a Guid value to the stream. Declaration public override void WriteGuid(string name, Guid value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid value The value to write. Overrides BaseDataWriter.WriteGuid(String, Guid) WriteInt16(String, Int16) Writes a Int16 value to the stream. Declaration public override void WriteInt16(string name, short value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int16 value The value to write. Overrides BaseDataWriter.WriteInt16(String, Int16) WriteInt32(String, Int32) Writes an Int32 value to the stream. Declaration public override void WriteInt32(string name, int value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 value The value to write. Overrides BaseDataWriter.WriteInt32(String, Int32) WriteInt64(String, Int64) Writes a Int64 value to the stream. Declaration public override void WriteInt64(string name, long value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int64 value The value to write. Overrides BaseDataWriter.WriteInt64(String, Int64) WriteInternalReference(String, Int32) Writes an internal reference to the stream. Declaration public override void WriteInternalReference(string name, int id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 id The value to write. Overrides BaseDataWriter.WriteInternalReference(String, Int32) WriteNull(String) Writes a null value to the stream. Declaration public override void WriteNull(string name) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Overrides BaseDataWriter.WriteNull(String) WritePrimitiveArray<T>(T[]) Writes a primitive array to the stream. Declaration public override void WritePrimitiveArray<T>(T[] array) where T : struct Parameters Type Name Description T[] array The primitive array to write. Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . Overrides TirUtilities.External.OdinSerializer.BaseDataWriter.WritePrimitiveArray<T>(T[]) Exceptions Type Condition ArgumentException Type + typeof(T).Name + is not a valid primitive array type. WriteSByte(String, SByte) Writes an SByte value to the stream. Declaration public override void WriteSByte(string name, sbyte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. SByte value The value to write. Overrides BaseDataWriter.WriteSByte(String, SByte) WriteSingle(String, Single) Writes a Single value to the stream. Declaration public override void WriteSingle(string name, float value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Single value The value to write. Overrides BaseDataWriter.WriteSingle(String, Single) WriteString(String, String) Writes a String value to the stream. Declaration public override void WriteString(string name, string value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String value The value to write. Overrides BaseDataWriter.WriteString(String, String) WriteUInt16(String, UInt16) Writes an UInt16 value to the stream. Declaration public override void WriteUInt16(string name, ushort value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt16 value The value to write. Overrides BaseDataWriter.WriteUInt16(String, UInt16) WriteUInt32(String, UInt32) Writes an UInt32 value to the stream. Declaration public override void WriteUInt32(string name, uint value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt32 value The value to write. Overrides BaseDataWriter.WriteUInt32(String, UInt32) WriteUInt64(String, UInt64) Writes an UInt64 value to the stream. Declaration public override void WriteUInt64(string name, ulong value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt64 value The value to write. Overrides BaseDataWriter.WriteUInt64(String, UInt64) Implements IDataWriter See Also BaseDataWriter"
  },
  "api/TirUtilities.External.OdinSerializer.BinaryEntryType.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BinaryEntryType.html",
    "title": "Enum BinaryEntryType | TirUtilities",
    "keywords": "Enum BinaryEntryType Entry types in the binary format written by BinaryDataWriter . Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum BinaryEntryType : byte Fields Name Description EndOfArray Entry denoting the end of an array. EndOfNode Entry denoting an end of node. EndOfStream Entry denoting that the end of the stream has been reached. Invalid An invalid entry. NamedBoolean Entry denoting a named boolean. NamedByte Entry denoting a named byte. NamedChar Entry denoting a named char. NamedDecimal Entry denoting a named decimal. NamedDouble Entry denoting a named double. NamedExternalReferenceByGuid Entry denoting a named external reference by guid. NamedExternalReferenceByIndex Entry denoting a named external reference by index. NamedExternalReferenceByString Entry denoting a named external reference by string. NamedFloat Entry denoting a named float. NamedGuid Entry denoting a named guid. NamedInt Entry denoting a named int. NamedInternalReference Entry denoting a named internal reference. NamedLong Entry denoting a named long. NamedNull Entry denoting a named null. NamedSByte Entry denoting a named sbyte. NamedShort Entry denoting a named short. NamedStartOfReferenceNode Entry denoting a named start of a reference node. NamedStartOfStructNode Entry denoting a named start of a struct node. NamedString Entry denoting a named string. NamedUInt Entry denoting a named uint. NamedULong Entry denoting a named ulong. NamedUShort Entry denoting a named ushort. PrimitiveArray Entry denoting a primitive array. StartOfArray Entry denoting the start of an array. TypeID Entry denoting a type id. TypeName Entry denoting a type name. UnnamedBoolean Entry denoting an unnamed boolean. UnnamedByte Entry denoting an unnamed byte. UnnamedChar Entry denoting an unnamed char. UnnamedDecimal Entry denoting an unnamed decimal. UnnamedDouble Entry denoting an unnamed double. UnnamedExternalReferenceByGuid Entry denoting an unnamed external reference by guid. UnnamedExternalReferenceByIndex Entry denoting an unnamed external reference by index. UnnamedExternalReferenceByString Entry denoting an unnamed external reference by string. UnnamedFloat Entry denoting an unnamed float. UnnamedGuid Entry denoting an unnamed guid. UnnamedInt Entry denoting an unnamed int. UnnamedInternalReference Entry denoting an unnamed internal reference. UnnamedLong Entry denoting an unnamed long. UnnamedNull Entry denoting an unnamed null. UnnamedSByte Entry denoting an unnamed sbyte. UnnamedShort Entry denoting an unnamed short. UnnamedStartOfReferenceNode Entry denoting an unnamed start of a reference node. UnnamedStartOfStructNode Entry denoting an unnamed start of a struct node. UnnamedString Entry denoting an unnamed string. UnnamedUInt Entry denoting an unnamed uint. UnnamedULong Entry denoting an unnamed ulong. UnnamedUShort Entry denoting an unnamed ushort."
  },
  "api/TirUtilities.External.OdinSerializer.BindTypeNameToTypeAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BindTypeNameToTypeAttribute.html",
    "title": "Class BindTypeNameToTypeAttribute | TirUtilities",
    "keywords": "Class BindTypeNameToTypeAttribute An attribute that lets you help the DefaultSerializationBinder bind type names to types. This is useful if you're renaming a type, that would result in data loss, and what to specify the new type name to avoid loss of data. Inheritance Object Attribute BindTypeNameToTypeAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class BindTypeNameToTypeAttribute : Attribute, _Attribute Examples [assembly: OdinSerializer.BindTypeNameToType(\"Namespace.OldTypeName\", typeof(Namespace.NewTypeName))] //[assembly: OdinSerializer.BindTypeNameToType(\"Namespace.OldTypeName, OldFullAssemblyName\", typeof(Namespace.NewTypeName))] namespace Namespace { public class SomeComponent : SerializedMonoBehaviour { public IInterface test; // Contains an instance of OldTypeName; } public interface IInterface { } public class NewTypeName : IInterface { } //public class OldTypeName : IInterface { } } Constructors BindTypeNameToTypeAttribute(String, Type) Initializes a new instance of the BindTypeNameToTypeAttribute class. Declaration public BindTypeNameToTypeAttribute(string oldFullTypeName, Type newType) Parameters Type Name Description String oldFullTypeName Old old full type name. If it's moved to new a new assembly you must specify the old assembly name as well. See example code in the documentation. Type newType The new type. See Also DefaultSerializationBinder"
  },
  "api/TirUtilities.External.OdinSerializer.BooleanSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BooleanSerializer.html",
    "title": "Class BooleanSerializer | TirUtilities",
    "keywords": "Class BooleanSerializer Serializer for the Boolean type. Inheritance Object Serializer Serializer < Boolean > BooleanSerializer Inherited Members Serializer<Boolean>.ReadValueWeak(IDataReader) Serializer<Boolean>.WriteValueWeak(String, Object, IDataWriter) Serializer<Boolean>.WriteValue(Boolean, IDataWriter) Serializer<Boolean>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class BooleanSerializer : Serializer<bool> Methods ReadValue(IDataReader) Reads a value of type Boolean . Declaration public override bool ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Boolean The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Boolean>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Boolean, IDataWriter) Writes a value of type Boolean . Declaration public override void WriteValue(string name, bool value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Boolean value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Boolean>.WriteValue(System.String, System.Boolean, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.BoundsFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.BoundsFormatter.html",
    "title": "Class BoundsFormatter | TirUtilities",
    "keywords": "Class BoundsFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Bounds > BoundsFormatter Implements IFormatter < Bounds > IFormatter Inherited Members MinimalBaseFormatter<Bounds>.IsValueType MinimalBaseFormatter<Bounds>.SerializedType MinimalBaseFormatter<Bounds>.Deserialize(IDataReader) MinimalBaseFormatter<Bounds>.Serialize(Bounds, IDataWriter) MinimalBaseFormatter<Bounds>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Bounds>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Bounds>.GetUninitializedObject() MinimalBaseFormatter<Bounds>.RegisterReferenceID(Bounds, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class BoundsFormatter : MinimalBaseFormatter<Bounds>, IFormatter<Bounds>, IFormatter Methods Read(ref Bounds, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Bounds value, IDataReader reader) Parameters Type Name Description Bounds value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Bounds>.Read(Bounds, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Bounds, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Bounds value, IDataWriter writer) Parameters Type Name Description Bounds value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Bounds>.Write(Bounds, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Buffer-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Buffer-1.html",
    "title": "Class Buffer<T> | TirUtilities",
    "keywords": "Class Buffer<T> Provides a way of claiming and releasing cached array buffers. Inheritance Object Buffer<T> Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Buffer<T> : IDisposable Type Parameters Name Description T The element type of the array to buffer. Properties Array Gets the buffered array. Declaration public T[] Array { get; } Property Value Type Description T[] The buffered array. Exceptions Type Condition InvalidOperationException Cannot access a buffer while it is freed. Count Gets the total element count of the buffered array. This will always be a power of two. Declaration public int Count { get; } Property Value Type Description Int32 The total element count of the buffered array. Exceptions Type Condition InvalidOperationException Cannot access a buffer while it is freed. IsFree Gets a value indicating whether this buffer is free. Declaration public bool IsFree { get; } Property Value Type Description Boolean true if this buffer is free; otherwise, false . Methods Claim(Int32) Claims a buffer with the specified minimum capacity. Note: buffers always have a capacity equal to or larger than 256. Declaration public static Buffer<T> Claim(int minimumCapacity) Parameters Type Name Description Int32 minimumCapacity The minimum capacity. Returns Type Description Buffer <T> A buffer which has a capacity equal to or larger than the specified minimum capacity. Exceptions Type Condition ArgumentException Requested size of buffer must be larger than 0. Dispose() Frees this buffer. Declaration public void Dispose() Free() Frees this buffer. Declaration public void Free() Free(Buffer<T>) Frees the specified buffer. Declaration public static void Free(Buffer<T> buffer) Parameters Type Name Description Buffer <T> buffer The buffer to free. Exceptions Type Condition ArgumentNullException The buffer argument is null. See Also IDisposable"
  },
  "api/TirUtilities.External.OdinSerializer.ByteSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ByteSerializer.html",
    "title": "Class ByteSerializer | TirUtilities",
    "keywords": "Class ByteSerializer Serializer for the Byte type. Inheritance Object Serializer Serializer < Byte > ByteSerializer Inherited Members Serializer<Byte>.ReadValueWeak(IDataReader) Serializer<Byte>.WriteValueWeak(String, Object, IDataWriter) Serializer<Byte>.WriteValue(Byte, IDataWriter) Serializer<Byte>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class ByteSerializer : Serializer<byte> Methods ReadValue(IDataReader) Reads a value of type Byte . Declaration public override byte ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Byte The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Byte>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Byte, IDataWriter) Writes a value of type Byte . Declaration public override void WriteValue(string name, byte value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Byte value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Byte>.WriteValue(System.String, System.Byte, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.CharSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.CharSerializer.html",
    "title": "Class CharSerializer | TirUtilities",
    "keywords": "Class CharSerializer Serializer for the Char type. Inheritance Object Serializer Serializer < Char > CharSerializer Inherited Members Serializer<Char>.ReadValueWeak(IDataReader) Serializer<Char>.WriteValueWeak(String, Object, IDataWriter) Serializer<Char>.WriteValue(Char, IDataWriter) Serializer<Char>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class CharSerializer : Serializer<char> Methods ReadValue(IDataReader) Reads a value of type Char . Declaration public override char ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Char The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Char>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Char, IDataWriter) Writes a value of type Char . Declaration public override void WriteValue(string name, char value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Char value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Char>.WriteValue(System.String, System.Char, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Color32Formatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Color32Formatter.html",
    "title": "Class Color32Formatter | TirUtilities",
    "keywords": "Class Color32Formatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Color32 > Color32Formatter Implements IFormatter < Color32 > IFormatter Inherited Members MinimalBaseFormatter<Color32>.IsValueType MinimalBaseFormatter<Color32>.SerializedType MinimalBaseFormatter<Color32>.Deserialize(IDataReader) MinimalBaseFormatter<Color32>.Serialize(Color32, IDataWriter) MinimalBaseFormatter<Color32>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Color32>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Color32>.GetUninitializedObject() MinimalBaseFormatter<Color32>.RegisterReferenceID(Color32, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class Color32Formatter : MinimalBaseFormatter<Color32>, IFormatter<Color32>, IFormatter Methods Read(ref Color32, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Color32 value, IDataReader reader) Parameters Type Name Description Color32 value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Color32>.Read(Color32, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Color32, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Color32 value, IDataWriter writer) Parameters Type Name Description Color32 value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Color32>.Write(Color32, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ColorBlockFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ColorBlockFormatter-1.html",
    "title": "Class ColorBlockFormatter<T> | TirUtilities",
    "keywords": "Class ColorBlockFormatter<T> Custom formatter for the type. Inheritance Object MinimalBaseFormatter <T> ColorBlockFormatter<T> Implements IFormatter <T> IFormatter Inherited Members MinimalBaseFormatter<T>.IsValueType MinimalBaseFormatter<T>.SerializedType MinimalBaseFormatter<T>.Deserialize(IDataReader) MinimalBaseFormatter<T>.Serialize(T, IDataWriter) MinimalBaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<T>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<T>.GetUninitializedObject() MinimalBaseFormatter<T>.RegisterReferenceID(T, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class ColorBlockFormatter<T> : MinimalBaseFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T Methods Read(ref T, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref T value, IDataReader reader) Parameters Type Name Description T value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<T>.Read(T, TirUtilities.External.OdinSerializer.IDataReader) Write(ref T, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<T>.Write(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ColorBlockFormatterLocator.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ColorBlockFormatterLocator.html",
    "title": "Class ColorBlockFormatterLocator | TirUtilities",
    "keywords": "Class ColorBlockFormatterLocator Inheritance Object ColorBlockFormatterLocator Implements IFormatterLocator Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class ColorBlockFormatterLocator : IFormatterLocator Methods TryGetFormatter(Type, FormatterLocationStep, ISerializationPolicy, out IFormatter) Declaration public bool TryGetFormatter(Type type, FormatterLocationStep step, ISerializationPolicy policy, out IFormatter formatter) Parameters Type Name Description Type type FormatterLocationStep step ISerializationPolicy policy IFormatter formatter Returns Type Description Boolean Implements IFormatterLocator"
  },
  "api/TirUtilities.External.OdinSerializer.ColorFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ColorFormatter.html",
    "title": "Class ColorFormatter | TirUtilities",
    "keywords": "Class ColorFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Color > ColorFormatter Implements IFormatter < Color > IFormatter Inherited Members MinimalBaseFormatter<Color>.IsValueType MinimalBaseFormatter<Color>.SerializedType MinimalBaseFormatter<Color>.Deserialize(IDataReader) MinimalBaseFormatter<Color>.Serialize(Color, IDataWriter) MinimalBaseFormatter<Color>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Color>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Color>.GetUninitializedObject() MinimalBaseFormatter<Color>.RegisterReferenceID(Color, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class ColorFormatter : MinimalBaseFormatter<Color>, IFormatter<Color>, IFormatter Methods Read(ref Color, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Color value, IDataReader reader) Parameters Type Name Description Color value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Color>.Read(Color, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Color, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Color value, IDataWriter writer) Parameters Type Name Description Color value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Color>.Write(Color, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ComplexTypeSerializer-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ComplexTypeSerializer-1.html",
    "title": "Class ComplexTypeSerializer<T> | TirUtilities",
    "keywords": "Class ComplexTypeSerializer<T> Serializer for all complex types; IE, types which are not primitives as determined by the IsPrimitiveType(Type) method. Inheritance Object Serializer Serializer <T> ComplexTypeSerializer<T> Inherited Members Serializer<T>.ReadValueWeak(IDataReader) Serializer<T>.WriteValueWeak(String, Object, IDataWriter) Serializer<T>.WriteValue(T, IDataWriter) Serializer<T>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class ComplexTypeSerializer<T> : Serializer<T> Type Parameters Name Description T The type which the ComplexTypeSerializer<T> can serialize and deserialize. Methods ReadValue(IDataReader) Reads a value of type . Declaration public override T ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<T>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, T, IDataWriter) Writes a value of type . Declaration public override void WriteValue(string name, T value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. T value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<T>.WriteValue(System.String, T, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.CoroutineFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.CoroutineFormatter.html",
    "title": "Class CoroutineFormatter | TirUtilities",
    "keywords": "Class CoroutineFormatter Custom formatter for the type. This serializes nothing and always deserializes null, and only exists to ensure that no coroutine instances are ever created by the serialization system, since they will in almost all cases be invalid instances. Invalid coroutine instances crash Unity instantly when they are garbage collected. Inheritance Object CoroutineFormatter Implements IFormatter < Coroutine > IFormatter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class CoroutineFormatter : IFormatter<Coroutine>, IFormatter Properties SerializedType Gets the type that the formatter can serialize. Declaration public Type SerializedType { get; } Property Value Type Description Type The type that the formatter can serialize. Methods Deserialize(IDataReader) Returns null. Declaration public Coroutine Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader Returns Type Description Coroutine Serialize(Coroutine, IDataWriter) Does nothing. Declaration public void Serialize(Coroutine value, IDataWriter writer) Parameters Type Name Description Coroutine value IDataWriter writer Serialize(Object, IDataWriter) Does nothing. Declaration public void Serialize(object value, IDataWriter writer) Parameters Type Name Description Object value IDataWriter writer Explicit Interface Implementations IFormatter.Deserialize(IDataReader) Returns null. Declaration object IFormatter.Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader Returns Type Description Object Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.CustomFormatterAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.CustomFormatterAttribute.html",
    "title": "Class CustomFormatterAttribute | TirUtilities",
    "keywords": "Class CustomFormatterAttribute Attribute indicating that a class which implements the IFormatter<T> interface somewhere in its hierarchy is a custom formatter for the type T. Inheritance Object Attribute CustomFormatterAttribute CustomGenericFormatterAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Obsolete(\"Use a RegisterFormatterAttribute applied to the containing assembly instead.\", true)] public class CustomFormatterAttribute : Attribute, _Attribute Constructors CustomFormatterAttribute() Initializes a new instance of the CustomFormatterAttribute class with priority 0. Declaration public CustomFormatterAttribute() CustomFormatterAttribute(Int32) Initializes a new instance of the CustomFormatterAttribute class. Declaration public CustomFormatterAttribute(int priority = 0) Parameters Type Name Description Int32 priority The priority of the formatter. Of all the available custom formatters, the formatter with the highest priority is always chosen. Fields Priority The priority of the formatter. Of all the available custom formatters, the formatter with the highest priority is always chosen. Declaration public readonly int Priority Field Value Type Description Int32 See Also Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.CustomGenericFormatterAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.CustomGenericFormatterAttribute.html",
    "title": "Class CustomGenericFormatterAttribute | TirUtilities",
    "keywords": "Class CustomGenericFormatterAttribute Attribute indicating that a generic type definition class which implements the IFormatter<T> interface somewhere in its hierarchy is a custom formatter for any variation of the generic type definition T. The formatter's generic type parameters are mapped onto the serialized type's generic type parameters. For example, DictionaryFormatter<TKey, TValue> implements IFormatter<T> , where T is Dictionary<TKey,TValue> . Inheritance Object Attribute CustomFormatterAttribute CustomGenericFormatterAttribute Inherited Members CustomFormatterAttribute.Priority Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class)] [Obsolete(\"Use a RegisterFormatterAttribute applied to the containing assembly instead.\", true)] public class CustomGenericFormatterAttribute : CustomFormatterAttribute, _Attribute Constructors CustomGenericFormatterAttribute(Type, Int32) Initializes a new instance of the CustomGenericFormatterAttribute class. Declaration public CustomGenericFormatterAttribute(Type serializedGenericTypeDefinition, int priority = 0) Parameters Type Name Description Type serializedGenericTypeDefinition The generic type definition of the serialized type. Int32 priority The priority of the formatter. Of all the available custom formatters, the formatter with the highest priority is always chosen. Exceptions Type Condition ArgumentNullException serializedGenericTypeDefinition was null. ArgumentException The type given in serializedGenericTypeDefinition is not a generic type definition. Fields SerializedGenericTypeDefinition The generic type definition of the serialized type. Declaration public readonly Type SerializedGenericTypeDefinition Field Value Type Description Type See Also CustomFormatterAttribute"
  },
  "api/TirUtilities.External.OdinSerializer.CustomLogger.html": {
    "href": "api/TirUtilities.External.OdinSerializer.CustomLogger.html",
    "title": "Class CustomLogger | TirUtilities",
    "keywords": "Class CustomLogger A helper class for quickly and easily defining custom loggers. Inheritance Object CustomLogger Implements ILogger Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class CustomLogger : ILogger Constructors CustomLogger(Action<String>, Action<String>, Action<Exception>) Creates a new custom logger using a set of given delegates. Declaration public CustomLogger(Action<string> logWarningDelegate, Action<string> logErrorDelegate, Action<Exception> logExceptionDelegate) Parameters Type Name Description Action < String > logWarningDelegate Action < String > logErrorDelegate Action < Exception > logExceptionDelegate Methods LogError(String) Logs an error. Declaration public void LogError(string error) Parameters Type Name Description String error The error to log. LogException(Exception) Logs an exception. Declaration public void LogException(Exception exception) Parameters Type Name Description Exception exception The exception to log. LogWarning(String) Logs a warning. Declaration public void LogWarning(string warning) Parameters Type Name Description String warning The warning to log. Implements ILogger See Also ILogger"
  },
  "api/TirUtilities.External.OdinSerializer.CustomSerializationPolicy.html": {
    "href": "api/TirUtilities.External.OdinSerializer.CustomSerializationPolicy.html",
    "title": "Class CustomSerializationPolicy | TirUtilities",
    "keywords": "Class CustomSerializationPolicy Helper class for quickly and easily implementing the ISerializationPolicy interface. Inheritance Object CustomSerializationPolicy Implements ISerializationPolicy Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class CustomSerializationPolicy : ISerializationPolicy Constructors CustomSerializationPolicy(String, Boolean, Func<MemberInfo, Boolean>) Initializes a new instance of the CustomSerializationPolicy class. Declaration public CustomSerializationPolicy(string id, bool allowNonSerializableTypes, Func<MemberInfo, bool> shouldSerializeFunc) Parameters Type Name Description String id The policy ID. Boolean allowNonSerializableTypes if set to true non serializable types will be allowed. Func < MemberInfo , Boolean > shouldSerializeFunc The delegate to use for determining whether members should be serialized. Exceptions Type Condition ArgumentNullException The id argument or the shouldSerializeFunc argument was null. Properties AllowNonSerializableTypes Gets a value indicating whether to allow non serializable types. (Types which are not decorated with SerializableAttribute .) Declaration public bool AllowNonSerializableTypes { get; } Property Value Type Description Boolean true if serializable types are allowed; otherwise, false . ID Gets the identifier of the policy. This can be stored in the serialization metadata, so the policy used to serialize it can be recovered without knowing the policy at runtime. This ID should preferably be unique. Declaration public string ID { get; } Property Value Type Description String The identifier of the policy. Methods ShouldSerializeMember(MemberInfo) Gets a value indicating whether a given MemberInfo should be serialized or not. Declaration public bool ShouldSerializeMember(MemberInfo member) Parameters Type Name Description MemberInfo member The member to check. Returns Type Description Boolean true if the given member should be serialized, otherwise, false . Implements ISerializationPolicy"
  },
  "api/TirUtilities.External.OdinSerializer.DataFormat.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DataFormat.html",
    "title": "Enum DataFormat | TirUtilities",
    "keywords": "Enum DataFormat Specifies a data format to read and write in. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum DataFormat Fields Name Description Binary A custom packed binary format. This format is most efficient and almost allocation-free, but its serialized data is not human-readable. JSON A JSON format compliant with the json specification found at \" http://www.json.org/&quot ;. This format has rather sluggish performance and allocates frightening amounts of string garbage. Nodes A format that does not serialize to a byte stream, but to a list of data nodes in memory which can then be serialized by Unity. This format is highly inefficient, and is primarily used for ensuring that Unity assets are mergeable by individual values when saved in Unity's text format. This makes serialized values more robust and data recovery easier in case of issues. This format is not recommended for use in builds."
  },
  "api/TirUtilities.External.OdinSerializer.DateTimeFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DateTimeFormatter.html",
    "title": "Class DateTimeFormatter | TirUtilities",
    "keywords": "Class DateTimeFormatter Custom formatter for the DateTime type. Inheritance Object MinimalBaseFormatter < DateTime > DateTimeFormatter Implements IFormatter < DateTime > IFormatter Inherited Members MinimalBaseFormatter<DateTime>.IsValueType MinimalBaseFormatter<DateTime>.SerializedType MinimalBaseFormatter<DateTime>.Deserialize(IDataReader) MinimalBaseFormatter<DateTime>.Serialize(DateTime, IDataWriter) MinimalBaseFormatter<DateTime>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<DateTime>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<DateTime>.GetUninitializedObject() MinimalBaseFormatter<DateTime>.RegisterReferenceID(DateTime, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DateTimeFormatter : MinimalBaseFormatter<DateTime>, IFormatter<DateTime>, IFormatter Methods Read(ref DateTime, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref DateTime value, IDataReader reader) Parameters Type Name Description DateTime value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.DateTime>.Read(System.DateTime, TirUtilities.External.OdinSerializer.IDataReader) Write(ref DateTime, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref DateTime value, IDataWriter writer) Parameters Type Name Description DateTime value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.DateTime>.Write(System.DateTime, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.DateTimeOffsetFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DateTimeOffsetFormatter.html",
    "title": "Class DateTimeOffsetFormatter | TirUtilities",
    "keywords": "Class DateTimeOffsetFormatter Custom formatter for the DateTimeOffset type. Inheritance Object MinimalBaseFormatter < DateTimeOffset > DateTimeOffsetFormatter Implements IFormatter < DateTimeOffset > IFormatter Inherited Members MinimalBaseFormatter<DateTimeOffset>.IsValueType MinimalBaseFormatter<DateTimeOffset>.SerializedType MinimalBaseFormatter<DateTimeOffset>.Deserialize(IDataReader) MinimalBaseFormatter<DateTimeOffset>.Serialize(DateTimeOffset, IDataWriter) MinimalBaseFormatter<DateTimeOffset>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<DateTimeOffset>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<DateTimeOffset>.GetUninitializedObject() MinimalBaseFormatter<DateTimeOffset>.RegisterReferenceID(DateTimeOffset, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DateTimeOffsetFormatter : MinimalBaseFormatter<DateTimeOffset>, IFormatter<DateTimeOffset>, IFormatter Methods Read(ref DateTimeOffset, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref DateTimeOffset value, IDataReader reader) Parameters Type Name Description DateTimeOffset value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.DateTimeOffset>.Read(System.DateTimeOffset, TirUtilities.External.OdinSerializer.IDataReader) Write(ref DateTimeOffset, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref DateTimeOffset value, IDataWriter writer) Parameters Type Name Description DateTimeOffset value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.DateTimeOffset>.Write(System.DateTimeOffset, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.DebugContext.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DebugContext.html",
    "title": "Class DebugContext | TirUtilities",
    "keywords": "Class DebugContext Defines a context for debugging and logging during serialization and deserialization. This class is thread-safe. Inheritance Object DebugContext Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DebugContext Properties ErrorHandlingPolicy The error handling policy to use. Declaration public ErrorHandlingPolicy ErrorHandlingPolicy { get; set; } Property Value Type Description ErrorHandlingPolicy Logger The logger to use for logging messages. Declaration public ILogger Logger { get; set; } Property Value Type Description ILogger LoggingPolicy The logging policy to use. Declaration public LoggingPolicy LoggingPolicy { get; set; } Property Value Type Description LoggingPolicy Methods LogError(String) Log an error. Depending on the logging policy and error handling policy, this message may be suppressed or result in an exception being thrown. Declaration public void LogError(string message) Parameters Type Name Description String message LogException(Exception) Log an exception. Depending on the logging policy and error handling policy, this message may be suppressed or result in an exception being thrown. Declaration public void LogException(Exception exception) Parameters Type Name Description Exception exception LogWarning(String) Log a warning. Depending on the logging policy and error handling policy, this message may be suppressed or result in an exception being thrown. Declaration public void LogWarning(string message) Parameters Type Name Description String message ResetToDefault() Declaration public void ResetToDefault()"
  },
  "api/TirUtilities.External.OdinSerializer.DecimalSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DecimalSerializer.html",
    "title": "Class DecimalSerializer | TirUtilities",
    "keywords": "Class DecimalSerializer Serializer for the Decimal type. Inheritance Object Serializer Serializer < Decimal > DecimalSerializer Inherited Members Serializer<Decimal>.ReadValueWeak(IDataReader) Serializer<Decimal>.WriteValueWeak(String, Object, IDataWriter) Serializer<Decimal>.WriteValue(Decimal, IDataWriter) Serializer<Decimal>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DecimalSerializer : Serializer<decimal> Methods ReadValue(IDataReader) Reads a value of type Decimal . Declaration public override decimal ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Decimal The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Decimal>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Decimal, IDataWriter) Writes a value of type Decimal . Declaration public override void WriteValue(string name, decimal value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Decimal value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Decimal>.WriteValue(System.String, System.Decimal, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.DefaultLoggers.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DefaultLoggers.html",
    "title": "Class DefaultLoggers | TirUtilities",
    "keywords": "Class DefaultLoggers Defines default loggers for serialization and deserialization. This class and all of its loggers are thread safe. Inheritance Object DefaultLoggers Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class DefaultLoggers Properties DefaultLogger The default logger - usually this is UnityLogger . Declaration public static ILogger DefaultLogger { get; } Property Value Type Description ILogger UnityLogger Logs messages using Unity's class. Declaration public static ILogger UnityLogger { get; } Property Value Type Description ILogger"
  },
  "api/TirUtilities.External.OdinSerializer.DefaultSerializationBinder.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DefaultSerializationBinder.html",
    "title": "Class DefaultSerializationBinder | TirUtilities",
    "keywords": "Class DefaultSerializationBinder Provides a default, catch-all TwoWaySerializationBinder implementation. This binder only includes assembly names, without versions and tokens, in order to increase compatibility. Inheritance Object TwoWaySerializationBinder DefaultSerializationBinder Inherited Members TwoWaySerializationBinder.Default Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class DefaultSerializationBinder : TwoWaySerializationBinder Methods BindToName(Type, DebugContext) Bind a type to a name. Declaration public override string BindToName(Type type, DebugContext debugContext = null) Parameters Type Name Description Type type The type to bind. DebugContext debugContext The debug context to log to. Returns Type Description String The name that the type has been bound to. Overrides TwoWaySerializationBinder.BindToName(Type, DebugContext) Exceptions Type Condition ArgumentNullException The type argument is null. BindToType(String, DebugContext) Binds a name to type. Declaration public override Type BindToType(string typeName, DebugContext debugContext = null) Parameters Type Name Description String typeName The name of the type to bind. DebugContext debugContext The debug context to log to. Returns Type Description Type The type that the name has been bound to, or null if the type could not be resolved. Overrides TwoWaySerializationBinder.BindToType(String, DebugContext) Exceptions Type Condition ArgumentNullException The typeName argument is null. ContainsType(String) Determines whether the specified type name is mapped. Declaration public override bool ContainsType(string typeName) Parameters Type Name Description String typeName Returns Type Description Boolean Overrides TwoWaySerializationBinder.ContainsType(String) See Also TwoWaySerializationBinder BindTypeNameToTypeAttribute"
  },
  "api/TirUtilities.External.OdinSerializer.DelegateFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DelegateFormatter-1.html",
    "title": "Class DelegateFormatter<T> | TirUtilities",
    "keywords": "Class DelegateFormatter<T> Formatter for all delegate types. This formatter can handle anything but delegates for dynamic methods. Inheritance Object BaseFormatter <T> DelegateFormatter<T> Implements IFormatter <T> IFormatter Inherited Members BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DelegateFormatter<T> : BaseFormatter<T>, IFormatter<T>, IFormatter where T : class Type Parameters Name Description T Methods DeserializeImplementation(ref T, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value The uninitialized value to serialize into. This value will have been created earlier using OdinSerializer.BaseFormatter`1.GetUninitializedObject . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.DeserializeImplementation(T, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Get an uninitialized object of type . WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins. You will have to call OdinSerializer.BaseFormatter`1.RegisterReferenceID(`0,OdinSerializer.IDataReader) and OdinSerializer.BaseFormatter`1.InvokeOnDeserializingCallbacks(`0,OdinSerializer.DeserializationContext) immediately after creating the object yourself during deserialization. Declaration protected override T GetUninitializedObject() Returns Type Description T An uninitialized object of type . Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.GetUninitializedObject() SerializeImplementation(ref T, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.SerializeImplementation(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.DeserializationContext.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DeserializationContext.html",
    "title": "Class DeserializationContext | TirUtilities",
    "keywords": "Class DeserializationContext The context of a given deserialization session. This class maintains all internal and external references during deserialization. Inheritance Object DeserializationContext Implements ICacheNotificationReceiver Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DeserializationContext : ICacheNotificationReceiver Constructors DeserializationContext() Initializes a new instance of the DeserializationContext class. Declaration public DeserializationContext() DeserializationContext(FormatterConverter) Initializes a new instance of the DeserializationContext class. Declaration public DeserializationContext(FormatterConverter formatterConverter) Parameters Type Name Description FormatterConverter formatterConverter The formatter converter to use. DeserializationContext(StreamingContext) Initializes a new instance of the DeserializationContext class. Declaration public DeserializationContext(StreamingContext context) Parameters Type Name Description StreamingContext context The streaming context to use. DeserializationContext(StreamingContext, FormatterConverter) Initializes a new instance of the DeserializationContext class. Declaration public DeserializationContext(StreamingContext context, FormatterConverter formatterConverter) Parameters Type Name Description StreamingContext context The streaming context to use. FormatterConverter formatterConverter The formatter converter to use. Exceptions Type Condition ArgumentNullException The formatterConverter parameter is null. Properties Binder Gets or sets the context's type binder. Declaration public TwoWaySerializationBinder Binder { get; set; } Property Value Type Description TwoWaySerializationBinder The context's serialization binder. Config Gets or sets the serialization configuration. Declaration public SerializationConfig Config { get; set; } Property Value Type Description SerializationConfig The serialization configuration. FormatterConverter Gets the formatter converter. Declaration public IFormatterConverter FormatterConverter { get; } Property Value Type Description IFormatterConverter The formatter converter. GuidReferenceResolver Gets or sets the Guid reference resolver. Declaration public IExternalGuidReferenceResolver GuidReferenceResolver { get; set; } Property Value Type Description IExternalGuidReferenceResolver The Guid reference resolver. IndexReferenceResolver Gets or sets the index reference resolver. Declaration public IExternalIndexReferenceResolver IndexReferenceResolver { get; set; } Property Value Type Description IExternalIndexReferenceResolver The index reference resolver. StreamingContext Gets the streaming context. Declaration public StreamingContext StreamingContext { get; } Property Value Type Description StreamingContext The streaming context. StringReferenceResolver Gets or sets the string reference resolver. Declaration public IExternalStringReferenceResolver StringReferenceResolver { get; set; } Property Value Type Description IExternalStringReferenceResolver The string reference resolver. Methods GetExternalObject(Guid) Gets an external object reference by guid, or null if the guid could not be resolved. Declaration public object GetExternalObject(Guid guid) Parameters Type Name Description Guid guid The guid to resolve. Returns Type Description Object An external object reference by the given guid, or null if the guid could not be resolved. GetExternalObject(Int32) Gets an external object reference by index, or null if the index could not be resolved. Declaration public object GetExternalObject(int index) Parameters Type Name Description Int32 index The index to resolve. Returns Type Description Object An external object reference by the given index, or null if the index could not be resolved. GetExternalObject(String) Gets an external object reference by an id string, or null if the id string could not be resolved. Declaration public object GetExternalObject(string id) Parameters Type Name Description String id The id string to resolve. Returns Type Description Object An external object reference by an id string, or null if the id string could not be resolved. GetInternalReference(Int32) Gets an internal reference from a given id, or null if the id has not been registered. Declaration public object GetInternalReference(int id) Parameters Type Name Description Int32 id The id of the reference to get. Returns Type Description Object An internal reference from a given id, or null if the id has not been registered. RegisterInternalReference(Int32, Object) Registers an internal reference to a given id. Declaration public void RegisterInternalReference(int id, object reference) Parameters Type Name Description Int32 id The id to register the reference with. Object reference The reference to register. Reset() Resets the deserialization context completely to baseline status, as if its constructor has just been called. This allows complete reuse of a deserialization context, with all of its internal reference buffers. Declaration public void Reset() Explicit Interface Implementations ICacheNotificationReceiver.OnClaimed() Declaration void ICacheNotificationReceiver.OnClaimed() ICacheNotificationReceiver.OnFreed() Declaration void ICacheNotificationReceiver.OnFreed() Implements ICacheNotificationReceiver See Also ICacheNotificationReceiver"
  },
  "api/TirUtilities.External.OdinSerializer.DictionaryFormatter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DictionaryFormatter-2.html",
    "title": "Class DictionaryFormatter<TKey, TValue> | TirUtilities",
    "keywords": "Class DictionaryFormatter<TKey, TValue> Custom generic formatter for the generic type definition Dictionary<TKey,TValue> . Inheritance Object BaseFormatter < Dictionary <TKey, TValue>> DictionaryFormatter<TKey, TValue> Implements IFormatter < Dictionary <TKey, TValue>> IFormatter Inherited Members BaseFormatter<Dictionary<TKey, TValue>>.OnSerializingCallbacks BaseFormatter<Dictionary<TKey, TValue>>.OnSerializedCallbacks BaseFormatter<Dictionary<TKey, TValue>>.OnDeserializingCallbacks BaseFormatter<Dictionary<TKey, TValue>>.OnDeserializedCallbacks BaseFormatter<Dictionary<TKey, TValue>>.IsValueType BaseFormatter<Dictionary<TKey, TValue>>.ImplementsISerializationCallbackReceiver BaseFormatter<Dictionary<TKey, TValue>>.ImplementsIDeserializationCallback BaseFormatter<Dictionary<TKey, TValue>>.ImplementsIObjectReference BaseFormatter<Dictionary<TKey, TValue>>.SerializedType BaseFormatter<Dictionary<TKey, TValue>>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<Dictionary<TKey, TValue>>.IFormatter.Deserialize(IDataReader) BaseFormatter<Dictionary<TKey, TValue>>.Deserialize(IDataReader) BaseFormatter<Dictionary<TKey, TValue>>.Serialize(Dictionary<TKey, TValue>, IDataWriter) BaseFormatter<Dictionary<TKey, TValue>>.GetUninitializedObject() BaseFormatter<Dictionary<TKey, TValue>>.RegisterReferenceID(Dictionary<TKey, TValue>, IDataReader) BaseFormatter<Dictionary<TKey, TValue>>.InvokeOnDeserializingCallbacks(Dictionary<TKey, TValue>, DeserializationContext) BaseFormatter<Dictionary<TKey, TValue>>.InvokeOnDeserializingCallbacks(Dictionary<TKey, TValue>, DeserializationContext) BaseFormatter<Dictionary<TKey, TValue>>.DeserializeImplementation(Dictionary<TKey, TValue>, IDataReader) BaseFormatter<Dictionary<TKey, TValue>>.SerializeImplementation(Dictionary<TKey, TValue>, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DictionaryFormatter<TKey, TValue> : BaseFormatter<Dictionary<TKey, TValue>>, IFormatter<Dictionary<TKey, TValue>>, IFormatter Type Parameters Name Description TKey The type of the dictionary key. TValue The type of the dictionary value. Constructors DictionaryFormatter() Creates a new instance of DictionaryFormatter<TKey, TValue> . Declaration public DictionaryFormatter() Methods DeserializeImplementation(ref Dictionary<TKey, TValue>, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref Dictionary<TKey, TValue> value, IDataReader reader) Parameters Type Name Description Dictionary <TKey, TValue> value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.Dictionary<TKey, TValue>>.DeserializeImplementation(System.Collections.Generic.Dictionary<TKey, TValue>, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override Dictionary<TKey, TValue> GetUninitializedObject() Returns Type Description Dictionary <TKey, TValue> A value of null. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.Dictionary<TKey, TValue>>.GetUninitializedObject() SerializeImplementation(ref Dictionary<TKey, TValue>, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref Dictionary<TKey, TValue> value, IDataWriter writer) Parameters Type Name Description Dictionary <TKey, TValue> value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.Dictionary<TKey, TValue>>.SerializeImplementation(System.Collections.Generic.Dictionary<TKey, TValue>, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.DictionaryKeyUtility.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DictionaryKeyUtility.html",
    "title": "Class DictionaryKeyUtility | TirUtilities",
    "keywords": "Class DictionaryKeyUtility Provides utility methods for handling dictionary keys in the prefab modification system. Inheritance Object DictionaryKeyUtility Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class DictionaryKeyUtility Methods GetDictionaryKeyString(Object) Not yet documented. Declaration public static string GetDictionaryKeyString(object key) Parameters Type Name Description Object key Returns Type Description String GetDictionaryKeyValue(String, Type) Not yet documented. Declaration public static object GetDictionaryKeyValue(string keyStr, Type expectedType) Parameters Type Name Description String keyStr Type expectedType Returns Type Description Object GetPersistentPathKeyTypes() Not yet documented. Declaration public static IEnumerable<Type> GetPersistentPathKeyTypes() Returns Type Description IEnumerable < Type > KeyTypeSupportsPersistentPaths(Type) Not yet documented. Declaration public static bool KeyTypeSupportsPersistentPaths(Type type) Parameters Type Name Description Type type Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.DictionaryKeyUtility.KeyComparer-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DictionaryKeyUtility.KeyComparer-1.html",
    "title": "Class DictionaryKeyUtility.KeyComparer<T> | TirUtilities",
    "keywords": "Class DictionaryKeyUtility.KeyComparer<T> A smart comparer for dictionary keys, that uses the most appropriate available comparison method for the given key types. Inheritance Object DictionaryKeyUtility.KeyComparer<T> Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class KeyComparer<T> : IComparer<T> Type Parameters Name Description T Constructors KeyComparer() Declaration public KeyComparer() Fields Default Declaration public static readonly DictionaryKeyUtility.KeyComparer<T> Default Field Value Type Description DictionaryKeyUtility.KeyComparer <T> Methods Compare(T, T) Not yet documented. Declaration public int Compare(T x, T y) Parameters Type Name Description T x Not yet documented. T y Not yet documented. Returns Type Description Int32 Not yet documented."
  },
  "api/TirUtilities.External.OdinSerializer.DoubleLookupDictionaryFormatter-3.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DoubleLookupDictionaryFormatter-3.html",
    "title": "Class DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> | TirUtilities",
    "keywords": "Class DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> Custom Odin serialization formatter for DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> . Inheritance Object BaseFormatter < DoubleLookupDictionary <TPrimary, TSecondary, TValue>> DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> Implements IFormatter < DoubleLookupDictionary <TPrimary, TSecondary, TValue>> IFormatter Inherited Members BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.OnSerializingCallbacks BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.OnSerializedCallbacks BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.OnDeserializingCallbacks BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.OnDeserializedCallbacks BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.IsValueType BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.ImplementsISerializationCallbackReceiver BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.ImplementsIDeserializationCallback BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.ImplementsIObjectReference BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.SerializedType BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.IFormatter.Deserialize(IDataReader) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.Deserialize(IDataReader) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.Serialize(DoubleLookupDictionary<TPrimary, TSecondary, TValue>, IDataWriter) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.GetUninitializedObject() BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.RegisterReferenceID(DoubleLookupDictionary<TPrimary, TSecondary, TValue>, IDataReader) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.InvokeOnDeserializingCallbacks(DoubleLookupDictionary<TPrimary, TSecondary, TValue>, DeserializationContext) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.InvokeOnDeserializingCallbacks(DoubleLookupDictionary<TPrimary, TSecondary, TValue>, DeserializationContext) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.DeserializeImplementation(DoubleLookupDictionary<TPrimary, TSecondary, TValue>, IDataReader) BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.SerializeImplementation(DoubleLookupDictionary<TPrimary, TSecondary, TValue>, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> : BaseFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>, IFormatter<DoubleLookupDictionary<TPrimary, TSecondary, TValue>>, IFormatter Type Parameters Name Description TPrimary Type of primary key. TSecondary Type of secondary key. TValue Type of value. Constructors DoubleLookupDictionaryFormatter() Creates a new instance of DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> . Declaration public DoubleLookupDictionaryFormatter() Methods DeserializeImplementation(ref DoubleLookupDictionary<TPrimary, TSecondary, TValue>, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref DoubleLookupDictionary<TPrimary, TSecondary, TValue> value, IDataReader reader) Parameters Type Name Description DoubleLookupDictionary <TPrimary, TSecondary, TValue> value The uninitialized value to serialize into. This value will have been created earlier using OdinSerializer.BaseFormatter`1.GetUninitializedObject . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.DeserializeImplementation(TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary<TPrimary, TSecondary, TValue>, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override DoubleLookupDictionary<TPrimary, TSecondary, TValue> GetUninitializedObject() Returns Type Description DoubleLookupDictionary <TPrimary, TSecondary, TValue> Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.GetUninitializedObject() SerializeImplementation(ref DoubleLookupDictionary<TPrimary, TSecondary, TValue>, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref DoubleLookupDictionary<TPrimary, TSecondary, TValue> value, IDataWriter writer) Parameters Type Name Description DoubleLookupDictionary <TPrimary, TSecondary, TValue> value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary<TPrimary, TSecondary, TValue>>.SerializeImplementation(TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary<TPrimary, TSecondary, TValue>, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.DoubleSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.DoubleSerializer.html",
    "title": "Class DoubleSerializer | TirUtilities",
    "keywords": "Class DoubleSerializer Serializer for the Double type. Inheritance Object Serializer Serializer < Double > DoubleSerializer Inherited Members Serializer<Double>.ReadValueWeak(IDataReader) Serializer<Double>.WriteValueWeak(String, Object, IDataWriter) Serializer<Double>.WriteValue(Double, IDataWriter) Serializer<Double>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class DoubleSerializer : Serializer<double> Methods ReadValue(IDataReader) Reads a value of type Double . Declaration public override double ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Double The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Double>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Double, IDataWriter) Writes a value of type Double . Declaration public override void WriteValue(string name, double value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Double value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Double>.WriteValue(System.String, System.Double, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.EasyBaseFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.EasyBaseFormatter-1.html",
    "title": "Class EasyBaseFormatter<T> | TirUtilities",
    "keywords": "Class EasyBaseFormatter<T> Provides an easy way of implementing custom formatters. Inheritance Object BaseFormatter <T> EasyBaseFormatter<T> EmptyTypeFormatter<T> FormatterEmitter.AOTEmittedFormatter<T> Implements IFormatter <T> IFormatter Inherited Members BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class EasyBaseFormatter<T> : BaseFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T The type which can be serialized and deserialized by the formatter. Methods DeserializeImplementation(ref T, IDataReader) Reads through all entries in the current node one at a time, and calls for each entry. Declaration protected sealed override void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.DeserializeImplementation(T, TirUtilities.External.OdinSerializer.IDataReader) ReadDataEntry(ref T, String, EntryType, IDataReader) Reads a data entry into the value denoted by the entry name. Declaration protected abstract void ReadDataEntry(ref T value, string entryName, EntryType entryType, IDataReader reader) Parameters Type Name Description T value The value to read into. String entryName The name of the entry. EntryType entryType The type of the entry. IDataReader reader The reader currently used for deserialization. SerializeImplementation(ref T, IDataWriter) Calls WriteDataEntries(ref T, IDataWriter) directly. Declaration protected sealed override void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.SerializeImplementation(T, TirUtilities.External.OdinSerializer.IDataWriter) WriteDataEntries(ref T, IDataWriter) Write the serialized values of a value of type . Declaration protected abstract void WriteDataEntries(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer currently used for serialization. Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.EmittedAssemblyAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.EmittedAssemblyAttribute.html",
    "title": "Class EmittedAssemblyAttribute | TirUtilities",
    "keywords": "Class EmittedAssemblyAttribute Inheritance Object Attribute EmittedAssemblyAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false)] public sealed class EmittedAssemblyAttribute : Attribute, _Attribute Constructors EmittedAssemblyAttribute() Declaration [Obsolete(\"This attribute cannot be used in code, and is only meant to be applied to dynamically emitted assemblies.\", true)] public EmittedAssemblyAttribute()"
  },
  "api/TirUtilities.External.OdinSerializer.EmittedFormatterAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.EmittedFormatterAttribute.html",
    "title": "Class EmittedFormatterAttribute | TirUtilities",
    "keywords": "Class EmittedFormatterAttribute Indicates that this formatter type has been emitted. Never put this on a type! Inheritance Object Attribute EmittedFormatterAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Class)] public class EmittedFormatterAttribute : Attribute, _Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.EmptyTypeFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.EmptyTypeFormatter-1.html",
    "title": "Class EmptyTypeFormatter<T> | TirUtilities",
    "keywords": "Class EmptyTypeFormatter<T> A formatter for empty types. It writes no data, and skips all data that is to be read, deserializing a \"default\" value. Inheritance Object BaseFormatter <T> EasyBaseFormatter <T> EmptyTypeFormatter<T> Implements IFormatter <T> IFormatter Inherited Members EasyBaseFormatter<T>.DeserializeImplementation(T, IDataReader) EasyBaseFormatter<T>.SerializeImplementation(T, IDataWriter) BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class EmptyTypeFormatter<T> : EasyBaseFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T Methods ReadDataEntry(ref T, String, EntryType, IDataReader) Skips the entry to read. Declaration protected override void ReadDataEntry(ref T value, string entryName, EntryType entryType, IDataReader reader) Parameters Type Name Description T value String entryName EntryType entryType IDataReader reader Overrides TirUtilities.External.OdinSerializer.EasyBaseFormatter<T>.ReadDataEntry(T, System.String, TirUtilities.External.OdinSerializer.EntryType, TirUtilities.External.OdinSerializer.IDataReader) WriteDataEntries(ref T, IDataWriter) Does nothing at all. Declaration protected override void WriteDataEntries(ref T value, IDataWriter writer) Parameters Type Name Description T value IDataWriter writer Overrides TirUtilities.External.OdinSerializer.EasyBaseFormatter<T>.WriteDataEntries(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.EntryType.html": {
    "href": "api/TirUtilities.External.OdinSerializer.EntryType.html",
    "title": "Enum EntryType | TirUtilities",
    "keywords": "Enum EntryType An entry type which is part of a stream being read by a IDataReader . Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum EntryType : byte Fields Name Description Boolean Entry is a primitive boolean value. EndOfArray Entry marks the end of an array. EndOfNode Entry marks the end of a node, IE, a complex type that contains values of its own. EndOfStream Entry indicating that the reader has reached the end of the data stream. ExternalReferenceByGuid Entry contains the guid of an external object in the DeserializationContext. ExternalReferenceByIndex Entry contains the index of an external object in the DeserializationContext. ExternalReferenceByString Entry contains the string id of an external object in the DeserializationContext. FloatingPoint Entry is a primitive value of type float, double or decimal. Guid Entry is a primitive value of type guid. Integer Entry is a primitive value of type sbyte, byte, short, ushort, int, uint, long or ulong. InternalReference Entry contains an ID that is a reference to a node defined previously in the stream. Invalid Could not parse entry. Null Entry is a null value. PrimitiveArray Entry marks a primitive array. StartOfArray Entry marks the start of an array. StartOfNode Entry marks the start of a node, IE, a complex type that contains values of its own. String Entry is a primitive value of type string or char."
  },
  "api/TirUtilities.External.OdinSerializer.EnumSerializer-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.EnumSerializer-1.html",
    "title": "Class EnumSerializer<T> | TirUtilities",
    "keywords": "Class EnumSerializer<T> Serializer for all enums. Inheritance Object Serializer Serializer <T> EnumSerializer<T> Inherited Members Serializer<T>.ReadValueWeak(IDataReader) Serializer<T>.WriteValueWeak(String, Object, IDataWriter) Serializer<T>.WriteValue(T, IDataWriter) Serializer<T>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class EnumSerializer<T> : Serializer<T> Type Parameters Name Description T The type of the enum to serialize and deserialize. Methods ReadValue(IDataReader) Reads an enum value of type . Declaration public override T ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<T>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, T, IDataWriter) Writes an enum value of type . Declaration public override void WriteValue(string name, T value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. T value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<T>.WriteValue(System.String, T, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ErrorHandlingPolicy.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ErrorHandlingPolicy.html",
    "title": "Enum ErrorHandlingPolicy | TirUtilities",
    "keywords": "Enum ErrorHandlingPolicy The policy for handling errors during serialization and deserialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum ErrorHandlingPolicy Fields Name Description Resilient Attempts will be made to recover from errors and continue serialization. Data may become invalid. ThrowOnErrors Exceptions will be thrown when errors are logged. ThrowOnWarningsAndErrors Exceptions will be thrown when warnings or errors are logged."
  },
  "api/TirUtilities.External.OdinSerializer.ExcludeDataFromInspectorAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ExcludeDataFromInspectorAttribute.html",
    "title": "Class ExcludeDataFromInspectorAttribute | TirUtilities",
    "keywords": "Class ExcludeDataFromInspectorAttribute Causes Odin's inspector to completely ignore a given member, preventing it from even being included in an Odin PropertyTree, and such will not cause any performance hits in the inspector. Note that Odin can still serialize an excluded member - it is merely ignored in the inspector itself. Inheritance Object Attribute ExcludeDataFromInspectorAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = true)] [Obsolete(\"Use [HideInInspector] instead - it now also excludes the member completely from becoming a property in the property tree.\", false)] public sealed class ExcludeDataFromInspectorAttribute : Attribute, _Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.FormatterEmitter.AOTEmittedFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.FormatterEmitter.AOTEmittedFormatter-1.html",
    "title": "Class FormatterEmitter.AOTEmittedFormatter<T> | TirUtilities",
    "keywords": "Class FormatterEmitter.AOTEmittedFormatter<T> Base type for all AOT-emitted formatters. Inheritance Object BaseFormatter <T> EasyBaseFormatter <T> FormatterEmitter.AOTEmittedFormatter<T> FormatterEmitter.EmptyAOTEmittedFormatter<T> Implements IFormatter <T> IFormatter Inherited Members EasyBaseFormatter<T>.DeserializeImplementation(T, IDataReader) EasyBaseFormatter<T>.SerializeImplementation(T, IDataWriter) EasyBaseFormatter<T>.ReadDataEntry(T, String, EntryType, IDataReader) EasyBaseFormatter<T>.WriteDataEntries(T, IDataWriter) BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class AOTEmittedFormatter<T> : EasyBaseFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.FormatterEmitter.EmptyAOTEmittedFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.FormatterEmitter.EmptyAOTEmittedFormatter-1.html",
    "title": "Class FormatterEmitter.EmptyAOTEmittedFormatter<T> | TirUtilities",
    "keywords": "Class FormatterEmitter.EmptyAOTEmittedFormatter<T> Shortcut class that makes it easier to emit empty AOT formatters. Inheritance Object BaseFormatter <T> EasyBaseFormatter <T> FormatterEmitter.AOTEmittedFormatter <T> FormatterEmitter.EmptyAOTEmittedFormatter<T> Implements IFormatter <T> IFormatter Inherited Members EasyBaseFormatter<T>.DeserializeImplementation(T, IDataReader) EasyBaseFormatter<T>.SerializeImplementation(T, IDataWriter) BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class EmptyAOTEmittedFormatter<T> : FormatterEmitter.AOTEmittedFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T Methods ReadDataEntry(ref T, String, EntryType, IDataReader) Skips the entry to read. Declaration protected override void ReadDataEntry(ref T value, string entryName, EntryType entryType, IDataReader reader) Parameters Type Name Description T value String entryName EntryType entryType IDataReader reader Overrides TirUtilities.External.OdinSerializer.EasyBaseFormatter<T>.ReadDataEntry(T, System.String, TirUtilities.External.OdinSerializer.EntryType, TirUtilities.External.OdinSerializer.IDataReader) WriteDataEntries(ref T, IDataWriter) Does nothing at all. Declaration protected override void WriteDataEntries(ref T value, IDataWriter writer) Parameters Type Name Description T value IDataWriter writer Overrides TirUtilities.External.OdinSerializer.EasyBaseFormatter<T>.WriteDataEntries(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.FormatterEmitter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.FormatterEmitter.html",
    "title": "Class FormatterEmitter | TirUtilities",
    "keywords": "Class FormatterEmitter Utility class for emitting formatters using the System.Reflection.Emit namespace. NOTE: Some platforms do not support emitting. Check whether you can emit on the current platform using CanEmit . Inheritance Object FormatterEmitter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class FormatterEmitter Fields PRE_EMITTED_ASSEMBLY_NAME The name of the pre-generated assembly that contains pre-emitted formatters for use on AOT platforms where emitting is not supported. Note that this assembly is not always present. Declaration public const string PRE_EMITTED_ASSEMBLY_NAME = \"OdinSerializer.AOTGenerated\" Field Value Type Description String RUNTIME_EMITTED_ASSEMBLY_NAME The name of the runtime-generated assembly that contains runtime-emitted formatters for use on non-AOT platforms where emitting is supported. Note that this assembly is not always present. Declaration public const string RUNTIME_EMITTED_ASSEMBLY_NAME = \"OdinSerializer.RuntimeEmitted\" Field Value Type Description String Methods GetEmittedFormatter(Type, ISerializationPolicy) Gets an emitted formatter for a given type. NOTE: Some platforms do not support emitting. On such platforms, this method logs an error and returns null. Check whether you can emit on the current platform using CanEmit . Declaration public static IFormatter GetEmittedFormatter(Type type, ISerializationPolicy policy) Parameters Type Name Description Type type The type to emit a formatter for. ISerializationPolicy policy The serialization policy to use to determine which members the emitted formatter should serialize. If null, Strict is used. Returns Type Description IFormatter The type of the emitted formatter. Exceptions Type Condition ArgumentNullException The type argument is null."
  },
  "api/TirUtilities.External.OdinSerializer.FormatterLocationStep.html": {
    "href": "api/TirUtilities.External.OdinSerializer.FormatterLocationStep.html",
    "title": "Enum FormatterLocationStep | TirUtilities",
    "keywords": "Enum FormatterLocationStep Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum FormatterLocationStep Fields Name Description AfterRegisteredFormatters BeforeRegisteredFormatters"
  },
  "api/TirUtilities.External.OdinSerializer.FormatterLocator.html": {
    "href": "api/TirUtilities.External.OdinSerializer.FormatterLocator.html",
    "title": "Class FormatterLocator | TirUtilities",
    "keywords": "Class FormatterLocator Utility class for locating and caching formatters for all non-primitive types. Inheritance Object FormatterLocator Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class FormatterLocator Methods GetFormatter(Type, ISerializationPolicy) Gets a formatter for a given type. Declaration public static IFormatter GetFormatter(Type type, ISerializationPolicy policy) Parameters Type Name Description Type type The type to get a formatter for. ISerializationPolicy policy The serialization policy to use if a formatter has to be emitted. If null, Strict is used. Returns Type Description IFormatter A formatter for the given type. Exceptions Type Condition ArgumentNullException The type argument is null. GetFormatter<T>(ISerializationPolicy) Gets a formatter for the type . Declaration public static IFormatter<T> GetFormatter<T>(ISerializationPolicy policy) Parameters Type Name Description ISerializationPolicy policy The serialization policy to use if a formatter has to be emitted. If null, Strict is used. Returns Type Description IFormatter <T> A formatter for the type . Type Parameters Name Description T The type to get a formatter for. Events FormatterResolve This event is invoked before everything else when a formatter is being resolved for a given type. If any invoked delegate returns a valid formatter, that formatter is used and the resolve process stops there. This can be used to hook into and extend the serialization system's formatter resolution logic. Declaration [Obsolete(\"Use the new IFormatterLocator interface instead, and register your custom locator with the RegisterFormatterLocator assembly attribute.\", true)] public static event Func<Type, IFormatter> FormatterResolve Event Type Type Description Func < Type , IFormatter >"
  },
  "api/TirUtilities.External.OdinSerializer.FormatterUtilities.html": {
    "href": "api/TirUtilities.External.OdinSerializer.FormatterUtilities.html",
    "title": "Class FormatterUtilities | TirUtilities",
    "keywords": "Class FormatterUtilities Provides an array of utility methods which are commonly used by serialization formatters. Inheritance Object FormatterUtilities Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class FormatterUtilities Methods CreateUnityNull(Type, Type) Creates a fake Unity null value of a given type, for the given -derived owning type. Unity uses these kinds of values to indicate missing object references. Declaration public static UnityEngine.Object CreateUnityNull(Type nullType, Type owningType) Parameters Type Name Description Type nullType Type of the null value. Type owningType Type of the owning value. This is the value which changes the which you get. Returns Type Description UnityEngine.Object A fake Unity null value of a given type. Exceptions Type Condition ArgumentNullException The nullType or owningType parameter is null. ArgumentException The type given in the nullType parameter is not a Unity object. or The type given in the owningType parameter is not a Unity object. GetContainedType(MemberInfo) Gets the type contained in the given MemberInfo . Currently only FieldInfo and PropertyInfo is supported. Declaration public static Type GetContainedType(MemberInfo member) Parameters Type Name Description MemberInfo member The MemberInfo to get the contained type of. Returns Type Description Type The type contained in the given MemberInfo . Exceptions Type Condition ArgumentException Can't get the contained type of the given MemberInfo type. GetMemberValue(MemberInfo, Object) Gets the value contained in a given MemberInfo . Currently only FieldInfo and PropertyInfo is supported. Declaration public static object GetMemberValue(MemberInfo member, object obj) Parameters Type Name Description MemberInfo member The MemberInfo to get the value of. Object obj The instance to get the value from. Returns Type Description Object The value contained in the given MemberInfo . Exceptions Type Condition ArgumentException Can't get the value of the given MemberInfo type. GetPrivateMemberAlias(MemberInfo, String, String) Gets an aliased version of a member, with the declaring type name included in the member name, so that there are no conflicts with private fields and properties with the same name in different classes in the same inheritance hierarchy. Declaration public static MemberInfo GetPrivateMemberAlias(MemberInfo member, string prefixString = null, string separatorString = null) Parameters Type Name Description MemberInfo member String prefixString String separatorString Returns Type Description MemberInfo GetSerializableMembers(Type, ISerializationPolicy) Gets an array of all serializable members on the given type. Declaration public static MemberInfo[] GetSerializableMembers(Type type, ISerializationPolicy policy) Parameters Type Name Description Type type The type to get serializable members for. ISerializationPolicy policy The serialization policy to use. If null, Strict is used. Returns Type Description MemberInfo [] An array of all serializable members on the given type. GetSerializableMembersMap(Type, ISerializationPolicy) Gets a map of all serializable members on the given type. This will also properly map names extracted from and PreviouslySerializedAsAttribute to their corresponding members. Declaration public static Dictionary<string, MemberInfo> GetSerializableMembersMap(Type type, ISerializationPolicy policy) Parameters Type Name Description Type type The type to get a map for. ISerializationPolicy policy The serialization policy to use. If null, Strict is used. Returns Type Description Dictionary < String , MemberInfo > A map of all serializable members on the given type. IsPrimitiveArrayType(Type) Determines whether a given type is a primitive array type. Namely, arrays with primitive array types as elements are primitive arrays. The following types are primitive array types: Char , SByte , Int16 , Int32 , Int64 , Byte , UInt16 , UInt32 , UInt64 , Decimal , Boolean , Single , Double and Guid . Declaration public static bool IsPrimitiveArrayType(Type type) Parameters Type Name Description Type type The type to check. Returns Type Description Boolean true if the given type is a primitive array type; otherwise, false . IsPrimitiveType(Type) Determines whether a given type is a primitive type to the serialization system. The following criteria are checked: type.IsPrimitive or type.IsEnum, or type is a Decimal , String or Guid . Declaration public static bool IsPrimitiveType(Type type) Parameters Type Name Description Type type The type to check. Returns Type Description Boolean true if the given type is a primitive type; otherwise, false . SetMemberValue(MemberInfo, Object, Object) Sets the value of a given MemberInfo. Currently only FieldInfo and PropertyInfo is supported. Declaration public static void SetMemberValue(MemberInfo member, object obj, object value) Parameters Type Name Description MemberInfo member The MemberInfo to set the value of. Object obj The object to set the value on. Object value The value to set. Exceptions Type Condition ArgumentException Property has no setter or Can't set the value of the given MemberInfo type."
  },
  "api/TirUtilities.External.OdinSerializer.GenericCollectionFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GenericCollectionFormatter.html",
    "title": "Class GenericCollectionFormatter | TirUtilities",
    "keywords": "Class GenericCollectionFormatter Utility class for the GenericCollectionFormatter<TCollection, TElement> class. Inheritance Object GenericCollectionFormatter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class GenericCollectionFormatter Methods CanFormat(Type, out Type) Determines whether the specified type can be formatted by a GenericCollectionFormatter<TCollection, TElement> . The following criteria are checked: type implements ICollection<T> , type is not abstract, type is not a generic type definition, type is not an interface, type has a public parameterless constructor. Declaration public static bool CanFormat(Type type, out Type elementType) Parameters Type Name Description Type type The collection type to check. Type elementType The element type of the collection. Returns Type Description Boolean true if the type can be formatted by a GenericCollectionFormatter<TCollection, TElement> , otherwise false Exceptions Type Condition ArgumentNullException The type argument is null."
  },
  "api/TirUtilities.External.OdinSerializer.GenericCollectionFormatter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GenericCollectionFormatter-2.html",
    "title": "Class GenericCollectionFormatter<TCollection, TElement> | TirUtilities",
    "keywords": "Class GenericCollectionFormatter<TCollection, TElement> Formatter for all eligible types that implement the interface ICollection<T> , and which have no other formatters specified. Eligibility for formatting by this class is determined by the CanFormat(Type, out Type) method. Inheritance Object BaseFormatter <TCollection> GenericCollectionFormatter<TCollection, TElement> Implements IFormatter <TCollection> IFormatter Inherited Members BaseFormatter<TCollection>.OnSerializingCallbacks BaseFormatter<TCollection>.OnSerializedCallbacks BaseFormatter<TCollection>.OnDeserializingCallbacks BaseFormatter<TCollection>.OnDeserializedCallbacks BaseFormatter<TCollection>.IsValueType BaseFormatter<TCollection>.ImplementsISerializationCallbackReceiver BaseFormatter<TCollection>.ImplementsIDeserializationCallback BaseFormatter<TCollection>.ImplementsIObjectReference BaseFormatter<TCollection>.SerializedType BaseFormatter<TCollection>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<TCollection>.IFormatter.Deserialize(IDataReader) BaseFormatter<TCollection>.Deserialize(IDataReader) BaseFormatter<TCollection>.Serialize(TCollection, IDataWriter) BaseFormatter<TCollection>.RegisterReferenceID(TCollection, IDataReader) BaseFormatter<TCollection>.InvokeOnDeserializingCallbacks(TCollection, DeserializationContext) BaseFormatter<TCollection>.InvokeOnDeserializingCallbacks(TCollection, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class GenericCollectionFormatter<TCollection, TElement> : BaseFormatter<TCollection>, IFormatter<TCollection>, IFormatter where TCollection : ICollection<TElement>, new() Type Parameters Name Description TCollection The type of the collection. TElement The type of the element. Constructors GenericCollectionFormatter() Creates a new instance of GenericCollectionFormatter<TCollection, TElement> . Declaration public GenericCollectionFormatter() Methods DeserializeImplementation(ref TCollection, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref TCollection value, IDataReader reader) Parameters Type Name Description TCollection value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TCollection>.DeserializeImplementation(TCollection, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Gets a new object of type . Declaration protected override TCollection GetUninitializedObject() Returns Type Description TCollection A new object of type . Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TCollection>.GetUninitializedObject() SerializeImplementation(ref TCollection, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref TCollection value, IDataWriter writer) Parameters Type Name Description TCollection value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TCollection>.SerializeImplementation(TCollection, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.GlobalSerializationConfig.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GlobalSerializationConfig.html",
    "title": "Class GlobalSerializationConfig | TirUtilities",
    "keywords": "Class GlobalSerializationConfig Contains global configuration options for the serialization system. Inheritance Object GlobalSerializationConfig Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class GlobalSerializationConfig Properties BuildSerializationFormat Gets the build serialization format. Declaration public DataFormat BuildSerializationFormat { get; } Property Value Type Description DataFormat EditorSerializationFormat Gets the editor serialization format. Declaration public DataFormat EditorSerializationFormat { get; } Property Value Type Description DataFormat ErrorHandlingPolicy Gets the error handling policy. Declaration public ErrorHandlingPolicy ErrorHandlingPolicy { get; } Property Value Type Description ErrorHandlingPolicy Instance Gets the global configuration instance. Declaration public static GlobalSerializationConfig Instance { get; } Property Value Type Description GlobalSerializationConfig Logger Gets the logger. Declaration public ILogger Logger { get; } Property Value Type Description ILogger LoggingPolicy Gets the logging policy. Declaration public LoggingPolicy LoggingPolicy { get; } Property Value Type Description LoggingPolicy"
  },
  "api/TirUtilities.External.OdinSerializer.GradientAlphaKeyFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GradientAlphaKeyFormatter.html",
    "title": "Class GradientAlphaKeyFormatter | TirUtilities",
    "keywords": "Class GradientAlphaKeyFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < GradientAlphaKey > GradientAlphaKeyFormatter Implements IFormatter < GradientAlphaKey > IFormatter Inherited Members MinimalBaseFormatter<GradientAlphaKey>.IsValueType MinimalBaseFormatter<GradientAlphaKey>.SerializedType MinimalBaseFormatter<GradientAlphaKey>.Deserialize(IDataReader) MinimalBaseFormatter<GradientAlphaKey>.Serialize(GradientAlphaKey, IDataWriter) MinimalBaseFormatter<GradientAlphaKey>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<GradientAlphaKey>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<GradientAlphaKey>.GetUninitializedObject() MinimalBaseFormatter<GradientAlphaKey>.RegisterReferenceID(GradientAlphaKey, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class GradientAlphaKeyFormatter : MinimalBaseFormatter<GradientAlphaKey>, IFormatter<GradientAlphaKey>, IFormatter Methods Read(ref GradientAlphaKey, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref GradientAlphaKey value, IDataReader reader) Parameters Type Name Description GradientAlphaKey value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<GradientAlphaKey>.Read(GradientAlphaKey, TirUtilities.External.OdinSerializer.IDataReader) Write(ref GradientAlphaKey, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref GradientAlphaKey value, IDataWriter writer) Parameters Type Name Description GradientAlphaKey value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<GradientAlphaKey>.Write(GradientAlphaKey, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.GradientColorKeyFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GradientColorKeyFormatter.html",
    "title": "Class GradientColorKeyFormatter | TirUtilities",
    "keywords": "Class GradientColorKeyFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < GradientColorKey > GradientColorKeyFormatter Implements IFormatter < GradientColorKey > IFormatter Inherited Members MinimalBaseFormatter<GradientColorKey>.IsValueType MinimalBaseFormatter<GradientColorKey>.SerializedType MinimalBaseFormatter<GradientColorKey>.Deserialize(IDataReader) MinimalBaseFormatter<GradientColorKey>.Serialize(GradientColorKey, IDataWriter) MinimalBaseFormatter<GradientColorKey>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<GradientColorKey>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<GradientColorKey>.GetUninitializedObject() MinimalBaseFormatter<GradientColorKey>.RegisterReferenceID(GradientColorKey, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class GradientColorKeyFormatter : MinimalBaseFormatter<GradientColorKey>, IFormatter<GradientColorKey>, IFormatter Methods Read(ref GradientColorKey, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref GradientColorKey value, IDataReader reader) Parameters Type Name Description GradientColorKey value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<GradientColorKey>.Read(GradientColorKey, TirUtilities.External.OdinSerializer.IDataReader) Write(ref GradientColorKey, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref GradientColorKey value, IDataWriter writer) Parameters Type Name Description GradientColorKey value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<GradientColorKey>.Write(GradientColorKey, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.GradientFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GradientFormatter.html",
    "title": "Class GradientFormatter | TirUtilities",
    "keywords": "Class GradientFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Gradient > GradientFormatter Implements IFormatter < Gradient > IFormatter Inherited Members MinimalBaseFormatter<Gradient>.IsValueType MinimalBaseFormatter<Gradient>.SerializedType MinimalBaseFormatter<Gradient>.Deserialize(IDataReader) MinimalBaseFormatter<Gradient>.Serialize(Gradient, IDataWriter) MinimalBaseFormatter<Gradient>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Gradient>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Gradient>.RegisterReferenceID(Gradient, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class GradientFormatter : MinimalBaseFormatter<Gradient>, IFormatter<Gradient>, IFormatter Methods GetUninitializedObject() Declaration protected override Gradient GetUninitializedObject() Returns Type Description Gradient Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Gradient>.GetUninitializedObject() Read(ref Gradient, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Gradient value, IDataReader reader) Parameters Type Name Description Gradient value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Gradient>.Read(Gradient, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Gradient, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Gradient value, IDataWriter writer) Parameters Type Name Description Gradient value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Gradient>.Write(Gradient, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.GuidSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.GuidSerializer.html",
    "title": "Class GuidSerializer | TirUtilities",
    "keywords": "Class GuidSerializer Serializer for the Guid type. Inheritance Object Serializer Serializer < Guid > GuidSerializer Inherited Members Serializer<Guid>.ReadValueWeak(IDataReader) Serializer<Guid>.WriteValueWeak(String, Object, IDataWriter) Serializer<Guid>.WriteValue(Guid, IDataWriter) Serializer<Guid>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class GuidSerializer : Serializer<Guid> Methods ReadValue(IDataReader) Reads a value of type Guid . Declaration public override Guid ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Guid The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Guid>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Guid, IDataWriter) Writes a value of type Guid . Declaration public override void WriteValue(string name, Guid value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Guid value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Guid>.WriteValue(System.String, System.Guid, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.HashSetFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.HashSetFormatter-1.html",
    "title": "Class HashSetFormatter<T> | TirUtilities",
    "keywords": "Class HashSetFormatter<T> Custom generic formatter for the generic type definition . Inheritance Object BaseFormatter < HashSet <T>> HashSetFormatter<T> Implements IFormatter < HashSet <T>> IFormatter Inherited Members BaseFormatter<HashSet<T>>.OnSerializingCallbacks BaseFormatter<HashSet<T>>.OnSerializedCallbacks BaseFormatter<HashSet<T>>.OnDeserializingCallbacks BaseFormatter<HashSet<T>>.OnDeserializedCallbacks BaseFormatter<HashSet<T>>.IsValueType BaseFormatter<HashSet<T>>.ImplementsISerializationCallbackReceiver BaseFormatter<HashSet<T>>.ImplementsIDeserializationCallback BaseFormatter<HashSet<T>>.ImplementsIObjectReference BaseFormatter<HashSet<T>>.SerializedType BaseFormatter<HashSet<T>>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<HashSet<T>>.IFormatter.Deserialize(IDataReader) BaseFormatter<HashSet<T>>.Deserialize(IDataReader) BaseFormatter<HashSet<T>>.Serialize(HashSet<T>, IDataWriter) BaseFormatter<HashSet<T>>.RegisterReferenceID(HashSet<T>, IDataReader) BaseFormatter<HashSet<T>>.InvokeOnDeserializingCallbacks(HashSet<T>, DeserializationContext) BaseFormatter<HashSet<T>>.InvokeOnDeserializingCallbacks(HashSet<T>, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class HashSetFormatter<T> : BaseFormatter<HashSet<T>>, IFormatter<HashSet<T>>, IFormatter Type Parameters Name Description T The element type of the formatted list. Constructors HashSetFormatter() Declaration public HashSetFormatter() Methods DeserializeImplementation(ref HashSet<T>, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref HashSet<T> value, IDataReader reader) Parameters Type Name Description HashSet <T> value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<HashSet<T>>.DeserializeImplementation(HashSet<T>, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override HashSet<T> GetUninitializedObject() Returns Type Description HashSet <T> A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<HashSet<T>>.GetUninitializedObject() SerializeImplementation(ref HashSet<T>, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref HashSet<T> value, IDataWriter writer) Parameters Type Name Description HashSet <T> value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<HashSet<T>>.SerializeImplementation(HashSet<T>, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.html",
    "title": "Namespace TirUtilities.External.OdinSerializer | TirUtilities",
    "keywords": "Namespace TirUtilities.External.OdinSerializer Classes AllowDeserializeInvalidDataAttribute Applying this attribute to a type indicates that in the case where, when expecting to deserialize an instance of the type or any of its derived types, but encountering an incompatible, uncastable type in the data being read, the serializer should attempt to deserialize an instance of the expected type using the stored, possibly invalid data. This is equivalent to the AllowDeserializeInvalidData option, expect type-specific instead of global. AlwaysFormatsSelfAttribute Use this attribute to specify that a type that implements the ISelfFormatter interface should always format itself regardless of other formatters being specified. This means that the interface will be used to format all types derived from the type that is decorated with this attribute, regardless of custom formatters for the derived types. AnimationCurveFormatter Custom formatter for the type. ArchitectureInfo This class gathers info about the current architecture for the purpose of determinining the unaligned read/write capabilities that we have to work with. ArrayFormatter<T> Formatter for all non-primitive one-dimensional arrays. ArrayListFormatter Custom formatter for the type ArrayList . BaseDataReader Provides basic functionality and overridable abstract methods for implementing a data reader. If you inherit this class, it is VERY IMPORTANT that you implement each abstract method to the exact specifications the documentation specifies. BaseDataReaderWriter Implements functionality that is shared by both data readers and data writers. BaseDataWriter Provides basic functionality and overridable abstract methods for implementing a data writer. If you inherit this class, it is VERY IMPORTANT that you implement each abstract method to the exact specifications the documentation specifies. BaseDictionaryKeyPathProvider<T> Not yet documented. BaseFormatter<T> Provides common functionality for serializing and deserializing values of type , and provides automatic support for the following common serialization conventions: IObjectReference , , OnSerializingAttribute , OnSerializedAttribute , OnDeserializingAttribute and OnDeserializedAttribute . BinaryDataReader Reads data from a stream that has been written by a BinaryDataWriter . BinaryDataWriter Writes data to a stream that can be read by a BinaryDataReader . BindTypeNameToTypeAttribute An attribute that lets you help the DefaultSerializationBinder bind type names to types. This is useful if you're renaming a type, that would result in data loss, and what to specify the new type name to avoid loss of data. BooleanSerializer Serializer for the Boolean type. BoundsFormatter Custom formatter for the type. Buffer<T> Provides a way of claiming and releasing cached array buffers. ByteSerializer Serializer for the Byte type. CharSerializer Serializer for the Char type. Color32Formatter Custom formatter for the type. ColorBlockFormatter<T> Custom formatter for the type. ColorBlockFormatterLocator ColorFormatter Custom formatter for the type. ComplexTypeSerializer<T> Serializer for all complex types; IE, types which are not primitives as determined by the IsPrimitiveType(Type) method. CoroutineFormatter Custom formatter for the type. This serializes nothing and always deserializes null, and only exists to ensure that no coroutine instances are ever created by the serialization system, since they will in almost all cases be invalid instances. Invalid coroutine instances crash Unity instantly when they are garbage collected. CustomFormatterAttribute Attribute indicating that a class which implements the IFormatter<T> interface somewhere in its hierarchy is a custom formatter for the type T. CustomGenericFormatterAttribute Attribute indicating that a generic type definition class which implements the IFormatter<T> interface somewhere in its hierarchy is a custom formatter for any variation of the generic type definition T. The formatter's generic type parameters are mapped onto the serialized type's generic type parameters. For example, DictionaryFormatter<TKey, TValue> implements IFormatter<T> , where T is Dictionary<TKey,TValue> . CustomLogger A helper class for quickly and easily defining custom loggers. CustomSerializationPolicy Helper class for quickly and easily implementing the ISerializationPolicy interface. DateTimeFormatter Custom formatter for the DateTime type. DateTimeOffsetFormatter Custom formatter for the DateTimeOffset type. DebugContext Defines a context for debugging and logging during serialization and deserialization. This class is thread-safe. DecimalSerializer Serializer for the Decimal type. DefaultLoggers Defines default loggers for serialization and deserialization. This class and all of its loggers are thread safe. DefaultSerializationBinder Provides a default, catch-all TwoWaySerializationBinder implementation. This binder only includes assembly names, without versions and tokens, in order to increase compatibility. DelegateFormatter<T> Formatter for all delegate types. This formatter can handle anything but delegates for dynamic methods. DeserializationContext The context of a given deserialization session. This class maintains all internal and external references during deserialization. DictionaryFormatter<TKey, TValue> Custom generic formatter for the generic type definition Dictionary<TKey,TValue> . DictionaryKeyUtility Provides utility methods for handling dictionary keys in the prefab modification system. DictionaryKeyUtility.KeyComparer<T> A smart comparer for dictionary keys, that uses the most appropriate available comparison method for the given key types. DoubleLookupDictionaryFormatter<TPrimary, TSecondary, TValue> Custom Odin serialization formatter for DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> . DoubleSerializer Serializer for the Double type. EasyBaseFormatter<T> Provides an easy way of implementing custom formatters. EmittedAssemblyAttribute EmittedFormatterAttribute Indicates that this formatter type has been emitted. Never put this on a type! EmptyTypeFormatter<T> A formatter for empty types. It writes no data, and skips all data that is to be read, deserializing a \"default\" value. EnumSerializer<T> Serializer for all enums. ExcludeDataFromInspectorAttribute Causes Odin's inspector to completely ignore a given member, preventing it from even being included in an Odin PropertyTree, and such will not cause any performance hits in the inspector. Note that Odin can still serialize an excluded member - it is merely ignored in the inspector itself. FormatterEmitter Utility class for emitting formatters using the System.Reflection.Emit namespace. NOTE: Some platforms do not support emitting. Check whether you can emit on the current platform using CanEmit . FormatterEmitter.AOTEmittedFormatter<T> Base type for all AOT-emitted formatters. FormatterEmitter.EmptyAOTEmittedFormatter<T> Shortcut class that makes it easier to emit empty AOT formatters. FormatterLocator Utility class for locating and caching formatters for all non-primitive types. FormatterUtilities Provides an array of utility methods which are commonly used by serialization formatters. GenericCollectionFormatter Utility class for the GenericCollectionFormatter<TCollection, TElement> class. GenericCollectionFormatter<TCollection, TElement> Formatter for all eligible types that implement the interface ICollection<T> , and which have no other formatters specified. Eligibility for formatting by this class is determined by the CanFormat(Type, out Type) method. GlobalSerializationConfig Contains global configuration options for the serialization system. GradientAlphaKeyFormatter Custom formatter for the type. GradientColorKeyFormatter Custom formatter for the type. GradientFormatter Custom formatter for the type. GuidSerializer Serializer for the Guid type. HashSetFormatter<T> Custom generic formatter for the generic type definition . Int16Serializer Serializer for the Int16 type. Int32Serializer Serializer for the Int32 type. Int64Serializer Serializer for the Int64 type. IntPtrSerializer Serializer for the IntPtr type. JsonConfig Contains various string constants used by the JsonDataWriter , JsonDataReader and JsonTextReader classes. JsonDataReader Reads json data from a stream that has been written by a JsonDataWriter . JsonDataWriter Writes json data to a stream that can be read by a JsonDataReader . JsonTextReader Parses json entries from a stream. KeyframeFormatter Custom formatter for the type. KeyValuePairFormatter<TKey, TValue> Custom generic formatter for the generic type definition KeyValuePair<TKey,TValue> . LayerMaskFormatter Custom formatter for the type. ListFormatter<T> Custom generic formatter for the generic type definition List<T> . MethodInfoFormatter<T> Custom formatter for MethodInfo, since Unity Mono's MethodInfo ISerializable implementation will often crash if the method no longer exists upon deserialization. MinimalBaseFormatter<T> Minimal baseline formatter. Doesn't come with all the bells and whistles of any of the other BaseFormatter classes. Common serialization conventions aren't automatically supported, and common deserialization callbacks are not automatically invoked. MultiDimensionalArrayFormatter<TArray, TElement> Formatter for all arrays with more than one dimension. NullableFormatter<T> Formatter for all Nullable<T> types. OdinSerializeAttribute Indicates that an instance field or auto-property should be serialized by Odin. PrefabModification An Odin-serialized prefab modification, containing all the information necessary to apply the modification. PreviouslySerializedAsAttribute Indicates that an instance field or auto-property was previously serialized with a different name, so that values serialized with the old name will be properly deserialized into this member. This does the same as Unity's FormerlySerializedAs attribute, except it can also be applied to properties. PrimitiveArrayFormatter<T> Formatter for all primitive one-dimensional arrays. ProperBitConverter Corresponds to the .NET BitConverter class, but works only with buffers and so never allocates garbage. This class always writes and reads bytes in a little endian format, regardless of system architecture. QuaternionFormatter Custom formatter for the type. QueueFormatter<TQueue, TValue> Custom generic formatter for the generic type definition Queue<T> . RectFormatter Custom formatter for the type. ReflectionFormatter<T> Final fallback formatter for all types which have no other formatters. This formatter relies on reflection to work, and is thus comparatively slow and creates more garbage than a custom formatter. ReflectionOrEmittedBaseFormatter<T> RegisterDictionaryKeyPathProviderAttribute RegisterFormatterAttribute RegisterFormatterLocatorAttribute SByteSerializer Serializer for the SByte type. SelfFormatterFormatter<T> Formatter for types that implement the ISelfFormatter interface. SerializableFormatter<T> Formatter for all types that implement the ISerializable interface. SerializationAbortException An exception thrown when the serialization system has encountered an issue so severe that serialization is being aborted. If this exception is caught in the serialization system somewhere, it should be rethrown. SerializationConfig Defines the configuration during serialization and deserialization. This class is thread-safe. SerializationContext The context of a given serialization session. This class maintains all internal and external references during serialization. SerializationNodeDataReader Not yet documented. SerializationNodeDataReaderWriterConfig Shared config class for SerializationNodeDataReader and SerializationNodeDataWriter . SerializationNodeDataWriter Not yet documented. SerializationPolicies Contains a set of default implementations of the ISerializationPolicy interface. NOTE: Policies are not necessarily compatible with each other in intuitive ways. Data serialized with the Everything policy will for example fail to deserialize auto-properties with Strict , even if only strict data is needed. It is best to ensure that you always use the same policy for serialization and deserialization. This class and all of its policies are thread-safe. SerializationUtility Provides an array of utility wrapper methods for easy serialization and deserialization of objects of any type. SerializedBehaviour A Unity Behaviour which is serialized by the Sirenix serialization system. SerializedComponent A Unity Component which is serialized by the Sirenix serialization system. SerializedMonoBehaviour A Unity MonoBehaviour which is serialized by the Sirenix serialization system. SerializedScriptableObject A Unity ScriptableObject which is serialized by the Sirenix serialization system. SerializedStateMachineBehaviour A Unity StateMachineBehaviour which is serialized by the Sirenix serialization system. SerializedUnityObject A Unity ScriptableObject which is serialized by the Sirenix serialization system. Serializer Serializes and deserializes a given type, and wraps serialization and deserialization with all the proper calls to free formatters from tedious boilerplate. Whenever serializing or deserializing anything, it is strongly recommended to use Get<T>() to get a proper wrapping serializer for that type. NOTE: This class should NOT be inherited from; it is hard-coded into the system. To extend the serialization system, instead create custom formatters, which are used by the ComplexTypeSerializer<T> class. Serializer<T> Serializes and deserializes the type , and wraps serialization and deserialization with all the proper calls to free formatters from tedious boilerplate. Whenever serializing or deserializing anything, it is strongly recommended to use Get<T>() to get a proper wrapping serializer for that type. NOTE: This class should NOT be inherited from; it is hard-coded into the system. To extend the serialization system, instead create custom formatters, which are used by the ComplexTypeSerializer<T> class. SingleSerializer Serializer for the Single type. StackFormatter<TStack, TValue> Custom generic formatter for the generic type definition Stack<T> and types derived from it. StringSerializer Serializer for the String type. TimeSpanFormatter Custom formatter for the TimeSpan type. TwoWaySerializationBinder Binds types to strings during serialization, and strings to types during deserialization. TypeFormatter Formatter for the Type type which uses the reader/writer's TwoWaySerializationBinder to bind types. UInt16Serializer Serializer for the UInt16 type. UInt32Serializer Serializer for the UInt32 type. UInt64Serializer Serializer for the UInt64 type. UIntPtrSerializer Serializer for the UIntPtr type. UnityEventFormatter<T> Custom generic formatter for the , , and types. UnityReferenceResolver Resolves external index references to Unity objects. UnitySerializationInitializer Utility class which initializes the Sirenix serialization system to be compatible with Unity. UnitySerializationUtility Provides an array of utility wrapper methods for easy serialization and deserialization of Unity objects of any type. Note that, during serialization, it is always assumed that we are running on Unity's main thread. Deserialization can happen on any thread, and all API's interacting with deserialization are thread-safe. Note that setting the IndexReferenceResolver on contexts passed into methods on this class will have no effect, as it will always be set to a UnityReferenceResolver. Vector2DictionaryKeyPathProvider Not yet documented. Vector2Formatter Custom formatter for the type. Vector3DictionaryKeyPathProvider Dictionary key path provider for Vector3Formatter Custom formatter for the type. Vector4DictionaryKeyPathProvider Vector4Formatter Custom formatter for the type. VersionFormatter Custom formatter for the Version type. Structs NodeInfo Contains information about a node during deserialization and serialization. SerializationData Unity serialized data struct that contains all data needed by Odin serialization. SerializationNode A serialization node as used by the Nodes format. Interfaces IAskIfCanFormatTypes IDataReader Provides a set of methods for reading data stored in a format written by a corresponding IDataWriter class. If you implement this interface, it is VERY IMPORTANT that you implement each method to the exact specifications the documentation specifies. It is strongly recommended to inherit from the BaseDataReader class if you wish to implement a new data reader. IDataWriter Provides a set of methods for reading data stored in a format that can be read by a corresponding IDataReader class. If you implement this interface, it is VERY IMPORTANT that you implement each method to the exact specifications the documentation specifies. It is strongly recommended to inherit from the BaseDataWriter class if you wish to implement a new data writer. IDictionaryKeyPathProvider Not yet documented. IDictionaryKeyPathProvider<T> Not yet documented. IExternalGuidReferenceResolver Resolves external guid references to reference objects during serialization and deserialization. IExternalIndexReferenceResolver Resolves external index references to reference objects during serialization and deserialization. IExternalStringReferenceResolver Resolves external strings references to reference objects during serialization and deserialization. IFormatter Serializes and deserializes a given type. NOTE that if you are implementing a custom formatter and registering it using the CustomFormatterAttribute , it is not enough to implement IFormatter - you have to implement IFormatter<T> . IFormatter<T> Serializes and deserializes a given type T. IFormatterLocator ILogger Implements methods for logging warnings, errors and exceptions during serialization and deserialization. IOverridesSerializationFormat Indicates that an Odin-serialized Unity object controls its own serialization format. Every time it is serialized, it will be asked which format to use. IOverridesSerializationPolicy Indicates that an Odin-serialized Unity object provides its own serialization policy rather than using the default policy. Note that THE VALUES RETURNED BY THIS INTERFACE WILL OVERRIDE THE PARAMETERS PASSED TO SerializeUnityObject(UnityEngine.Object, ref SerializationData, Boolean, SerializationContext) and DeserializeUnityObject(UnityEngine.Object, ref SerializationData, DeserializationContext) . ISelfFormatter Specifies that a type is capable of serializing itself using an IDataWriter and an IDataReader . The deserialized type instance will be created without a constructor call using the GetUninitializedObject(Type) method if it is a reference type, otherwise it will be created using default(type). Use AlwaysFormatsSelfAttribute to specify that a class which implements this interface should always format itself regardless of other formatters being specified. ISerializationPolicy Defines which members to serialize and deserialize when there aren't any custom formatters for a type. Usually, it governs the behaviour of the FormatterEmitter and ReflectionFormatter<T> classes. ISupportsPrefabSerialization Indicates that an Odin-serialized Unity object supports prefab serialization. Enums BinaryEntryType Entry types in the binary format written by BinaryDataWriter . DataFormat Specifies a data format to read and write in. EntryType An entry type which is part of a stream being read by a IDataReader . ErrorHandlingPolicy The policy for handling errors during serialization and deserialization. FormatterLocationStep LoggingPolicy The policy for which level of logging to do during serialization and deserialization. PrefabModificationType Types of prefab modification that can be applied. Delegates BaseFormatter<T>.SerializationCallback"
  },
  "api/TirUtilities.External.OdinSerializer.IAskIfCanFormatTypes.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IAskIfCanFormatTypes.html",
    "title": "Interface IAskIfCanFormatTypes | TirUtilities",
    "keywords": "Interface IAskIfCanFormatTypes Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IAskIfCanFormatTypes Methods CanFormatType(Type) Declaration bool CanFormatType(Type type) Parameters Type Name Description Type type Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.IDataReader.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IDataReader.html",
    "title": "Interface IDataReader | TirUtilities",
    "keywords": "Interface IDataReader Provides a set of methods for reading data stored in a format written by a corresponding IDataWriter class. If you implement this interface, it is VERY IMPORTANT that you implement each method to the exact specifications the documentation specifies. It is strongly recommended to inherit from the BaseDataReader class if you wish to implement a new data reader. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IDataReader : IDisposable Properties Binder Gets or sets the reader's serialization binder. Declaration TwoWaySerializationBinder Binder { get; set; } Property Value Type Description TwoWaySerializationBinder The reader's serialization binder. Context Gets the deserialization context. Declaration DeserializationContext Context { get; set; } Property Value Type Description DeserializationContext The deserialization context. CurrentNodeDepth Gets the current node depth. In other words, the current count of the node stack. Declaration int CurrentNodeDepth { get; } Property Value Type Description Int32 The current node depth. CurrentNodeId Gets the current node id. If this is less than zero, the current node has no id. Declaration int CurrentNodeId { get; } Property Value Type Description Int32 The current node id. CurrentNodeName Gets the name of the current node. Declaration string CurrentNodeName { get; } Property Value Type Description String The name of the current node. IsInArrayNode Gets a value indicating whether the reader is in an array node. Declaration bool IsInArrayNode { get; } Property Value Type Description Boolean true if the reader is in an array node; otherwise, false . Stream Gets or sets the base stream of the reader. Declaration [Obsolete(\"Data readers and writers don't necessarily have streams any longer, so this API has been made obsolete. Using this property may result in NotSupportedExceptions being thrown.\", false)] Stream Stream { get; set; } Property Value Type Description Stream The base stream of the reader. Methods EnterArray(out Int64) Tries to enters an array node. This will succeed if the next entry is an StartOfArray . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current array node. Declaration bool EnterArray(out long length) Parameters Type Name Description Int64 length The length of the array that was entered. Returns Type Description Boolean true if an array was entered, otherwise false EnterNode(out Type) Tries to enter a node. This will succeed if the next entry is an StartOfNode . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current node. Declaration bool EnterNode(out Type type) Parameters Type Name Description Type type The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name. Returns Type Description Boolean true if entering a node succeeded, otherwise false ExitArray() Exits the closest array. This method will keep skipping entries using until an EndOfArray is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterArray(out Int64) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the exited array node. Declaration bool ExitArray() Returns Type Description Boolean true if the method exited an array, false if it reached the end of the stream. ExitNode() Exits the current node. This method will keep skipping entries using until an EndOfNode is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterNode(out Type) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the current node. Declaration bool ExitNode() Returns Type Description Boolean true if the method exited a node, false if it reached the end of the stream. GetDataDump() Gets a dump of the data being read by the writer. The format of this dump varies, but should be useful for debugging purposes. Declaration string GetDataDump() Returns Type Description String PeekEntry(out String) Peeks ahead and returns the type of the next entry in the stream. Declaration EntryType PeekEntry(out string name) Parameters Type Name Description String name The name of the next entry, if it has one. Returns Type Description EntryType The type of the next entry. PrepareNewSerializationSession() Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same reader is used to deserialize several different, unrelated values. Declaration void PrepareNewSerializationSession() ReadBoolean(out Boolean) Reads a Boolean value. This call will succeed if the next entry is an Boolean . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadBoolean(out bool value) Parameters Type Name Description Boolean value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadByte(out Byte) Reads a Byte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Byte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadByte(out byte value) Parameters Type Name Description Byte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadChar(out Char) Reads a Char value. This call will succeed if the next entry is an String . If the string of the entry is longer than 1 character, the first character of the string will be taken as the result. If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadChar(out char value) Parameters Type Name Description Char value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadDecimal(out Decimal) Reads a Decimal value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Decimal ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadDecimal(out decimal value) Parameters Type Name Description Decimal value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadDouble(out Double) Reads a Double value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Double ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadDouble(out double value) Parameters Type Name Description Double value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadExternalReference(out Guid) Reads an external reference guid. This call will succeed if the next entry is an ExternalReferenceByGuid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadExternalReference(out Guid guid) Parameters Type Name Description Guid guid The external reference guid. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadExternalReference(out Int32) Reads an external reference index. This call will succeed if the next entry is an ExternalReferenceByIndex . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadExternalReference(out int index) Parameters Type Name Description Int32 index The external reference index. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadExternalReference(out String) Reads an external reference string. This call will succeed if the next entry is an ExternalReferenceByString . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadExternalReference(out string id) Parameters Type Name Description String id The external reference string. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadGuid(out Guid) Reads a Guid value. This call will succeed if the next entry is an Guid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadGuid(out Guid value) Parameters Type Name Description Guid value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInt16(out Int16) Reads a Int16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadInt16(out short value) Parameters Type Name Description Int16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInt32(out Int32) Reads an Int32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadInt32(out int value) Parameters Type Name Description Int32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInt64(out Int64) Reads a Int64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadInt64(out long value) Parameters Type Name Description Int64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadInternalReference(out Int32) Reads an internal reference id. This call will succeed if the next entry is an InternalReference . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadInternalReference(out int id) Parameters Type Name Description Int32 id The internal reference id. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadNull() Reads a null value. This call will succeed if the next entry is an Null . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadNull() Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadPrimitiveArray<T>(out T[]) Reads a primitive array value. This call will succeed if the next entry is an PrimitiveArray . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadPrimitiveArray<T>(out T[] array) where T : struct Parameters Type Name Description T[] array The resulting primitive array. Returns Type Description Boolean true if reading a primitive array succeeded, otherwise false Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . ReadSByte(out SByte) Reads an SByte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( SByte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadSByte(out sbyte value) Parameters Type Name Description SByte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadSingle(out Single) Reads a Single value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Single ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadSingle(out float value) Parameters Type Name Description Single value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadString(out String) Reads a String value. This call will succeed if the next entry is an String . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadString(out string value) Parameters Type Name Description String value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadUInt16(out UInt16) Reads an UInt16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadUInt16(out ushort value) Parameters Type Name Description UInt16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadUInt32(out UInt32) Reads an UInt32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadUInt32(out uint value) Parameters Type Name Description UInt32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false ReadUInt64(out UInt64) Reads an UInt64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration bool ReadUInt64(out ulong value) Parameters Type Name Description UInt64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false SkipEntry() Skips the next entry value, unless it is an EndOfNode or an EndOfArray . If the next entry value is an StartOfNode or an StartOfArray , all of its contents will be processed, deserialized and registered in the deserialization context, so that internal reference values are not lost to entries further down the stream. Declaration void SkipEntry() See Also IDisposable"
  },
  "api/TirUtilities.External.OdinSerializer.IDataWriter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IDataWriter.html",
    "title": "Interface IDataWriter | TirUtilities",
    "keywords": "Interface IDataWriter Provides a set of methods for reading data stored in a format that can be read by a corresponding IDataReader class. If you implement this interface, it is VERY IMPORTANT that you implement each method to the exact specifications the documentation specifies. It is strongly recommended to inherit from the BaseDataWriter class if you wish to implement a new data writer. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IDataWriter : IDisposable Properties Binder Gets or sets the reader's serialization binder. Declaration TwoWaySerializationBinder Binder { get; set; } Property Value Type Description TwoWaySerializationBinder The reader's serialization binder. Context Gets the serialization context. Declaration SerializationContext Context { get; set; } Property Value Type Description SerializationContext The serialization context. IsInArrayNode Gets a value indicating whether the writer is in an array node. Declaration bool IsInArrayNode { get; } Property Value Type Description Boolean true if the writer is in an array node; otherwise, false . Stream Gets or sets the base stream of the writer. Declaration [Obsolete(\"Data readers and writers don't necessarily have streams any longer, so this API has been made obsolete. Using this property may result in NotSupportedExceptions being thrown.\", false)] Stream Stream { get; set; } Property Value Type Description Stream The base stream of the writer. Methods BeginArrayNode(Int64) Begins an array node of the given length. Declaration void BeginArrayNode(long length) Parameters Type Name Description Int64 length The length of the array to come. BeginReferenceNode(String, Type, Int32) Writes the beginning of a reference node. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration void BeginReferenceNode(string name, Type type, int id) Parameters Type Name Description String name The name of the reference node. Type type The type of the reference node. If null, no type metadata will be written. Int32 id The id of the reference node. This id is acquired by calling TryRegisterInternalReference(Object, out Int32) . BeginStructNode(String, Type) Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration void BeginStructNode(string name, Type type) Parameters Type Name Description String name The name of the struct node. Type type The type of the struct node. If null, no type metadata will be written. EndArrayNode() Ends the current array node, if the current node is an array node. Declaration void EndArrayNode() EndNode(String) Ends the current node with the given name. If the current node has another name, an InvalidOperationException is thrown. Declaration void EndNode(string name) Parameters Type Name Description String name The name of the node to end. This has to be the name of the current node. FlushToStream() Flushes everything that has been written so far to the writer's base stream. Declaration void FlushToStream() GetDataDump() Gets a dump of the data currently written by the writer. The format of this dump varies, but should be useful for debugging purposes. Declaration string GetDataDump() Returns Type Description String PrepareNewSerializationSession() Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same writer is used to serialize several different, unrelated values. Declaration void PrepareNewSerializationSession() WriteBoolean(String, Boolean) Writes a Boolean value to the stream. Declaration void WriteBoolean(string name, bool value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Boolean value The value to write. WriteByte(String, Byte) Writes a Byte value to the stream. Declaration void WriteByte(string name, byte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Byte value The value to write. WriteChar(String, Char) Writes a Char value to the stream. Declaration void WriteChar(string name, char value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Char value The value to write. WriteDecimal(String, Decimal) Writes a Decimal value to the stream. Declaration void WriteDecimal(string name, decimal value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Decimal value The value to write. WriteDouble(String, Double) Writes a Double value to the stream. Declaration void WriteDouble(string name, double value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Double value The value to write. WriteExternalReference(String, Guid) Writes an external guid reference to the stream. Declaration void WriteExternalReference(string name, Guid guid) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid guid The value to write. WriteExternalReference(String, Int32) Writes an external index reference to the stream. Declaration void WriteExternalReference(string name, int index) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 index The value to write. WriteExternalReference(String, String) Writes an external string reference to the stream. Declaration void WriteExternalReference(string name, string id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String id The value to write. WriteGuid(String, Guid) Writes a Guid value to the stream. Declaration void WriteGuid(string name, Guid value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid value The value to write. WriteInt16(String, Int16) Writes a Int16 value to the stream. Declaration void WriteInt16(string name, short value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int16 value The value to write. WriteInt32(String, Int32) Writes an Int32 value to the stream. Declaration void WriteInt32(string name, int value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 value The value to write. WriteInt64(String, Int64) Writes a Int64 value to the stream. Declaration void WriteInt64(string name, long value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int64 value The value to write. WriteInternalReference(String, Int32) Writes an internal reference to the stream. Declaration void WriteInternalReference(string name, int id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 id The value to write. WriteNull(String) Writes a null value to the stream. Declaration void WriteNull(string name) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. WritePrimitiveArray<T>(T[]) Writes a primitive array to the stream. Declaration void WritePrimitiveArray<T>(T[] array) where T : struct Parameters Type Name Description T[] array The primitive array to write. Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . WriteSByte(String, SByte) Writes an SByte value to the stream. Declaration void WriteSByte(string name, sbyte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. SByte value The value to write. WriteSingle(String, Single) Writes a Single value to the stream. Declaration void WriteSingle(string name, float value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Single value The value to write. WriteString(String, String) Writes a String value to the stream. Declaration void WriteString(string name, string value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String value The value to write. WriteUInt16(String, UInt16) Writes an UInt16 value to the stream. Declaration void WriteUInt16(string name, ushort value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt16 value The value to write. WriteUInt32(String, UInt32) Writes an UInt32 value to the stream. Declaration void WriteUInt32(string name, uint value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt32 value The value to write. WriteUInt64(String, UInt64) Writes an UInt64 value to the stream. Declaration void WriteUInt64(string name, ulong value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt64 value The value to write. See Also IDisposable"
  },
  "api/TirUtilities.External.OdinSerializer.IDictionaryKeyPathProvider.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IDictionaryKeyPathProvider.html",
    "title": "Interface IDictionaryKeyPathProvider | TirUtilities",
    "keywords": "Interface IDictionaryKeyPathProvider Not yet documented. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IDictionaryKeyPathProvider Properties ProviderID Gets the provider identifier. Declaration string ProviderID { get; } Property Value Type Description String Methods Compare(Object, Object) Compares the specified x. Declaration int Compare(object x, object y) Parameters Type Name Description Object x The x. Object y The y. Returns Type Description Int32 GetKeyFromPathString(String) Gets the key from path string. Declaration object GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr The path string. Returns Type Description Object GetPathStringFromKey(Object) Gets the path string from key. Declaration string GetPathStringFromKey(object key) Parameters Type Name Description Object key The key. Returns Type Description String"
  },
  "api/TirUtilities.External.OdinSerializer.IDictionaryKeyPathProvider-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IDictionaryKeyPathProvider-1.html",
    "title": "Interface IDictionaryKeyPathProvider<T> | TirUtilities",
    "keywords": "Interface IDictionaryKeyPathProvider<T> Not yet documented. Inherited Members IDictionaryKeyPathProvider.ProviderID IDictionaryKeyPathProvider.GetPathStringFromKey(Object) IDictionaryKeyPathProvider.Compare(Object, Object) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IDictionaryKeyPathProvider<T> : IDictionaryKeyPathProvider Type Parameters Name Description T Methods Compare(T, T) Compares the specified x. Declaration int Compare(T x, T y) Parameters Type Name Description T x The x. T y The y. Returns Type Description Int32 GetKeyFromPathString(String) Gets the key from path string. Declaration T GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr The path string. Returns Type Description T GetPathStringFromKey(T) Gets the path string from key. Declaration string GetPathStringFromKey(T key) Parameters Type Name Description T key The key. Returns Type Description String"
  },
  "api/TirUtilities.External.OdinSerializer.IExternalGuidReferenceResolver.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IExternalGuidReferenceResolver.html",
    "title": "Interface IExternalGuidReferenceResolver | TirUtilities",
    "keywords": "Interface IExternalGuidReferenceResolver Resolves external guid references to reference objects during serialization and deserialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IExternalGuidReferenceResolver Properties NextResolver Gets or sets the next resolver in the chain. Declaration IExternalGuidReferenceResolver NextResolver { get; set; } Property Value Type Description IExternalGuidReferenceResolver The next resolver in the chain. Methods CanReference(Object, out Guid) Determines whether this resolver can reference the specified value with a Guid. Declaration bool CanReference(object value, out Guid guid) Parameters Type Name Description Object value The value to check. Guid guid The Guid which references the value. Returns Type Description Boolean true if the value can be referenced; otherwise, false . TryResolveReference(Guid, out Object) Tries to resolve a reference from a given Guid. Declaration bool TryResolveReference(Guid guid, out object value) Parameters Type Name Description Guid guid The Guid to resolve. Object value The resolved value. Returns Type Description Boolean true if the value was resolved; otherwise, false ."
  },
  "api/TirUtilities.External.OdinSerializer.IExternalIndexReferenceResolver.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IExternalIndexReferenceResolver.html",
    "title": "Interface IExternalIndexReferenceResolver | TirUtilities",
    "keywords": "Interface IExternalIndexReferenceResolver Resolves external index references to reference objects during serialization and deserialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IExternalIndexReferenceResolver Methods CanReference(Object, out Int32) Determines whether the specified value can be referenced externally via this resolver. Declaration bool CanReference(object value, out int index) Parameters Type Name Description Object value The value to reference. Int32 index The index of the resolved value, if it can be referenced. Returns Type Description Boolean true if the reference can be resolved, otherwise false . TryResolveReference(Int32, out Object) Tries to resolve the given reference index to a reference value. Declaration bool TryResolveReference(int index, out object value) Parameters Type Name Description Int32 index The index to resolve. Object value The resolved value. Returns Type Description Boolean true if the index could be resolved to a value, otherwise false ."
  },
  "api/TirUtilities.External.OdinSerializer.IExternalStringReferenceResolver.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IExternalStringReferenceResolver.html",
    "title": "Interface IExternalStringReferenceResolver | TirUtilities",
    "keywords": "Interface IExternalStringReferenceResolver Resolves external strings references to reference objects during serialization and deserialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IExternalStringReferenceResolver Properties NextResolver Gets or sets the next resolver in the chain. Declaration IExternalStringReferenceResolver NextResolver { get; set; } Property Value Type Description IExternalStringReferenceResolver The next resolver in the chain. Methods CanReference(Object, out String) Determines whether this resolver can reference the specified value with a string. Declaration bool CanReference(object value, out string id) Parameters Type Name Description Object value The value to check. String id The string which references the value. Returns Type Description Boolean true if the value can be referenced; otherwise, false . TryResolveReference(String, out Object) Tries to resolve a reference from a given Guid. Declaration bool TryResolveReference(string id, out object value) Parameters Type Name Description String id The String to resolve. Object value The resolved value. Returns Type Description Boolean true if the value was resolved; otherwise, false ."
  },
  "api/TirUtilities.External.OdinSerializer.IFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IFormatter.html",
    "title": "Interface IFormatter | TirUtilities",
    "keywords": "Interface IFormatter Serializes and deserializes a given type. NOTE that if you are implementing a custom formatter and registering it using the CustomFormatterAttribute , it is not enough to implement IFormatter - you have to implement IFormatter<T> . Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IFormatter Properties SerializedType Gets the type that the formatter can serialize. Declaration Type SerializedType { get; } Property Value Type Description Type The type that the formatter can serialize. Methods Deserialize(IDataReader) Deserializes a value using a specified IDataReader . Declaration object Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Object The deserialized value. Serialize(Object, IDataWriter) Serializes a value using a specified IDataWriter . Declaration void Serialize(object value, IDataWriter writer) Parameters Type Name Description Object value The value to serialize. IDataWriter writer The writer to use."
  },
  "api/TirUtilities.External.OdinSerializer.IFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IFormatter-1.html",
    "title": "Interface IFormatter<T> | TirUtilities",
    "keywords": "Interface IFormatter<T> Serializes and deserializes a given type T. Inherited Members IFormatter.SerializedType IFormatter.Serialize(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IFormatter<T> : IFormatter Type Parameters Name Description T The type which can be serialized and deserialized by the formatter. Methods Deserialize(IDataReader) Deserializes a value of type using a specified IDataReader . Declaration T Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The deserialized value. Serialize(T, IDataWriter) Serializes a value of type using a specified IDataWriter . Declaration void Serialize(T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to use."
  },
  "api/TirUtilities.External.OdinSerializer.IFormatterLocator.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IFormatterLocator.html",
    "title": "Interface IFormatterLocator | TirUtilities",
    "keywords": "Interface IFormatterLocator Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IFormatterLocator Methods TryGetFormatter(Type, FormatterLocationStep, ISerializationPolicy, out IFormatter) Declaration bool TryGetFormatter(Type type, FormatterLocationStep step, ISerializationPolicy policy, out IFormatter formatter) Parameters Type Name Description Type type FormatterLocationStep step ISerializationPolicy policy IFormatter formatter Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.ILogger.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ILogger.html",
    "title": "Interface ILogger | TirUtilities",
    "keywords": "Interface ILogger Implements methods for logging warnings, errors and exceptions during serialization and deserialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface ILogger Methods LogError(String) Logs an error. Declaration void LogError(string error) Parameters Type Name Description String error The error to log. LogException(Exception) Logs an exception. Declaration void LogException(Exception exception) Parameters Type Name Description Exception exception The exception to log. LogWarning(String) Logs a warning. Declaration void LogWarning(string warning) Parameters Type Name Description String warning The warning to log."
  },
  "api/TirUtilities.External.OdinSerializer.Int16Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Int16Serializer.html",
    "title": "Class Int16Serializer | TirUtilities",
    "keywords": "Class Int16Serializer Serializer for the Int16 type. Inheritance Object Serializer Serializer < Int16 > Int16Serializer Inherited Members Serializer<Int16>.ReadValueWeak(IDataReader) Serializer<Int16>.WriteValueWeak(String, Object, IDataWriter) Serializer<Int16>.WriteValue(Int16, IDataWriter) Serializer<Int16>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Int16Serializer : Serializer<short> Methods ReadValue(IDataReader) Reads a value of type Int16 . Declaration public override short ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Int16 The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Int16>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Int16, IDataWriter) Writes a value of type Int16 . Declaration public override void WriteValue(string name, short value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Int16 value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Int16>.WriteValue(System.String, System.Int16, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Int32Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Int32Serializer.html",
    "title": "Class Int32Serializer | TirUtilities",
    "keywords": "Class Int32Serializer Serializer for the Int32 type. Inheritance Object Serializer Serializer < Int32 > Int32Serializer Inherited Members Serializer<Int32>.ReadValueWeak(IDataReader) Serializer<Int32>.WriteValueWeak(String, Object, IDataWriter) Serializer<Int32>.WriteValue(Int32, IDataWriter) Serializer<Int32>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Int32Serializer : Serializer<int> Methods ReadValue(IDataReader) Reads a value of type Int32 . Declaration public override int ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Int32 The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Int32>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Int32, IDataWriter) Writes a value of type Int32 . Declaration public override void WriteValue(string name, int value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Int32 value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Int32>.WriteValue(System.String, System.Int32, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Int64Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Int64Serializer.html",
    "title": "Class Int64Serializer | TirUtilities",
    "keywords": "Class Int64Serializer Serializer for the Int64 type. Inheritance Object Serializer Serializer < Int64 > Int64Serializer Inherited Members Serializer<Int64>.ReadValueWeak(IDataReader) Serializer<Int64>.WriteValueWeak(String, Object, IDataWriter) Serializer<Int64>.WriteValue(Int64, IDataWriter) Serializer<Int64>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Int64Serializer : Serializer<long> Methods ReadValue(IDataReader) Reads a value of type Int64 . Declaration public override long ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Int64 The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Int64>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Int64, IDataWriter) Writes a value of type Int64 . Declaration public override void WriteValue(string name, long value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Int64 value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Int64>.WriteValue(System.String, System.Int64, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.IntPtrSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IntPtrSerializer.html",
    "title": "Class IntPtrSerializer | TirUtilities",
    "keywords": "Class IntPtrSerializer Serializer for the IntPtr type. Inheritance Object Serializer Serializer < IntPtr > IntPtrSerializer Inherited Members Serializer<IntPtr>.ReadValueWeak(IDataReader) Serializer<IntPtr>.WriteValueWeak(String, Object, IDataWriter) Serializer<IntPtr>.WriteValue(IntPtr, IDataWriter) Serializer<IntPtr>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class IntPtrSerializer : Serializer<IntPtr> Methods ReadValue(IDataReader) Reads a value of type IntPtr . Declaration public override IntPtr ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description IntPtr The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.IntPtr>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, IntPtr, IDataWriter) Writes a value of type IntPtr . Declaration public override void WriteValue(string name, IntPtr value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. IntPtr value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.IntPtr>.WriteValue(System.String, System.IntPtr, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.IOverridesSerializationFormat.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IOverridesSerializationFormat.html",
    "title": "Interface IOverridesSerializationFormat | TirUtilities",
    "keywords": "Interface IOverridesSerializationFormat Indicates that an Odin-serialized Unity object controls its own serialization format. Every time it is serialized, it will be asked which format to use. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IOverridesSerializationFormat Methods GetFormatToSerializeAs(Boolean) Gets the format to use for serialization. Declaration DataFormat GetFormatToSerializeAs(bool isPlayer) Parameters Type Name Description Boolean isPlayer Returns Type Description DataFormat"
  },
  "api/TirUtilities.External.OdinSerializer.IOverridesSerializationPolicy.html": {
    "href": "api/TirUtilities.External.OdinSerializer.IOverridesSerializationPolicy.html",
    "title": "Interface IOverridesSerializationPolicy | TirUtilities",
    "keywords": "Interface IOverridesSerializationPolicy Indicates that an Odin-serialized Unity object provides its own serialization policy rather than using the default policy. Note that THE VALUES RETURNED BY THIS INTERFACE WILL OVERRIDE THE PARAMETERS PASSED TO SerializeUnityObject(UnityEngine.Object, ref SerializationData, Boolean, SerializationContext) and DeserializeUnityObject(UnityEngine.Object, ref SerializationData, DeserializationContext) . Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface IOverridesSerializationPolicy Properties OdinSerializesUnityFields Declaration bool OdinSerializesUnityFields { get; } Property Value Type Description Boolean SerializationPolicy Declaration ISerializationPolicy SerializationPolicy { get; } Property Value Type Description ISerializationPolicy"
  },
  "api/TirUtilities.External.OdinSerializer.ISelfFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ISelfFormatter.html",
    "title": "Interface ISelfFormatter | TirUtilities",
    "keywords": "Interface ISelfFormatter Specifies that a type is capable of serializing itself using an IDataWriter and an IDataReader . The deserialized type instance will be created without a constructor call using the GetUninitializedObject(Type) method if it is a reference type, otherwise it will be created using default(type). Use AlwaysFormatsSelfAttribute to specify that a class which implements this interface should always format itself regardless of other formatters being specified. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface ISelfFormatter Methods Deserialize(IDataReader) Deserializes data into the instance using the given reader. Declaration void Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader Serialize(IDataWriter) Serializes the instance's data using the given writer. Declaration void Serialize(IDataWriter writer) Parameters Type Name Description IDataWriter writer"
  },
  "api/TirUtilities.External.OdinSerializer.ISerializationPolicy.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ISerializationPolicy.html",
    "title": "Interface ISerializationPolicy | TirUtilities",
    "keywords": "Interface ISerializationPolicy Defines which members to serialize and deserialize when there aren't any custom formatters for a type. Usually, it governs the behaviour of the FormatterEmitter and ReflectionFormatter<T> classes. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface ISerializationPolicy Properties AllowNonSerializableTypes Gets a value indicating whether to allow non serializable types. (Types which are not decorated with SerializableAttribute .) Declaration bool AllowNonSerializableTypes { get; } Property Value Type Description Boolean true if serializable types are allowed; otherwise, false . ID Gets the identifier of the policy. This can be stored in the serialization metadata, so the policy used to serialize can be recovered upon deserialization without knowing the policy ahead of time. This ID should preferably be unique. Declaration string ID { get; } Property Value Type Description String The identifier of the policy. Methods ShouldSerializeMember(MemberInfo) Gets a value indicating whether a given MemberInfo should be serialized or not. Declaration bool ShouldSerializeMember(MemberInfo member) Parameters Type Name Description MemberInfo member The member to check. Returns Type Description Boolean true if the given member should be serialized, otherwise, false ."
  },
  "api/TirUtilities.External.OdinSerializer.ISupportsPrefabSerialization.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ISupportsPrefabSerialization.html",
    "title": "Interface ISupportsPrefabSerialization | TirUtilities",
    "keywords": "Interface ISupportsPrefabSerialization Indicates that an Odin-serialized Unity object supports prefab serialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public interface ISupportsPrefabSerialization Properties SerializationData Gets or sets the serialization data of the object. Declaration SerializationData SerializationData { get; set; } Property Value Type Description SerializationData"
  },
  "api/TirUtilities.External.OdinSerializer.JsonConfig.html": {
    "href": "api/TirUtilities.External.OdinSerializer.JsonConfig.html",
    "title": "Class JsonConfig | TirUtilities",
    "keywords": "Class JsonConfig Contains various string constants used by the JsonDataWriter , JsonDataReader and JsonTextReader classes. Inheritance Object JsonConfig Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class JsonConfig Fields EXTERNAL_GUID_REF_SIG The beginning of the content of an external reference by guid entry. Declaration public const string EXTERNAL_GUID_REF_SIG = \"$guidref\" Field Value Type Description String EXTERNAL_INDEX_REF_SIG The beginning of the content of an external reference by index entry. Declaration public const string EXTERNAL_INDEX_REF_SIG = \"$eref\" Field Value Type Description String EXTERNAL_STRING_REF_SIG The beginning of the content of an external reference by string entry. Declaration public const string EXTERNAL_STRING_REF_SIG = \"$strref\" Field Value Type Description String ID_SIG The named of a node id entry. Declaration public const string ID_SIG = \"$id\" Field Value Type Description String INTERNAL_REF_SIG The beginning of the content of an internal reference entry. Declaration public const string INTERNAL_REF_SIG = \"$iref\" Field Value Type Description String PRIMITIVE_ARRAY_CONTENT_SIG The name of a primitive array content entry. Declaration public const string PRIMITIVE_ARRAY_CONTENT_SIG = \"$pcontent\" Field Value Type Description String PRIMITIVE_ARRAY_LENGTH_SIG The name of a primitive array length entry. Declaration public const string PRIMITIVE_ARRAY_LENGTH_SIG = \"$plength\" Field Value Type Description String REGULAR_ARRAY_CONTENT_SIG The name of a regular array content entry. Declaration public const string REGULAR_ARRAY_CONTENT_SIG = \"$rcontent\" Field Value Type Description String REGULAR_ARRAY_LENGTH_SIG The name of a regular array length entry. Declaration public const string REGULAR_ARRAY_LENGTH_SIG = \"$rlength\" Field Value Type Description String TYPE_SIG The name of a type entry. Declaration public const string TYPE_SIG = \"$type\" Field Value Type Description String"
  },
  "api/TirUtilities.External.OdinSerializer.JsonDataReader.html": {
    "href": "api/TirUtilities.External.OdinSerializer.JsonDataReader.html",
    "title": "Class JsonDataReader | TirUtilities",
    "keywords": "Class JsonDataReader Reads json data from a stream that has been written by a JsonDataWriter . Inheritance Object BaseDataReaderWriter BaseDataReader JsonDataReader Implements IDataReader Inherited Members BaseDataReader.CurrentNodeId BaseDataReader.CurrentNodeDepth BaseDataReader.CurrentNodeName BaseDataReader.Context BaseDataReader.SkipEntry() BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class JsonDataReader : BaseDataReader, IDataReader, IDisposable Constructors JsonDataReader() Declaration public JsonDataReader() JsonDataReader(Stream, DeserializationContext) Initializes a new instance of the JsonDataReader class. Declaration public JsonDataReader(Stream stream, DeserializationContext context) Parameters Type Name Description Stream stream The base stream of the reader. DeserializationContext context The deserialization context to use. Properties Stream Gets or sets the base stream of the reader. Declaration public override Stream Stream { get; set; } Property Value Type Description Stream The base stream of the reader. Overrides BaseDataReader.Stream Methods Dispose() Disposes all resources kept by the data reader, except the stream, which can be reused later. Declaration public override void Dispose() Overrides BaseDataReader.Dispose() EnterArray(out Int64) Tries to enters an array node. This will succeed if the next entry is an StartOfArray . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current array node. Declaration public override bool EnterArray(out long length) Parameters Type Name Description Int64 length The length of the array that was entered. Returns Type Description Boolean true if an array was entered, otherwise false Overrides BaseDataReader.EnterArray(out Int64) EnterNode(out Type) Tries to enter a node. This will succeed if the next entry is an StartOfNode . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current node. Declaration public override bool EnterNode(out Type type) Parameters Type Name Description Type type The type of the node. This value will be null if there was no metadata, or if the reader's serialization binder failed to resolve the type name. Returns Type Description Boolean true if entering a node succeeded, otherwise false Overrides BaseDataReader.EnterNode(out Type) ExitArray() Exits the closest array. This method will keep skipping entries using until an EndOfArray is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterArray(out Int64) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the exited array node. Declaration public override bool ExitArray() Returns Type Description Boolean true if the method exited an array, false if it reached the end of the stream. Overrides BaseDataReader.ExitArray() ExitNode() Exits the current node. This method will keep skipping entries using until an EndOfNode is reached, or the end of the stream is reached. This call MUST have been preceded by a corresponding call to EnterNode(out Type) . This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth to the correct values for the node that was prior to the current node. Declaration public override bool ExitNode() Returns Type Description Boolean true if the method exited a node, false if it reached the end of the stream. Overrides BaseDataReader.ExitNode() GetDataDump() Declaration public override string GetDataDump() Returns Type Description String Overrides BaseDataReader.GetDataDump() PeekEntry() Peeks the current entry. Declaration protected override EntryType PeekEntry() Returns Type Description EntryType The peeked entry. Overrides BaseDataReader.PeekEntry() PeekEntry(out String) Peeks ahead and returns the type of the next entry in the stream. Declaration public override EntryType PeekEntry(out string name) Parameters Type Name Description String name The name of the next entry, if it has one. Returns Type Description EntryType The type of the next entry. Overrides BaseDataReader.PeekEntry(out String) PrepareNewSerializationSession() Tells the reader that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same reader is used to deserialize several different, unrelated values. Declaration public override void PrepareNewSerializationSession() Overrides BaseDataReader.PrepareNewSerializationSession() ReadBoolean(out Boolean) Reads a Boolean value. This call will succeed if the next entry is an Boolean . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadBoolean(out bool value) Parameters Type Name Description Boolean value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadBoolean(out Boolean) ReadByte(out Byte) Reads a Byte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Byte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadByte(out byte value) Parameters Type Name Description Byte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadByte(out Byte) ReadChar(out Char) Reads a Char value. This call will succeed if the next entry is an String . If the string of the entry is longer than 1 character, the first character of the string will be taken as the result. If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadChar(out char value) Parameters Type Name Description Char value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadChar(out Char) ReadDecimal(out Decimal) Reads a Decimal value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Decimal ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadDecimal(out decimal value) Parameters Type Name Description Decimal value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadDecimal(out Decimal) ReadDouble(out Double) Reads a Double value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Double ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadDouble(out double value) Parameters Type Name Description Double value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadDouble(out Double) ReadExternalReference(out Guid) Reads an external reference guid. This call will succeed if the next entry is an ExternalReferenceByGuid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadExternalReference(out Guid guid) Parameters Type Name Description Guid guid The external reference guid. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadExternalReference(out Guid) ReadExternalReference(out Int32) Reads an external reference index. This call will succeed if the next entry is an ExternalReferenceByIndex . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadExternalReference(out int index) Parameters Type Name Description Int32 index The external reference index. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadExternalReference(out Int32) ReadExternalReference(out String) Reads an external reference string. This call will succeed if the next entry is an ExternalReferenceByString . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadExternalReference(out string id) Parameters Type Name Description String id The external reference string. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadExternalReference(out String) ReadGuid(out Guid) Reads a Guid value. This call will succeed if the next entry is an Guid . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadGuid(out Guid value) Parameters Type Name Description Guid value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadGuid(out Guid) ReadInt16(out Int16) Reads a Int16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInt16(out short value) Parameters Type Name Description Int16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInt16(out Int16) ReadInt32(out Int32) Reads an Int32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInt32(out int value) Parameters Type Name Description Int32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInt32(out Int32) ReadInt64(out Int64) Reads a Int64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( Int64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInt64(out long value) Parameters Type Name Description Int64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInt64(out Int64) ReadInternalReference(out Int32) Reads an internal reference id. This call will succeed if the next entry is an InternalReference . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadInternalReference(out int id) Parameters Type Name Description Int32 id The internal reference id. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadInternalReference(out Int32) ReadNull() Reads a null value. This call will succeed if the next entry is an Null . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadNull() Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadNull() ReadPrimitiveArray<T>(out T[]) Reads a primitive array value. This call will succeed if the next entry is an PrimitiveArray . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadPrimitiveArray<T>(out T[] array) where T : struct Parameters Type Name Description T[] array The resulting primitive array. Returns Type Description Boolean true if reading a primitive array succeeded, otherwise false Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . Overrides TirUtilities.External.OdinSerializer.BaseDataReader.ReadPrimitiveArray<T>(T[]) Exceptions Type Condition ArgumentException Type + typeof(T).Name + is not a valid primitive array type. ReadSByte(out SByte) Reads an SByte value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( SByte ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadSByte(out sbyte value) Parameters Type Name Description SByte value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadSByte(out SByte) ReadSingle(out Single) Reads a Single value. This call will succeed if the next entry is an FloatingPoint or an Integer . If the stored integer or floating point value is smaller than MinValue or larger than MaxValue , the result will be default( Single ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadSingle(out float value) Parameters Type Name Description Single value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadSingle(out Single) ReadString(out String) Reads a String value. This call will succeed if the next entry is an String . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadString(out string value) Parameters Type Name Description String value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadString(out String) ReadToNextEntry() Consumes the current entry, and reads to the next one. Declaration protected override EntryType ReadToNextEntry() Returns Type Description EntryType The next entry. Overrides BaseDataReader.ReadToNextEntry() ReadUInt16(out UInt16) Reads an UInt16 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt16 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadUInt16(out ushort value) Parameters Type Name Description UInt16 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadUInt16(out UInt16) ReadUInt32(out UInt32) Reads an UInt32 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt32 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadUInt32(out uint value) Parameters Type Name Description UInt32 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadUInt32(out UInt32) ReadUInt64(out UInt64) Reads an UInt64 value. This call will succeed if the next entry is an Integer . If the value of the stored integer is smaller than MinValue or larger than MaxValue , the result will be default( UInt64 ). If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadUInt64(out ulong value) Parameters Type Name Description UInt64 value The value that has been read. Returns Type Description Boolean true if reading the value succeeded, otherwise false Overrides BaseDataReader.ReadUInt64(out UInt64) Implements IDataReader See Also BaseDataReader"
  },
  "api/TirUtilities.External.OdinSerializer.JsonDataWriter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.JsonDataWriter.html",
    "title": "Class JsonDataWriter | TirUtilities",
    "keywords": "Class JsonDataWriter Writes json data to a stream that can be read by a JsonDataReader . Inheritance Object BaseDataReaderWriter BaseDataWriter JsonDataWriter Implements IDataWriter Inherited Members BaseDataWriter.Stream BaseDataWriter.Context BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class JsonDataWriter : BaseDataWriter, IDataWriter, IDisposable Constructors JsonDataWriter() Declaration public JsonDataWriter() JsonDataWriter(Stream, SerializationContext, Boolean) Initializes a new instance of the JsonDataWriter class. Declaration public JsonDataWriter(Stream stream, SerializationContext context, bool formatAsReadable = true) Parameters Type Name Description Stream stream The base stream of the writer. SerializationContext context The serialization context to use. Boolean formatAsReadable Whether the json should be packed, or formatted as human-readable. Fields EnableTypeOptimization Whether to enable an optimization that ensures any given type name is only written once into the json stream, and thereafter kept track of by ID. Declaration public bool EnableTypeOptimization Field Value Type Description Boolean FormatAsReadable Gets or sets a value indicating whether the json should be packed, or formatted as human-readable. Declaration public bool FormatAsReadable Field Value Type Description Boolean true if the json should be formatted as human-readable; otherwise, false . Methods BeginArrayNode(Int64) Begins an array node of the given length. Declaration public override void BeginArrayNode(long length) Parameters Type Name Description Int64 length The length of the array to come. Overrides BaseDataWriter.BeginArrayNode(Int64) BeginReferenceNode(String, Type, Int32) Writes the beginning of a reference node. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration public override void BeginReferenceNode(string name, Type type, int id) Parameters Type Name Description String name The name of the reference node. Type type The type of the reference node. If null, no type metadata will be written. Int32 id The id of the reference node. This id is acquired by calling TryRegisterInternalReference(Object, out Int32) . Overrides BaseDataWriter.BeginReferenceNode(String, Type, Int32) BeginStructNode(String, Type) Begins a struct/value type node. This is essentially the same as a reference node, except it has no internal reference id. This call MUST eventually be followed by a corresponding call to EndNode(String) , with the same name. Declaration public override void BeginStructNode(string name, Type type) Parameters Type Name Description String name The name of the struct node. Type type The type of the struct node. If null, no type metadata will be written. Overrides BaseDataWriter.BeginStructNode(String, Type) Dispose() Disposes all resources kept by the data writer, except the stream, which can be reused later. Declaration public override void Dispose() Overrides BaseDataWriter.Dispose() EndArrayNode() Ends the current array node, if the current node is an array node. Declaration public override void EndArrayNode() Overrides BaseDataWriter.EndArrayNode() EndNode(String) Ends the current node with the given name. If the current node has another name, an InvalidOperationException is thrown. Declaration public override void EndNode(string name) Parameters Type Name Description String name The name of the node to end. This has to be the name of the current node. Overrides BaseDataWriter.EndNode(String) FlushToStream() Flushes everything that has been written so far to the writer's base stream. Declaration public override void FlushToStream() Overrides BaseDataWriter.FlushToStream() GetDataDump() Declaration public override string GetDataDump() Returns Type Description String Overrides BaseDataWriter.GetDataDump() MarkJustStarted() Enable the \"just started\" flag, causing the writer to start a new \"base\" json object container. Declaration public void MarkJustStarted() PrepareNewSerializationSession() Tells the writer that a new serialization session is about to begin, and that it should clear all cached values left over from any prior serialization sessions. This method is only relevant when the same writer is used to serialize several different, unrelated values. Declaration public override void PrepareNewSerializationSession() Overrides BaseDataWriter.PrepareNewSerializationSession() WriteBoolean(String, Boolean) Writes a Boolean value to the stream. Declaration public override void WriteBoolean(string name, bool value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Boolean value The value to write. Overrides BaseDataWriter.WriteBoolean(String, Boolean) WriteByte(String, Byte) Writes a Byte value to the stream. Declaration public override void WriteByte(string name, byte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Byte value The value to write. Overrides BaseDataWriter.WriteByte(String, Byte) WriteChar(String, Char) Writes a Char value to the stream. Declaration public override void WriteChar(string name, char value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Char value The value to write. Overrides BaseDataWriter.WriteChar(String, Char) WriteDecimal(String, Decimal) Writes a Decimal value to the stream. Declaration public override void WriteDecimal(string name, decimal value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Decimal value The value to write. Overrides BaseDataWriter.WriteDecimal(String, Decimal) WriteDouble(String, Double) Writes a Double value to the stream. Declaration public override void WriteDouble(string name, double value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Double value The value to write. Overrides BaseDataWriter.WriteDouble(String, Double) WriteExternalReference(String, Guid) Writes an external guid reference to the stream. Declaration public override void WriteExternalReference(string name, Guid guid) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid guid The value to write. Overrides BaseDataWriter.WriteExternalReference(String, Guid) WriteExternalReference(String, Int32) Writes an external index reference to the stream. Declaration public override void WriteExternalReference(string name, int index) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 index The value to write. Overrides BaseDataWriter.WriteExternalReference(String, Int32) WriteExternalReference(String, String) Writes an external string reference to the stream. Declaration public override void WriteExternalReference(string name, string id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String id The value to write. Overrides BaseDataWriter.WriteExternalReference(String, String) WriteGuid(String, Guid) Writes a Guid value to the stream. Declaration public override void WriteGuid(string name, Guid value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Guid value The value to write. Overrides BaseDataWriter.WriteGuid(String, Guid) WriteInt16(String, Int16) Writes a Int16 value to the stream. Declaration public override void WriteInt16(string name, short value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int16 value The value to write. Overrides BaseDataWriter.WriteInt16(String, Int16) WriteInt32(String, Int32) Writes an Int32 value to the stream. Declaration public override void WriteInt32(string name, int value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 value The value to write. Overrides BaseDataWriter.WriteInt32(String, Int32) WriteInt64(String, Int64) Writes a Int64 value to the stream. Declaration public override void WriteInt64(string name, long value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int64 value The value to write. Overrides BaseDataWriter.WriteInt64(String, Int64) WriteInternalReference(String, Int32) Writes an internal reference to the stream. Declaration public override void WriteInternalReference(string name, int id) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Int32 id The value to write. Overrides BaseDataWriter.WriteInternalReference(String, Int32) WriteNull(String) Writes a null value to the stream. Declaration public override void WriteNull(string name) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Overrides BaseDataWriter.WriteNull(String) WritePrimitiveArray<T>(T[]) Writes a primitive array to the stream. Declaration public override void WritePrimitiveArray<T>(T[] array) where T : struct Parameters Type Name Description T[] array The primitive array to write. Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . Overrides TirUtilities.External.OdinSerializer.BaseDataWriter.WritePrimitiveArray<T>(T[]) Exceptions Type Condition ArgumentException Type + typeof(T).Name + is not a valid primitive array type. ArgumentNullException array WriteSByte(String, SByte) Writes an SByte value to the stream. Declaration public override void WriteSByte(string name, sbyte value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. SByte value The value to write. Overrides BaseDataWriter.WriteSByte(String, SByte) WriteSingle(String, Single) Writes a Single value to the stream. Declaration public override void WriteSingle(string name, float value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. Single value The value to write. Overrides BaseDataWriter.WriteSingle(String, Single) WriteString(String, String) Writes a String value to the stream. Declaration public override void WriteString(string name, string value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. String value The value to write. Overrides BaseDataWriter.WriteString(String, String) WriteUInt16(String, UInt16) Writes an UInt16 value to the stream. Declaration public override void WriteUInt16(string name, ushort value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt16 value The value to write. Overrides BaseDataWriter.WriteUInt16(String, UInt16) WriteUInt32(String, UInt32) Writes an UInt32 value to the stream. Declaration public override void WriteUInt32(string name, uint value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt32 value The value to write. Overrides BaseDataWriter.WriteUInt32(String, UInt32) WriteUInt64(String, UInt64) Writes an UInt64 value to the stream. Declaration public override void WriteUInt64(string name, ulong value) Parameters Type Name Description String name The name of the value. If this is null, no name will be written. UInt64 value The value to write. Overrides BaseDataWriter.WriteUInt64(String, UInt64) Implements IDataWriter See Also BaseDataWriter"
  },
  "api/TirUtilities.External.OdinSerializer.JsonTextReader.html": {
    "href": "api/TirUtilities.External.OdinSerializer.JsonTextReader.html",
    "title": "Class JsonTextReader | TirUtilities",
    "keywords": "Class JsonTextReader Parses json entries from a stream. Inheritance Object JsonTextReader Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class JsonTextReader : IDisposable Constructors JsonTextReader(Stream, DeserializationContext) Initializes a new instance of the JsonTextReader class. Declaration public JsonTextReader(Stream stream, DeserializationContext context) Parameters Type Name Description Stream stream The stream to parse from. DeserializationContext context The deserialization context to use. Exceptions Type Condition ArgumentNullException The stream is null. ArgumentException Cannot read from the stream. Properties Context The current deserialization context used by the text reader. Declaration public DeserializationContext Context { get; } Property Value Type Description DeserializationContext Methods Dispose() Disposes all resources kept by the text reader, except the stream, which can be reused later. Declaration public void Dispose() ReadToNextEntry(out String, out String, out EntryType) Reads to (but not past) the beginning of the next json entry, and returns the entry name, contents and type. Declaration public void ReadToNextEntry(out string name, out string valueContent, out EntryType entry) Parameters Type Name Description String name The name of the entry that was parsed. String valueContent The content of the entry that was parsed. EntryType entry The type of the entry that was parsed. Reset() Resets the reader instance's currently peeked char and emergency playback queue. Declaration public void Reset() See Also IDisposable"
  },
  "api/TirUtilities.External.OdinSerializer.KeyframeFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.KeyframeFormatter.html",
    "title": "Class KeyframeFormatter | TirUtilities",
    "keywords": "Class KeyframeFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Keyframe > KeyframeFormatter Implements IFormatter < Keyframe > IFormatter Inherited Members MinimalBaseFormatter<Keyframe>.IsValueType MinimalBaseFormatter<Keyframe>.SerializedType MinimalBaseFormatter<Keyframe>.Deserialize(IDataReader) MinimalBaseFormatter<Keyframe>.Serialize(Keyframe, IDataWriter) MinimalBaseFormatter<Keyframe>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Keyframe>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Keyframe>.GetUninitializedObject() MinimalBaseFormatter<Keyframe>.RegisterReferenceID(Keyframe, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class KeyframeFormatter : MinimalBaseFormatter<Keyframe>, IFormatter<Keyframe>, IFormatter Methods Read(ref Keyframe, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Keyframe value, IDataReader reader) Parameters Type Name Description Keyframe value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Keyframe>.Read(Keyframe, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Keyframe, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Keyframe value, IDataWriter writer) Parameters Type Name Description Keyframe value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Keyframe>.Write(Keyframe, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.KeyValuePairFormatter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.KeyValuePairFormatter-2.html",
    "title": "Class KeyValuePairFormatter<TKey, TValue> | TirUtilities",
    "keywords": "Class KeyValuePairFormatter<TKey, TValue> Custom generic formatter for the generic type definition KeyValuePair<TKey,TValue> . Inheritance Object BaseFormatter < KeyValuePair <TKey, TValue>> KeyValuePairFormatter<TKey, TValue> Implements IFormatter < KeyValuePair <TKey, TValue>> IFormatter Inherited Members BaseFormatter<KeyValuePair<TKey, TValue>>.OnSerializingCallbacks BaseFormatter<KeyValuePair<TKey, TValue>>.OnSerializedCallbacks BaseFormatter<KeyValuePair<TKey, TValue>>.OnDeserializingCallbacks BaseFormatter<KeyValuePair<TKey, TValue>>.OnDeserializedCallbacks BaseFormatter<KeyValuePair<TKey, TValue>>.IsValueType BaseFormatter<KeyValuePair<TKey, TValue>>.ImplementsISerializationCallbackReceiver BaseFormatter<KeyValuePair<TKey, TValue>>.ImplementsIDeserializationCallback BaseFormatter<KeyValuePair<TKey, TValue>>.ImplementsIObjectReference BaseFormatter<KeyValuePair<TKey, TValue>>.SerializedType BaseFormatter<KeyValuePair<TKey, TValue>>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<KeyValuePair<TKey, TValue>>.IFormatter.Deserialize(IDataReader) BaseFormatter<KeyValuePair<TKey, TValue>>.Deserialize(IDataReader) BaseFormatter<KeyValuePair<TKey, TValue>>.Serialize(KeyValuePair<TKey, TValue>, IDataWriter) BaseFormatter<KeyValuePair<TKey, TValue>>.GetUninitializedObject() BaseFormatter<KeyValuePair<TKey, TValue>>.RegisterReferenceID(KeyValuePair<TKey, TValue>, IDataReader) BaseFormatter<KeyValuePair<TKey, TValue>>.InvokeOnDeserializingCallbacks(KeyValuePair<TKey, TValue>, DeserializationContext) BaseFormatter<KeyValuePair<TKey, TValue>>.InvokeOnDeserializingCallbacks(KeyValuePair<TKey, TValue>, DeserializationContext) BaseFormatter<KeyValuePair<TKey, TValue>>.DeserializeImplementation(KeyValuePair<TKey, TValue>, IDataReader) BaseFormatter<KeyValuePair<TKey, TValue>>.SerializeImplementation(KeyValuePair<TKey, TValue>, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class KeyValuePairFormatter<TKey, TValue> : BaseFormatter<KeyValuePair<TKey, TValue>>, IFormatter<KeyValuePair<TKey, TValue>>, IFormatter Type Parameters Name Description TKey The type of the key. TValue The type of the value. Methods DeserializeImplementation(ref KeyValuePair<TKey, TValue>, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref KeyValuePair<TKey, TValue> value, IDataReader reader) Parameters Type Name Description KeyValuePair <TKey, TValue> value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.KeyValuePair<TKey, TValue>>.DeserializeImplementation(System.Collections.Generic.KeyValuePair<TKey, TValue>, TirUtilities.External.OdinSerializer.IDataReader) SerializeImplementation(ref KeyValuePair<TKey, TValue>, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref KeyValuePair<TKey, TValue> value, IDataWriter writer) Parameters Type Name Description KeyValuePair <TKey, TValue> value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.KeyValuePair<TKey, TValue>>.SerializeImplementation(System.Collections.Generic.KeyValuePair<TKey, TValue>, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.LayerMaskFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.LayerMaskFormatter.html",
    "title": "Class LayerMaskFormatter | TirUtilities",
    "keywords": "Class LayerMaskFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < LayerMask > LayerMaskFormatter Implements IFormatter < LayerMask > IFormatter Inherited Members MinimalBaseFormatter<LayerMask>.IsValueType MinimalBaseFormatter<LayerMask>.SerializedType MinimalBaseFormatter<LayerMask>.Deserialize(IDataReader) MinimalBaseFormatter<LayerMask>.Serialize(LayerMask, IDataWriter) MinimalBaseFormatter<LayerMask>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<LayerMask>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<LayerMask>.GetUninitializedObject() MinimalBaseFormatter<LayerMask>.RegisterReferenceID(LayerMask, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class LayerMaskFormatter : MinimalBaseFormatter<LayerMask>, IFormatter<LayerMask>, IFormatter Methods Read(ref LayerMask, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref LayerMask value, IDataReader reader) Parameters Type Name Description LayerMask value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<LayerMask>.Read(LayerMask, TirUtilities.External.OdinSerializer.IDataReader) Write(ref LayerMask, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref LayerMask value, IDataWriter writer) Parameters Type Name Description LayerMask value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<LayerMask>.Write(LayerMask, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ListFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ListFormatter-1.html",
    "title": "Class ListFormatter<T> | TirUtilities",
    "keywords": "Class ListFormatter<T> Custom generic formatter for the generic type definition List<T> . Inheritance Object BaseFormatter < List <T>> ListFormatter<T> Implements IFormatter < List <T>> IFormatter Inherited Members BaseFormatter<List<T>>.OnSerializingCallbacks BaseFormatter<List<T>>.OnSerializedCallbacks BaseFormatter<List<T>>.OnDeserializingCallbacks BaseFormatter<List<T>>.OnDeserializedCallbacks BaseFormatter<List<T>>.IsValueType BaseFormatter<List<T>>.ImplementsISerializationCallbackReceiver BaseFormatter<List<T>>.ImplementsIDeserializationCallback BaseFormatter<List<T>>.ImplementsIObjectReference BaseFormatter<List<T>>.SerializedType BaseFormatter<List<T>>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<List<T>>.IFormatter.Deserialize(IDataReader) BaseFormatter<List<T>>.Deserialize(IDataReader) BaseFormatter<List<T>>.Serialize(List<T>, IDataWriter) BaseFormatter<List<T>>.RegisterReferenceID(List<T>, IDataReader) BaseFormatter<List<T>>.InvokeOnDeserializingCallbacks(List<T>, DeserializationContext) BaseFormatter<List<T>>.InvokeOnDeserializingCallbacks(List<T>, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class ListFormatter<T> : BaseFormatter<List<T>>, IFormatter<List<T>>, IFormatter Type Parameters Name Description T The element type of the formatted list. Constructors ListFormatter() Declaration public ListFormatter() Methods DeserializeImplementation(ref List<T>, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref List<T> value, IDataReader reader) Parameters Type Name Description List <T> value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.List<T>>.DeserializeImplementation(System.Collections.Generic.List<T>, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override List<T> GetUninitializedObject() Returns Type Description List <T> A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.List<T>>.GetUninitializedObject() SerializeImplementation(ref List<T>, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref List<T> value, IDataWriter writer) Parameters Type Name Description List <T> value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Collections.Generic.List<T>>.SerializeImplementation(System.Collections.Generic.List<T>, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.LoggingPolicy.html": {
    "href": "api/TirUtilities.External.OdinSerializer.LoggingPolicy.html",
    "title": "Enum LoggingPolicy | TirUtilities",
    "keywords": "Enum LoggingPolicy The policy for which level of logging to do during serialization and deserialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum LoggingPolicy Fields Name Description LogErrors Log errors. LogWarningsAndErrors Log both warnings and errors. Silent Log nothing at all. Note: Some extremely severe categories of errors are logged regardless of this setting."
  },
  "api/TirUtilities.External.OdinSerializer.MethodInfoFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.MethodInfoFormatter-1.html",
    "title": "Class MethodInfoFormatter<T> | TirUtilities",
    "keywords": "Class MethodInfoFormatter<T> Custom formatter for MethodInfo, since Unity Mono's MethodInfo ISerializable implementation will often crash if the method no longer exists upon deserialization. Inheritance Object BaseFormatter <T> MethodInfoFormatter<T> Implements IFormatter <T> IFormatter Inherited Members BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class MethodInfoFormatter<T> : BaseFormatter<T>, IFormatter<T>, IFormatter where T : MethodInfo Type Parameters Name Description T Methods DeserializeImplementation(ref T, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value The uninitialized value to serialize into. This value will have been created earlier using OdinSerializer.BaseFormatter`1.GetUninitializedObject . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.DeserializeImplementation(T, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Get an uninitialized object of type . WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins. You will have to call OdinSerializer.BaseFormatter`1.RegisterReferenceID(`0,OdinSerializer.IDataReader) and OdinSerializer.BaseFormatter`1.InvokeOnDeserializingCallbacks(`0,OdinSerializer.DeserializationContext) immediately after creating the object yourself during deserialization. Declaration protected override T GetUninitializedObject() Returns Type Description T An uninitialized object of type . Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.GetUninitializedObject() SerializeImplementation(ref T, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.SerializeImplementation(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.MinimalBaseFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.MinimalBaseFormatter-1.html",
    "title": "Class MinimalBaseFormatter<T> | TirUtilities",
    "keywords": "Class MinimalBaseFormatter<T> Minimal baseline formatter. Doesn't come with all the bells and whistles of any of the other BaseFormatter classes. Common serialization conventions aren't automatically supported, and common deserialization callbacks are not automatically invoked. Inheritance Object MinimalBaseFormatter<T> AnimationCurveFormatter BoundsFormatter Color32Formatter ColorBlockFormatter<T> ColorFormatter DateTimeFormatter DateTimeOffsetFormatter GradientAlphaKeyFormatter GradientColorKeyFormatter GradientFormatter KeyframeFormatter LayerMaskFormatter PrimitiveArrayFormatter<T> QuaternionFormatter RectFormatter TimeSpanFormatter TypeFormatter Vector2Formatter Vector3Formatter Vector4Formatter VersionFormatter Implements IFormatter <T> IFormatter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class MinimalBaseFormatter<T> : IFormatter<T>, IFormatter Type Parameters Name Description T The type which can be serialized and deserialized by the formatter. Fields IsValueType Whether the serialized value is a value type. Declaration protected static readonly bool IsValueType Field Value Type Description Boolean Properties SerializedType Gets the type that the formatter can serialize. Declaration public Type SerializedType { get; } Property Value Type Description Type The type that the formatter can serialize. Methods Deserialize(IDataReader) Deserializes a value of type using a specified OdinSerializer.IDataReader . Declaration public T Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The deserialized value. GetUninitializedObject() Get an uninitialized object of type . WARNING: If you override this and return null, the object's ID will not be automatically registered. You will have to call MinimalBaseFormatter<T> immediately after creating the object yourself during deserialization. Declaration protected virtual T GetUninitializedObject() Returns Type Description T An uninitialized object of type . Read(ref T, IDataReader) Reads into the specified value using the specified reader. Declaration protected abstract void Read(ref T value, IDataReader reader) Parameters Type Name Description T value The value to read into. IDataReader reader The reader to use. RegisterReferenceID(T, IDataReader) Registers the given object reference in the deserialization context. NOTE that this method only does anything if is not a value type. Declaration protected void RegisterReferenceID(T value, IDataReader reader) Parameters Type Name Description T value The value to register. IDataReader reader The reader which is currently being used. Serialize(T, IDataWriter) Serializes a value of type using a specified OdinSerializer.IDataWriter . Declaration public void Serialize(T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to use. Write(ref T, IDataWriter) Writes from the specified value using the specified writer. Declaration protected abstract void Write(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to write from. IDataWriter writer The writer to use. Explicit Interface Implementations IFormatter.Deserialize(IDataReader) Deserializes a value using a specified IDataReader . Declaration object IFormatter.Deserialize(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Object The deserialized value. IFormatter.Serialize(Object, IDataWriter) Serializes a value using a specified IDataWriter . Declaration void IFormatter.Serialize(object value, IDataWriter writer) Parameters Type Name Description Object value The value to serialize. IDataWriter writer The writer to use. Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.MultiDimensionalArrayFormatter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.MultiDimensionalArrayFormatter-2.html",
    "title": "Class MultiDimensionalArrayFormatter<TArray, TElement> | TirUtilities",
    "keywords": "Class MultiDimensionalArrayFormatter<TArray, TElement> Formatter for all arrays with more than one dimension. Inheritance Object BaseFormatter <TArray> MultiDimensionalArrayFormatter<TArray, TElement> Implements IFormatter <TArray> IFormatter Inherited Members BaseFormatter<TArray>.OnSerializingCallbacks BaseFormatter<TArray>.OnSerializedCallbacks BaseFormatter<TArray>.OnDeserializingCallbacks BaseFormatter<TArray>.OnDeserializedCallbacks BaseFormatter<TArray>.IsValueType BaseFormatter<TArray>.ImplementsISerializationCallbackReceiver BaseFormatter<TArray>.ImplementsIDeserializationCallback BaseFormatter<TArray>.ImplementsIObjectReference BaseFormatter<TArray>.SerializedType BaseFormatter<TArray>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<TArray>.IFormatter.Deserialize(IDataReader) BaseFormatter<TArray>.Deserialize(IDataReader) BaseFormatter<TArray>.Serialize(TArray, IDataWriter) BaseFormatter<TArray>.RegisterReferenceID(TArray, IDataReader) BaseFormatter<TArray>.InvokeOnDeserializingCallbacks(TArray, DeserializationContext) BaseFormatter<TArray>.InvokeOnDeserializingCallbacks(TArray, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class MultiDimensionalArrayFormatter<TArray, TElement> : BaseFormatter<TArray>, IFormatter<TArray>, IFormatter where TArray : class Type Parameters Name Description TArray The type of the formatted array. TElement The element type of the formatted array. Methods DeserializeImplementation(ref TArray, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref TArray value, IDataReader reader) Parameters Type Name Description TArray value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TArray>.DeserializeImplementation(TArray, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override TArray GetUninitializedObject() Returns Type Description TArray A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TArray>.GetUninitializedObject() SerializeImplementation(ref TArray, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref TArray value, IDataWriter writer) Parameters Type Name Description TArray value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TArray>.SerializeImplementation(TArray, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.NodeInfo.html": {
    "href": "api/TirUtilities.External.OdinSerializer.NodeInfo.html",
    "title": "Struct NodeInfo | TirUtilities",
    "keywords": "Struct NodeInfo Contains information about a node during deserialization and serialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public struct NodeInfo Constructors NodeInfo(String, Int32, Type, Boolean) Initializes a new instance of the NodeInfo struct. Declaration public NodeInfo(string name, int id, Type type, bool isArray) Parameters Type Name Description String name The name of the node. Int32 id The id of the node. Type type The type of the node. Boolean isArray If set to true the node is an array node. Fields Empty An empty node. Declaration public static readonly NodeInfo Empty Field Value Type Description NodeInfo Id The id of the node, or -1 if the node has no id. Declaration public readonly int Id Field Value Type Description Int32 IsArray Whether the node is an array or not. Declaration public readonly bool IsArray Field Value Type Description Boolean IsEmpty Whether the node is an empty node. Declaration public readonly bool IsEmpty Field Value Type Description Boolean Name The name of the node. Declaration public readonly string Name Field Value Type Description String Type The type of the node, or null if the node has no type metadata. Declaration public readonly Type Type Field Value Type Description Type Methods Equals(Object) Determines whether the specified Object , is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The Object to compare with this instance. Returns Type Description Boolean true if the specified Object is equal to this instance; otherwise, false . Overrides ValueType.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides ValueType.GetHashCode() Operators Equality(NodeInfo, NodeInfo) Implements the operator == between NodeInfo and NodeInfo . Declaration public static bool operator ==(NodeInfo a, NodeInfo b) Parameters Type Name Description NodeInfo a The first NodeInfo . NodeInfo b The second NodeInfo . Returns Type Description Boolean true if the nodes were equal; otherwise, false . Inequality(NodeInfo, NodeInfo) Implements the operator != between NodeInfo and NodeInfo . Declaration public static bool operator !=(NodeInfo a, NodeInfo b) Parameters Type Name Description NodeInfo a The first NodeInfo . NodeInfo b The second NodeInfo . Returns Type Description Boolean true if the nodes were not equal; otherwise, false ."
  },
  "api/TirUtilities.External.OdinSerializer.NullableFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.NullableFormatter-1.html",
    "title": "Class NullableFormatter<T> | TirUtilities",
    "keywords": "Class NullableFormatter<T> Formatter for all Nullable<T> types. Inheritance Object BaseFormatter < Nullable <T>> NullableFormatter<T> Implements IFormatter < Nullable <T>> IFormatter Inherited Members BaseFormatter<Nullable<T>>.OnSerializingCallbacks BaseFormatter<Nullable<T>>.OnSerializedCallbacks BaseFormatter<Nullable<T>>.OnDeserializingCallbacks BaseFormatter<Nullable<T>>.OnDeserializedCallbacks BaseFormatter<Nullable<T>>.IsValueType BaseFormatter<Nullable<T>>.ImplementsISerializationCallbackReceiver BaseFormatter<Nullable<T>>.ImplementsIDeserializationCallback BaseFormatter<Nullable<T>>.ImplementsIObjectReference BaseFormatter<Nullable<T>>.SerializedType BaseFormatter<Nullable<T>>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<Nullable<T>>.IFormatter.Deserialize(IDataReader) BaseFormatter<Nullable<T>>.Deserialize(IDataReader) BaseFormatter<Nullable<T>>.Serialize(Nullable<T>, IDataWriter) BaseFormatter<Nullable<T>>.GetUninitializedObject() BaseFormatter<Nullable<T>>.RegisterReferenceID(Nullable<T>, IDataReader) BaseFormatter<Nullable<T>>.InvokeOnDeserializingCallbacks(Nullable<T>, DeserializationContext) BaseFormatter<Nullable<T>>.InvokeOnDeserializingCallbacks(Nullable<T>, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class NullableFormatter<T> : BaseFormatter<T?>, IFormatter<T?>, IFormatter where T : struct Type Parameters Name Description T The type that is nullable. Constructors NullableFormatter() Creates a new instance of NullableFormatter<T> . Declaration public NullableFormatter() Methods DeserializeImplementation(ref Nullable<T>, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref T? value, IDataReader reader) Parameters Type Name Description Nullable <T> value The uninitialized value to serialize into. This value will have been created earlier using OdinSerializer.BaseFormatter`1.GetUninitializedObject . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Nullable<T>>.DeserializeImplementation(System.Nullable<T>, TirUtilities.External.OdinSerializer.IDataReader) SerializeImplementation(ref Nullable<T>, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref T? value, IDataWriter writer) Parameters Type Name Description Nullable <T> value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<System.Nullable<T>>.SerializeImplementation(System.Nullable<T>, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.OdinSerializeAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.OdinSerializeAttribute.html",
    "title": "Class OdinSerializeAttribute | TirUtilities",
    "keywords": "Class OdinSerializeAttribute Indicates that an instance field or auto-property should be serialized by Odin. Inheritance Object Attribute OdinSerializeAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class OdinSerializeAttribute : Attribute, _Attribute See Also Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.PrefabModification.html": {
    "href": "api/TirUtilities.External.OdinSerializer.PrefabModification.html",
    "title": "Class PrefabModification | TirUtilities",
    "keywords": "Class PrefabModification An Odin-serialized prefab modification, containing all the information necessary to apply the modification. Inheritance Object PrefabModification Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class PrefabModification Fields DictionaryKeysAdded The dictionary keys to add. Declaration public object[] DictionaryKeysAdded Field Value Type Description Object [] DictionaryKeysRemoved The dictionary keys to remove. Declaration public object[] DictionaryKeysRemoved Field Value Type Description Object [] ModificationType The type of modification to be made. Declaration public PrefabModificationType ModificationType Field Value Type Description PrefabModificationType ModifiedValue The modified value to set. Declaration public object ModifiedValue Field Value Type Description Object NewLength The new list length to set. Declaration public int NewLength Field Value Type Description Int32 Path The deep reflection path at which to make the modification. Declaration public string Path Field Value Type Description String ReferencePaths A list of all deep reflection paths in the target object where the value referenced by this modification was also located. Declaration public List<string> ReferencePaths Field Value Type Description List < String > Methods Apply(UnityEngine.Object) Applies the modification to the given Object. Declaration public void Apply(UnityEngine.Object unityObject) Parameters Type Name Description UnityEngine.Object unityObject"
  },
  "api/TirUtilities.External.OdinSerializer.PrefabModificationType.html": {
    "href": "api/TirUtilities.External.OdinSerializer.PrefabModificationType.html",
    "title": "Enum PrefabModificationType | TirUtilities",
    "keywords": "Enum PrefabModificationType Types of prefab modification that can be applied. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public enum PrefabModificationType Fields Name Description Dictionary A dictionary has been changed at a given path. ListLength A list length has been changed at a given path. Value A value has been changed at a given path."
  },
  "api/TirUtilities.External.OdinSerializer.PreviouslySerializedAsAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.PreviouslySerializedAsAttribute.html",
    "title": "Class PreviouslySerializedAsAttribute | TirUtilities",
    "keywords": "Class PreviouslySerializedAsAttribute Indicates that an instance field or auto-property was previously serialized with a different name, so that values serialized with the old name will be properly deserialized into this member. This does the same as Unity's FormerlySerializedAs attribute, except it can also be applied to properties. Inheritance Object Attribute PreviouslySerializedAsAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)] public class PreviouslySerializedAsAttribute : Attribute, _Attribute Constructors PreviouslySerializedAsAttribute(String) Initializes a new instance of the PreviouslySerializedAsAttribute class. Declaration public PreviouslySerializedAsAttribute(string name) Parameters Type Name Description String name The former name. Properties Name The former name. Declaration public string Name { get; } Property Value Type Description String See Also Attribute"
  },
  "api/TirUtilities.External.OdinSerializer.PrimitiveArrayFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.PrimitiveArrayFormatter-1.html",
    "title": "Class PrimitiveArrayFormatter<T> | TirUtilities",
    "keywords": "Class PrimitiveArrayFormatter<T> Formatter for all primitive one-dimensional arrays. Inheritance Object MinimalBaseFormatter <T[]> PrimitiveArrayFormatter<T> Implements IFormatter <T[]> IFormatter Inherited Members MinimalBaseFormatter<T[]>.IsValueType MinimalBaseFormatter<T[]>.SerializedType MinimalBaseFormatter<T[]>.Deserialize(IDataReader) MinimalBaseFormatter<T[]>.Serialize(T[], IDataWriter) MinimalBaseFormatter<T[]>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<T[]>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<T[]>.GetUninitializedObject() MinimalBaseFormatter<T[]>.Read(T[], IDataReader) MinimalBaseFormatter<T[]>.Write(T[], IDataWriter) MinimalBaseFormatter<T[]>.RegisterReferenceID(T[], IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class PrimitiveArrayFormatter<T> : MinimalBaseFormatter<T[]>, IFormatter<T[]>, IFormatter where T : struct Type Parameters Name Description T The element type of the formatted array. This type must be an eligible primitive array type, as determined by IsPrimitiveArrayType(Type) . Methods GetUninitializedObject() Returns null. Declaration protected override T[] GetUninitializedObject() Returns Type Description T[] A null value. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<T[]>.GetUninitializedObject() Read(ref T[], IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref T[] value, IDataReader reader) Parameters Type Name Description T[] value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<T[]>.Read(T[], TirUtilities.External.OdinSerializer.IDataReader) Write(ref T[], IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref T[] value, IDataWriter writer) Parameters Type Name Description T[] value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<T[]>.Write(T[], TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ProperBitConverter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ProperBitConverter.html",
    "title": "Class ProperBitConverter | TirUtilities",
    "keywords": "Class ProperBitConverter Corresponds to the .NET BitConverter class, but works only with buffers and so never allocates garbage. This class always writes and reads bytes in a little endian format, regardless of system architecture. Inheritance Object ProperBitConverter Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class ProperBitConverter Methods BytesToHexString(Byte[], Boolean) Converts a byte array into a hexadecimal string. Declaration public static string BytesToHexString(byte[] bytes, bool lowerCaseHexChars = true) Parameters Type Name Description Byte [] bytes Boolean lowerCaseHexChars Returns Type Description String GetBytes(Byte[], Int32, Decimal) Turns a Decimal value into sixteen bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, decimal value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Decimal value The value to write. GetBytes(Byte[], Int32, Double) Turns a Double value into eight bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, double value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Double value The value to write. GetBytes(Byte[], Int32, Guid) Turns a Guid value into sixteen bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, Guid value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Guid value The value to write. GetBytes(Byte[], Int32, Int16) Turns a Int16 value into two bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, short value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Int16 value The value to write. GetBytes(Byte[], Int32, Int32) Turns an Int32 value into four bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, int value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Int32 value The value to write. GetBytes(Byte[], Int32, Int64) Turns a Int64 value into eight bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, long value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Int64 value The value to write. GetBytes(Byte[], Int32, Single) Turns a Single value into four bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, float value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. Single value The value to write. GetBytes(Byte[], Int32, UInt16) Turns an UInt16 value into two bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, ushort value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. UInt16 value The value to write. GetBytes(Byte[], Int32, UInt32) Turns an UInt32 value into four bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, uint value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. UInt32 value The value to write. GetBytes(Byte[], Int32, UInt64) Turns an UInt64 value into eight bytes and writes those bytes to a given buffer. Declaration public static void GetBytes(byte[] buffer, int index, ulong value) Parameters Type Name Description Byte [] buffer The buffer to write to. Int32 index The index to start writing at. UInt64 value The value to write. HexStringToBytes(String) Converts a hexadecimal string into a byte array. Declaration public static byte[] HexStringToBytes(string hex) Parameters Type Name Description String hex Returns Type Description Byte [] ToDecimal(Byte[], Int32) Reads sixteen bytes from a buffer and converts them into a Decimal value. Declaration public static decimal ToDecimal(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Decimal The converted value. ToDouble(Byte[], Int32) Reads eight bytes from a buffer and converts them into an Double value. Declaration public static double ToDouble(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Double The converted value. ToGuid(Byte[], Int32) Reads sixteen bytes from a buffer and converts them into a Guid value. Declaration public static Guid ToGuid(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Guid The converted value. ToInt16(Byte[], Int32) Reads two bytes from a buffer and converts them into a Int16 value. Declaration public static short ToInt16(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Int16 The converted value. ToInt32(Byte[], Int32) Reads four bytes from a buffer and converts them into an Int32 value. Declaration public static int ToInt32(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Int32 The converted value. ToInt64(Byte[], Int32) Reads eight bytes from a buffer and converts them into a Int64 value. Declaration public static long ToInt64(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Int64 The converted value. ToSingle(Byte[], Int32) Reads four bytes from a buffer and converts them into an Single value. Declaration public static float ToSingle(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description Single The converted value. ToUInt16(Byte[], Int32) Reads two bytes from a buffer and converts them into a UInt16 value. Declaration public static ushort ToUInt16(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description UInt16 The converted value. ToUInt32(Byte[], Int32) Reads four bytes from a buffer and converts them into an UInt32 value. Declaration public static uint ToUInt32(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description UInt32 The converted value. ToUInt64(Byte[], Int32) Reads eight bytes from a buffer and converts them into an UInt64 value. Declaration public static ulong ToUInt64(byte[] buffer, int index) Parameters Type Name Description Byte [] buffer The buffer to read from. Int32 index The index to start reading at. Returns Type Description UInt64 The converted value."
  },
  "api/TirUtilities.External.OdinSerializer.QuaternionFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.QuaternionFormatter.html",
    "title": "Class QuaternionFormatter | TirUtilities",
    "keywords": "Class QuaternionFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Quaternion > QuaternionFormatter Implements IFormatter < Quaternion > IFormatter Inherited Members MinimalBaseFormatter<Quaternion>.IsValueType MinimalBaseFormatter<Quaternion>.SerializedType MinimalBaseFormatter<Quaternion>.Deserialize(IDataReader) MinimalBaseFormatter<Quaternion>.Serialize(Quaternion, IDataWriter) MinimalBaseFormatter<Quaternion>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Quaternion>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Quaternion>.GetUninitializedObject() MinimalBaseFormatter<Quaternion>.RegisterReferenceID(Quaternion, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class QuaternionFormatter : MinimalBaseFormatter<Quaternion>, IFormatter<Quaternion>, IFormatter Methods Read(ref Quaternion, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Quaternion value, IDataReader reader) Parameters Type Name Description Quaternion value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Quaternion>.Read(Quaternion, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Quaternion, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Quaternion value, IDataWriter writer) Parameters Type Name Description Quaternion value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Quaternion>.Write(Quaternion, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.QueueFormatter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.QueueFormatter-2.html",
    "title": "Class QueueFormatter<TQueue, TValue> | TirUtilities",
    "keywords": "Class QueueFormatter<TQueue, TValue> Custom generic formatter for the generic type definition Queue<T> . Inheritance Object BaseFormatter <TQueue> QueueFormatter<TQueue, TValue> Implements IFormatter <TQueue> IFormatter Inherited Members BaseFormatter<TQueue>.OnSerializingCallbacks BaseFormatter<TQueue>.OnSerializedCallbacks BaseFormatter<TQueue>.OnDeserializingCallbacks BaseFormatter<TQueue>.OnDeserializedCallbacks BaseFormatter<TQueue>.IsValueType BaseFormatter<TQueue>.ImplementsISerializationCallbackReceiver BaseFormatter<TQueue>.ImplementsIDeserializationCallback BaseFormatter<TQueue>.ImplementsIObjectReference BaseFormatter<TQueue>.SerializedType BaseFormatter<TQueue>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<TQueue>.IFormatter.Deserialize(IDataReader) BaseFormatter<TQueue>.Deserialize(IDataReader) BaseFormatter<TQueue>.Serialize(TQueue, IDataWriter) BaseFormatter<TQueue>.RegisterReferenceID(TQueue, IDataReader) BaseFormatter<TQueue>.InvokeOnDeserializingCallbacks(TQueue, DeserializationContext) BaseFormatter<TQueue>.InvokeOnDeserializingCallbacks(TQueue, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class QueueFormatter<TQueue, TValue> : BaseFormatter<TQueue>, IFormatter<TQueue>, IFormatter where TQueue : Queue<TValue>, new() Type Parameters Name Description TQueue TValue Constructors QueueFormatter() Declaration public QueueFormatter() Methods DeserializeImplementation(ref TQueue, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref TQueue value, IDataReader reader) Parameters Type Name Description TQueue value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TQueue>.DeserializeImplementation(TQueue, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override TQueue GetUninitializedObject() Returns Type Description TQueue A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TQueue>.GetUninitializedObject() SerializeImplementation(ref TQueue, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref TQueue value, IDataWriter writer) Parameters Type Name Description TQueue value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TQueue>.SerializeImplementation(TQueue, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.RectFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.RectFormatter.html",
    "title": "Class RectFormatter | TirUtilities",
    "keywords": "Class RectFormatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Rect > RectFormatter Implements IFormatter < Rect > IFormatter Inherited Members MinimalBaseFormatter<Rect>.IsValueType MinimalBaseFormatter<Rect>.SerializedType MinimalBaseFormatter<Rect>.Deserialize(IDataReader) MinimalBaseFormatter<Rect>.Serialize(Rect, IDataWriter) MinimalBaseFormatter<Rect>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Rect>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Rect>.GetUninitializedObject() MinimalBaseFormatter<Rect>.RegisterReferenceID(Rect, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class RectFormatter : MinimalBaseFormatter<Rect>, IFormatter<Rect>, IFormatter Methods Read(ref Rect, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Rect value, IDataReader reader) Parameters Type Name Description Rect value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Rect>.Read(Rect, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Rect, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Rect value, IDataWriter writer) Parameters Type Name Description Rect value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Rect>.Write(Rect, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ReflectionFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ReflectionFormatter-1.html",
    "title": "Class ReflectionFormatter<T> | TirUtilities",
    "keywords": "Class ReflectionFormatter<T> Final fallback formatter for all types which have no other formatters. This formatter relies on reflection to work, and is thus comparatively slow and creates more garbage than a custom formatter. Inheritance Object BaseFormatter <T> ReflectionFormatter<T> ReflectionOrEmittedBaseFormatter<T> UnityEventFormatter<T> Implements IFormatter <T> IFormatter Inherited Members BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class ReflectionFormatter<T> : BaseFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T The type which can be serialized and deserialized by the formatter. Constructors ReflectionFormatter() Declaration public ReflectionFormatter() ReflectionFormatter(ISerializationPolicy) Declaration public ReflectionFormatter(ISerializationPolicy overridePolicy) Parameters Type Name Description ISerializationPolicy overridePolicy Properties OverridePolicy Declaration public ISerializationPolicy OverridePolicy { get; } Property Value Type Description ISerializationPolicy Methods DeserializeImplementation(ref T, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.DeserializeImplementation(T, TirUtilities.External.OdinSerializer.IDataReader) SerializeImplementation(ref T, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.SerializeImplementation(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.ReflectionOrEmittedBaseFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.ReflectionOrEmittedBaseFormatter-1.html",
    "title": "Class ReflectionOrEmittedBaseFormatter<T> | TirUtilities",
    "keywords": "Class ReflectionOrEmittedBaseFormatter<T> Inheritance Object BaseFormatter <T> ReflectionFormatter <T> ReflectionOrEmittedBaseFormatter<T> Implements IFormatter <T> IFormatter Inherited Members ReflectionFormatter<T>.OverridePolicy ReflectionFormatter<T>.DeserializeImplementation(T, IDataReader) ReflectionFormatter<T>.SerializeImplementation(T, IDataWriter) BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class ReflectionOrEmittedBaseFormatter<T> : ReflectionFormatter<T>, IFormatter<T>, IFormatter Type Parameters Name Description T Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.RegisterDictionaryKeyPathProviderAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.RegisterDictionaryKeyPathProviderAttribute.html",
    "title": "Class RegisterDictionaryKeyPathProviderAttribute | TirUtilities",
    "keywords": "Class RegisterDictionaryKeyPathProviderAttribute Inheritance Object Attribute RegisterDictionaryKeyPathProviderAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public sealed class RegisterDictionaryKeyPathProviderAttribute : Attribute, _Attribute Constructors RegisterDictionaryKeyPathProviderAttribute(Type) Declaration public RegisterDictionaryKeyPathProviderAttribute(Type providerType) Parameters Type Name Description Type providerType Fields ProviderType Declaration public readonly Type ProviderType Field Value Type Description Type"
  },
  "api/TirUtilities.External.OdinSerializer.RegisterFormatterAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.RegisterFormatterAttribute.html",
    "title": "Class RegisterFormatterAttribute | TirUtilities",
    "keywords": "Class RegisterFormatterAttribute Inheritance Object Attribute RegisterFormatterAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class RegisterFormatterAttribute : Attribute, _Attribute Constructors RegisterFormatterAttribute(Type, Int32) Declaration public RegisterFormatterAttribute(Type formatterType, int priority = 0) Parameters Type Name Description Type formatterType Int32 priority Properties FormatterType Declaration public Type FormatterType { get; } Property Value Type Description Type Priority Declaration public int Priority { get; } Property Value Type Description Int32"
  },
  "api/TirUtilities.External.OdinSerializer.RegisterFormatterLocatorAttribute.html": {
    "href": "api/TirUtilities.External.OdinSerializer.RegisterFormatterLocatorAttribute.html",
    "title": "Class RegisterFormatterLocatorAttribute | TirUtilities",
    "keywords": "Class RegisterFormatterLocatorAttribute Inheritance Object Attribute RegisterFormatterLocatorAttribute Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = true)] public class RegisterFormatterLocatorAttribute : Attribute, _Attribute Constructors RegisterFormatterLocatorAttribute(Type, Int32) Declaration public RegisterFormatterLocatorAttribute(Type formatterLocatorType, int priority = 0) Parameters Type Name Description Type formatterLocatorType Int32 priority Properties FormatterLocatorType Declaration public Type FormatterLocatorType { get; } Property Value Type Description Type Priority Declaration public int Priority { get; } Property Value Type Description Int32"
  },
  "api/TirUtilities.External.OdinSerializer.SByteSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SByteSerializer.html",
    "title": "Class SByteSerializer | TirUtilities",
    "keywords": "Class SByteSerializer Serializer for the SByte type. Inheritance Object Serializer Serializer < SByte > SByteSerializer Inherited Members Serializer<SByte>.ReadValueWeak(IDataReader) Serializer<SByte>.WriteValueWeak(String, Object, IDataWriter) Serializer<SByte>.WriteValue(SByte, IDataWriter) Serializer<SByte>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class SByteSerializer : Serializer<sbyte> Methods ReadValue(IDataReader) Reads a value of type SByte . Declaration public override sbyte ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description SByte The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.SByte>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, SByte, IDataWriter) Writes a value of type SByte . Declaration public override void WriteValue(string name, sbyte value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. SByte value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.SByte>.WriteValue(System.String, System.SByte, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.SelfFormatterFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SelfFormatterFormatter-1.html",
    "title": "Class SelfFormatterFormatter<T> | TirUtilities",
    "keywords": "Class SelfFormatterFormatter<T> Formatter for types that implement the ISelfFormatter interface. Inheritance Object BaseFormatter <T> SelfFormatterFormatter<T> Implements IFormatter <T> IFormatter Inherited Members BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.GetUninitializedObject() BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class SelfFormatterFormatter<T> : BaseFormatter<T>, IFormatter<T>, IFormatter where T : ISelfFormatter Type Parameters Name Description T Methods DeserializeImplementation(ref T, IDataReader) Calls Deserialize(IDataReader) on the value to deserialize. Declaration protected override void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value IDataReader reader Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.DeserializeImplementation(T, TirUtilities.External.OdinSerializer.IDataReader) SerializeImplementation(ref T, IDataWriter) Calls Serialize(IDataWriter) on the value to deserialize. Declaration protected override void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value IDataWriter writer Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.SerializeImplementation(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.SerializableFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializableFormatter-1.html",
    "title": "Class SerializableFormatter<T> | TirUtilities",
    "keywords": "Class SerializableFormatter<T> Formatter for all types that implement the ISerializable interface. Inheritance Object BaseFormatter <T> SerializableFormatter<T> Implements IFormatter <T> IFormatter Inherited Members BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class SerializableFormatter<T> : BaseFormatter<T>, IFormatter<T>, IFormatter where T : ISerializable Type Parameters Name Description T The type which can be serialized and deserialized by the formatter. Methods DeserializeImplementation(ref T, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref T value, IDataReader reader) Parameters Type Name Description T value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.DeserializeImplementation(T, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Get an uninitialized object of type . WARNING: If you override this and return null, the object's ID will not be automatically registered and its OnDeserializing callbacks will not be automatically called, before deserialization begins. You will have to call and immediately after creating the object yourself during deserialization. Declaration protected override T GetUninitializedObject() Returns Type Description T An uninitialized object of type . Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.GetUninitializedObject() SerializeImplementation(ref T, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.SerializeImplementation(T, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationAbortException.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationAbortException.html",
    "title": "Class SerializationAbortException | TirUtilities",
    "keywords": "Class SerializationAbortException An exception thrown when the serialization system has encountered an issue so severe that serialization is being aborted. If this exception is caught in the serialization system somewhere, it should be rethrown. Inheritance Object SerializationAbortException Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class SerializationAbortException : Exception Constructors SerializationAbortException(String) Initializes a new instance of the class. Declaration public SerializationAbortException(string message) Parameters Type Name Description String message The message. SerializationAbortException(String, Exception) Initializes a new instance of the class. Declaration public SerializationAbortException(string message, Exception innerException) Parameters Type Name Description String message The message. Exception innerException The inner exception."
  },
  "api/TirUtilities.External.OdinSerializer.SerializationConfig.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationConfig.html",
    "title": "Class SerializationConfig | TirUtilities",
    "keywords": "Class SerializationConfig Defines the configuration during serialization and deserialization. This class is thread-safe. Inheritance Object SerializationConfig Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class SerializationConfig Constructors SerializationConfig() Initializes a new instance of the SerializationConfig class. Declaration public SerializationConfig() Fields AllowDeserializeInvalidData Setting this member to true indicates that in the case where, when expecting to deserialize an instance of a certain type, but encountering an incompatible, uncastable type in the data being read, the serializer should attempt to deserialize an instance of the expected type using the stored, possibly invalid data. This is equivalent to applying the AllowDeserializeInvalidData attribute, except global instead of specific to a single type. Note that if this member is set to false, individual types may still be deserialized with invalid data if they are decorated with the AllowDeserializeInvalidData attribute. Declaration public bool AllowDeserializeInvalidData Field Value Type Description Boolean Properties DebugContext Gets or sets the debug context. This value is never null; if set to null, a new default instance of DebugContext will be created upon the next get. Declaration public DebugContext DebugContext { get; set; } Property Value Type Description DebugContext The debug context. SerializationPolicy Gets or sets the serialization policy. This value is never null; if set to null, it will default to Unity . Declaration public ISerializationPolicy SerializationPolicy { get; set; } Property Value Type Description ISerializationPolicy The serialization policy. Methods ResetToDefault() Resets the configuration to a default configuration, as if the constructor had just been called. Declaration public void ResetToDefault()"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationContext.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationContext.html",
    "title": "Class SerializationContext | TirUtilities",
    "keywords": "Class SerializationContext The context of a given serialization session. This class maintains all internal and external references during serialization. Inheritance Object SerializationContext Implements ICacheNotificationReceiver Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class SerializationContext : ICacheNotificationReceiver Constructors SerializationContext() Initializes a new instance of the SerializationContext class. Declaration public SerializationContext() SerializationContext(FormatterConverter) Initializes a new instance of the SerializationContext class. Declaration public SerializationContext(FormatterConverter formatterConverter) Parameters Type Name Description FormatterConverter formatterConverter The formatter converter to use. SerializationContext(StreamingContext) Initializes a new instance of the SerializationContext class. Declaration public SerializationContext(StreamingContext context) Parameters Type Name Description StreamingContext context The streaming context to use. SerializationContext(StreamingContext, FormatterConverter) Initializes a new instance of the SerializationContext class. Declaration public SerializationContext(StreamingContext context, FormatterConverter formatterConverter) Parameters Type Name Description StreamingContext context The streaming context to use. FormatterConverter formatterConverter The formatter converter to use. Exceptions Type Condition ArgumentNullException The formatterConverter parameter is null. Properties Binder Gets or sets the context's type binder. Declaration public TwoWaySerializationBinder Binder { get; set; } Property Value Type Description TwoWaySerializationBinder The context's serialization binder. Config Gets or sets the serialization configuration. Declaration public SerializationConfig Config { get; set; } Property Value Type Description SerializationConfig The serialization configuration. FormatterConverter Gets the formatter converter. Declaration public IFormatterConverter FormatterConverter { get; } Property Value Type Description IFormatterConverter The formatter converter. GuidReferenceResolver Gets or sets the Guid reference resolver. Declaration public IExternalGuidReferenceResolver GuidReferenceResolver { get; set; } Property Value Type Description IExternalGuidReferenceResolver The Guid reference resolver. IndexReferenceResolver Gets or sets the index reference resolver. Declaration public IExternalIndexReferenceResolver IndexReferenceResolver { get; set; } Property Value Type Description IExternalIndexReferenceResolver The index reference resolver. StreamingContext Gets the streaming context. Declaration public StreamingContext StreamingContext { get; } Property Value Type Description StreamingContext The streaming context. StringReferenceResolver Gets or sets the string reference resolver. Declaration public IExternalStringReferenceResolver StringReferenceResolver { get; set; } Property Value Type Description IExternalStringReferenceResolver The string reference resolver. Methods ResetInternalReferences() Resets the context's internal reference map. Declaration public void ResetInternalReferences() ResetToDefault() Resets the serialization context completely to baseline status, as if its constructor has just been called. This allows complete reuse of a serialization context, with all of its internal reference buffers. Declaration public void ResetToDefault() TryGetInternalReferenceId(Object, out Int32) Tries to get the id of an internally referenced object. Declaration public bool TryGetInternalReferenceId(object reference, out int id) Parameters Type Name Description Object reference The reference to get the id of. Int32 id The id that was found, or -1 if no id was found. Returns Type Description Boolean true if a reference was found, otherwise false . TryRegisterExternalReference(Object, out Guid) Tries to register an external guid reference. Declaration public bool TryRegisterExternalReference(object obj, out Guid guid) Parameters Type Name Description Object obj The object to reference. Guid guid The guid of the referenced object. Returns Type Description Boolean true if the object could be referenced by guid; otherwise, false . TryRegisterExternalReference(Object, out Int32) Tries to register an external index reference. Declaration public bool TryRegisterExternalReference(object obj, out int index) Parameters Type Name Description Object obj The object to reference. Int32 index The index of the referenced object. Returns Type Description Boolean true if the object could be referenced by index; otherwise, false . TryRegisterExternalReference(Object, out String) Tries to register an external string reference. Declaration public bool TryRegisterExternalReference(object obj, out string id) Parameters Type Name Description Object obj The object to reference. String id The id string of the referenced object. Returns Type Description Boolean true if the object could be referenced by string; otherwise, false . TryRegisterInternalReference(Object, out Int32) Tries to register an internal reference. Returns true if the reference was registered, otherwise, false when the reference has already been registered. Declaration public bool TryRegisterInternalReference(object reference, out int id) Parameters Type Name Description Object reference The reference to register. Int32 id The id of the registered reference. Returns Type Description Boolean true if the reference was registered, otherwise, false when the reference has already been registered. Explicit Interface Implementations ICacheNotificationReceiver.OnClaimed() Declaration void ICacheNotificationReceiver.OnClaimed() ICacheNotificationReceiver.OnFreed() Declaration void ICacheNotificationReceiver.OnFreed() Implements ICacheNotificationReceiver See Also ICacheNotificationReceiver"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationData.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationData.html",
    "title": "Struct SerializationData | TirUtilities",
    "keywords": "Struct SerializationData Unity serialized data struct that contains all data needed by Odin serialization. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [Serializable] public struct SerializationData Fields Prefab The reference to the prefab this is only populated in prefab scene instances. Declaration public UnityEngine.Object Prefab Field Value Type Description UnityEngine.Object PrefabFieldName The name of the Prefab field. Declaration public const string PrefabFieldName = \"Prefab\" Field Value Type Description String PrefabModifications All Odin serialized prefab modifications. Declaration public List<string> PrefabModifications Field Value Type Description List < String > PrefabModificationsFieldName The name of the PrefabModifications field. Declaration public const string PrefabModificationsFieldName = \"PrefabModifications\" Field Value Type Description String PrefabModificationsReferencedUnityObjects All serialized Unity references. Declaration public List<UnityEngine.Object> PrefabModificationsReferencedUnityObjects Field Value Type Description List < UnityEngine.Object > PrefabModificationsReferencedUnityObjectsFieldName The name of the PrefabModificationsReferencedUnityObjects field. Declaration public const string PrefabModificationsReferencedUnityObjectsFieldName = \"PrefabModificationsReferencedUnityObjects\" Field Value Type Description String ReferencedUnityObjects All serialized Unity references. Declaration public List<UnityEngine.Object> ReferencedUnityObjects Field Value Type Description List < UnityEngine.Object > SerializationNodes The serialized data when serializing with the Nodes format. Declaration public List<SerializationNode> SerializationNodes Field Value Type Description List < SerializationNode > SerializedBytes The serialized data when serializing with the Binray format. Declaration public byte[] SerializedBytes Field Value Type Description Byte [] SerializedBytesString The serialized data when serializing with the JSON format. Declaration public string SerializedBytesString Field Value Type Description String SerializedFormat The data format used by the serializer. This field will be automatically set to the format specified in the global serialization config when the Unity object gets serialized, unless the Unity object implements the IOverridesSerializationFormat interface. Declaration public DataFormat SerializedFormat Field Value Type Description DataFormat Properties ContainsData Gets a value indicating whether the struct contains any data. If this is false, then it could mean that Unity has not yet deserialized the struct. Declaration public readonly bool ContainsData { get; } Property Value Type Description Boolean HasEditorData Whether the object contains any serialized data. Declaration [Obsolete(\"Use ContainsData instead\")] public readonly bool HasEditorData { get; } Property Value Type Description Boolean Methods Reset() Resets all data. Declaration public void Reset()"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationNode.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationNode.html",
    "title": "Struct SerializationNode | TirUtilities",
    "keywords": "Struct SerializationNode A serialization node as used by the Nodes format. Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax [Serializable] public struct SerializationNode Fields Data The data contained in the node. Depending on the entry type and name, as well as nodes encountered prior to this one, the format can vary wildly. Declaration public string Data Field Value Type Description String Entry The entry type of the node. Declaration public EntryType Entry Field Value Type Description EntryType Name The name of the node. Declaration public string Name Field Value Type Description String"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationNodeDataReader.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationNodeDataReader.html",
    "title": "Class SerializationNodeDataReader | TirUtilities",
    "keywords": "Class SerializationNodeDataReader Not yet documented. Inheritance Object BaseDataReaderWriter BaseDataReader SerializationNodeDataReader Implements IDataReader Inherited Members BaseDataReader.CurrentNodeId BaseDataReader.CurrentNodeDepth BaseDataReader.CurrentNodeName BaseDataReader.Context BaseDataReader.SkipEntry() BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class SerializationNodeDataReader : BaseDataReader, IDataReader, IDisposable Constructors SerializationNodeDataReader(DeserializationContext) Not yet documented. Declaration public SerializationNodeDataReader(DeserializationContext context) Parameters Type Name Description DeserializationContext context Properties Nodes Not yet documented. Declaration public List<SerializationNode> Nodes { get; set; } Property Value Type Description List < SerializationNode > Stream Not yet documented. Declaration public override Stream Stream { get; set; } Property Value Type Description Stream Overrides BaseDataReader.Stream Methods Dispose() Not yet documented. Declaration public override void Dispose() Overrides BaseDataReader.Dispose() EnterArray(out Int64) Tries to enters an array node. This will succeed if the next entry is an StartOfArray . This call MUST (eventually) be followed by a corresponding call to This call will change the values of the IsInArrayNode , CurrentNodeName , CurrentNodeId and CurrentNodeDepth properties to the correct values for the current array node. Declaration public override bool EnterArray(out long length) Parameters Type Name Description Int64 length The length of the array that was entered. Returns Type Description Boolean true if an array was entered, otherwise false Overrides BaseDataReader.EnterArray(out Int64) EnterNode(out Type) Not yet documented. Declaration public override bool EnterNode(out Type type) Parameters Type Name Description Type type Returns Type Description Boolean Overrides BaseDataReader.EnterNode(out Type) ExitArray() Not yet documented. Declaration public override bool ExitArray() Returns Type Description Boolean Overrides BaseDataReader.ExitArray() ExitNode() Not yet documented. Declaration public override bool ExitNode() Returns Type Description Boolean Overrides BaseDataReader.ExitNode() GetDataDump() Declaration public override string GetDataDump() Returns Type Description String Overrides BaseDataReader.GetDataDump() PeekEntry() Peeks the current entry. Declaration protected override EntryType PeekEntry() Returns Type Description EntryType The peeked entry. Overrides BaseDataReader.PeekEntry() PeekEntry(out String) Not yet documented. Declaration public override EntryType PeekEntry(out string name) Parameters Type Name Description String name Returns Type Description EntryType Overrides BaseDataReader.PeekEntry(out String) PrepareNewSerializationSession() Not yet documented. Declaration public override void PrepareNewSerializationSession() Overrides BaseDataReader.PrepareNewSerializationSession() ReadBoolean(out Boolean) Not yet documented. Declaration public override bool ReadBoolean(out bool value) Parameters Type Name Description Boolean value Returns Type Description Boolean Overrides BaseDataReader.ReadBoolean(out Boolean) ReadByte(out Byte) Not yet documented. Declaration public override bool ReadByte(out byte value) Parameters Type Name Description Byte value Returns Type Description Boolean Overrides BaseDataReader.ReadByte(out Byte) ReadChar(out Char) Not yet documented. Declaration public override bool ReadChar(out char value) Parameters Type Name Description Char value Returns Type Description Boolean Overrides BaseDataReader.ReadChar(out Char) ReadDecimal(out Decimal) Not yet documented. Declaration public override bool ReadDecimal(out decimal value) Parameters Type Name Description Decimal value Returns Type Description Boolean Overrides BaseDataReader.ReadDecimal(out Decimal) ReadDouble(out Double) Not yet documented. Declaration public override bool ReadDouble(out double value) Parameters Type Name Description Double value Returns Type Description Boolean Overrides BaseDataReader.ReadDouble(out Double) ReadExternalReference(out Guid) Not yet documented. Declaration public override bool ReadExternalReference(out Guid guid) Parameters Type Name Description Guid guid Returns Type Description Boolean Overrides BaseDataReader.ReadExternalReference(out Guid) ReadExternalReference(out Int32) Not yet documented. Declaration public override bool ReadExternalReference(out int index) Parameters Type Name Description Int32 index Returns Type Description Boolean Overrides BaseDataReader.ReadExternalReference(out Int32) ReadExternalReference(out String) Not yet documented. Declaration public override bool ReadExternalReference(out string id) Parameters Type Name Description String id Returns Type Description Boolean Overrides BaseDataReader.ReadExternalReference(out String) ReadGuid(out Guid) Not yet documented. Declaration public override bool ReadGuid(out Guid value) Parameters Type Name Description Guid value Returns Type Description Boolean Overrides BaseDataReader.ReadGuid(out Guid) ReadInt16(out Int16) Not yet documented. Declaration public override bool ReadInt16(out short value) Parameters Type Name Description Int16 value Returns Type Description Boolean Overrides BaseDataReader.ReadInt16(out Int16) ReadInt32(out Int32) Not yet documented. Declaration public override bool ReadInt32(out int value) Parameters Type Name Description Int32 value Returns Type Description Boolean Overrides BaseDataReader.ReadInt32(out Int32) ReadInt64(out Int64) Not yet documented. Declaration public override bool ReadInt64(out long value) Parameters Type Name Description Int64 value Returns Type Description Boolean Overrides BaseDataReader.ReadInt64(out Int64) ReadInternalReference(out Int32) Not yet documented. Declaration public override bool ReadInternalReference(out int id) Parameters Type Name Description Int32 id Returns Type Description Boolean Overrides BaseDataReader.ReadInternalReference(out Int32) ReadNull() Not yet documented. Declaration public override bool ReadNull() Returns Type Description Boolean Overrides BaseDataReader.ReadNull() ReadPrimitiveArray<T>(out T[]) Reads a primitive array value. This call will succeed if the next entry is an PrimitiveArray . If the call fails (and returns false ), it will skip the current entry value, unless that entry is an EndOfNode or an EndOfArray . Declaration public override bool ReadPrimitiveArray<T>(out T[] array) where T : struct Parameters Type Name Description T[] array The resulting primitive array. Returns Type Description Boolean true if reading a primitive array succeeded, otherwise false Type Parameters Name Description T The element type of the primitive array. Valid element types can be determined using IsPrimitiveArrayType(Type) . Overrides TirUtilities.External.OdinSerializer.BaseDataReader.ReadPrimitiveArray<T>(T[]) Exceptions Type Condition ArgumentException Type + typeof(T).Name + is not a valid primitive array type. ReadSByte(out SByte) Not yet documented. Declaration public override bool ReadSByte(out sbyte value) Parameters Type Name Description SByte value Returns Type Description Boolean Overrides BaseDataReader.ReadSByte(out SByte) ReadSingle(out Single) Not yet documented. Declaration public override bool ReadSingle(out float value) Parameters Type Name Description Single value Returns Type Description Boolean Overrides BaseDataReader.ReadSingle(out Single) ReadString(out String) Not yet documented. Declaration public override bool ReadString(out string value) Parameters Type Name Description String value Returns Type Description Boolean Overrides BaseDataReader.ReadString(out String) ReadToNextEntry() Consumes the current entry, and reads to the next one. Declaration protected override EntryType ReadToNextEntry() Returns Type Description EntryType The next entry. Overrides BaseDataReader.ReadToNextEntry() ReadUInt16(out UInt16) Not yet documented. Declaration public override bool ReadUInt16(out ushort value) Parameters Type Name Description UInt16 value Returns Type Description Boolean Overrides BaseDataReader.ReadUInt16(out UInt16) ReadUInt32(out UInt32) Not yet documented. Declaration public override bool ReadUInt32(out uint value) Parameters Type Name Description UInt32 value Returns Type Description Boolean Overrides BaseDataReader.ReadUInt32(out UInt32) ReadUInt64(out UInt64) Not yet documented. Declaration public override bool ReadUInt64(out ulong value) Parameters Type Name Description UInt64 value Returns Type Description Boolean Overrides BaseDataReader.ReadUInt64(out UInt64) Implements IDataReader"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationNodeDataReaderWriterConfig.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationNodeDataReaderWriterConfig.html",
    "title": "Class SerializationNodeDataReaderWriterConfig | TirUtilities",
    "keywords": "Class SerializationNodeDataReaderWriterConfig Shared config class for SerializationNodeDataReader and SerializationNodeDataWriter . Inheritance Object SerializationNodeDataReaderWriterConfig Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class SerializationNodeDataReaderWriterConfig Fields NodeIdSeparator The string to use to separate node id's from their names. Declaration public const string NodeIdSeparator = \"|\" Field Value Type Description String"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationNodeDataWriter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationNodeDataWriter.html",
    "title": "Class SerializationNodeDataWriter | TirUtilities",
    "keywords": "Class SerializationNodeDataWriter Not yet documented. Inheritance Object BaseDataReaderWriter BaseDataWriter SerializationNodeDataWriter Implements IDataWriter Inherited Members BaseDataWriter.Context BaseDataReaderWriter.Binder BaseDataReaderWriter.IsInArrayNode BaseDataReaderWriter.NodeDepth BaseDataReaderWriter.CurrentNode BaseDataReaderWriter.PushNode(NodeInfo) BaseDataReaderWriter.PushNode(String, Int32, Type) BaseDataReaderWriter.PushArray() BaseDataReaderWriter.PopNode(String) BaseDataReaderWriter.PopArray() BaseDataReaderWriter.ClearNodes() Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class SerializationNodeDataWriter : BaseDataWriter, IDataWriter, IDisposable Constructors SerializationNodeDataWriter(SerializationContext) Not yet documented. Declaration public SerializationNodeDataWriter(SerializationContext context) Parameters Type Name Description SerializationContext context Properties Nodes Not yet documented. Declaration public List<SerializationNode> Nodes { get; set; } Property Value Type Description List < SerializationNode > Stream Not yet documented. Declaration public override Stream Stream { get; set; } Property Value Type Description Stream Overrides BaseDataWriter.Stream Methods BeginArrayNode(Int64) Begins an array node of the given length. Declaration public override void BeginArrayNode(long length) Parameters Type Name Description Int64 length The length of the array to come. Overrides BaseDataWriter.BeginArrayNode(Int64) Exceptions Type Condition NotImplementedException BeginReferenceNode(String, Type, Int32) Not yet documented. Declaration public override void BeginReferenceNode(string name, Type type, int id) Parameters Type Name Description String name Type type Int32 id Overrides BaseDataWriter.BeginReferenceNode(String, Type, Int32) BeginStructNode(String, Type) Not yet documented. Declaration public override void BeginStructNode(string name, Type type) Parameters Type Name Description String name Type type Overrides BaseDataWriter.BeginStructNode(String, Type) Dispose() Not yet documented. Declaration public override void Dispose() Overrides BaseDataWriter.Dispose() EndArrayNode() Not yet documented. Declaration public override void EndArrayNode() Overrides BaseDataWriter.EndArrayNode() EndNode(String) Not yet documented. Declaration public override void EndNode(string name) Parameters Type Name Description String name Overrides BaseDataWriter.EndNode(String) FlushToStream() Not yet documented. Declaration public override void FlushToStream() Overrides BaseDataWriter.FlushToStream() GetDataDump() Declaration public override string GetDataDump() Returns Type Description String Overrides BaseDataWriter.GetDataDump() PrepareNewSerializationSession() Not yet documented. Declaration public override void PrepareNewSerializationSession() Overrides BaseDataWriter.PrepareNewSerializationSession() WriteBoolean(String, Boolean) Not yet documented. Declaration public override void WriteBoolean(string name, bool value) Parameters Type Name Description String name Boolean value Overrides BaseDataWriter.WriteBoolean(String, Boolean) WriteByte(String, Byte) Not yet documented. Declaration public override void WriteByte(string name, byte value) Parameters Type Name Description String name Byte value Overrides BaseDataWriter.WriteByte(String, Byte) WriteChar(String, Char) Not yet documented. Declaration public override void WriteChar(string name, char value) Parameters Type Name Description String name Char value Overrides BaseDataWriter.WriteChar(String, Char) WriteDecimal(String, Decimal) Not yet documented. Declaration public override void WriteDecimal(string name, decimal value) Parameters Type Name Description String name Decimal value Overrides BaseDataWriter.WriteDecimal(String, Decimal) WriteDouble(String, Double) Not yet documented. Declaration public override void WriteDouble(string name, double value) Parameters Type Name Description String name Double value Overrides BaseDataWriter.WriteDouble(String, Double) WriteExternalReference(String, Guid) Not yet documented. Declaration public override void WriteExternalReference(string name, Guid guid) Parameters Type Name Description String name Guid guid Overrides BaseDataWriter.WriteExternalReference(String, Guid) WriteExternalReference(String, Int32) Not yet documented. Declaration public override void WriteExternalReference(string name, int index) Parameters Type Name Description String name Int32 index Overrides BaseDataWriter.WriteExternalReference(String, Int32) WriteExternalReference(String, String) Not yet documented. Declaration public override void WriteExternalReference(string name, string id) Parameters Type Name Description String name String id Overrides BaseDataWriter.WriteExternalReference(String, String) WriteGuid(String, Guid) Not yet documented. Declaration public override void WriteGuid(string name, Guid value) Parameters Type Name Description String name Guid value Overrides BaseDataWriter.WriteGuid(String, Guid) WriteInt16(String, Int16) Not yet documented. Declaration public override void WriteInt16(string name, short value) Parameters Type Name Description String name Int16 value Overrides BaseDataWriter.WriteInt16(String, Int16) WriteInt32(String, Int32) Not yet documented. Declaration public override void WriteInt32(string name, int value) Parameters Type Name Description String name Int32 value Overrides BaseDataWriter.WriteInt32(String, Int32) WriteInt64(String, Int64) Not yet documented. Declaration public override void WriteInt64(string name, long value) Parameters Type Name Description String name Int64 value Overrides BaseDataWriter.WriteInt64(String, Int64) WriteInternalReference(String, Int32) Not yet documented. Declaration public override void WriteInternalReference(string name, int id) Parameters Type Name Description String name Int32 id Overrides BaseDataWriter.WriteInternalReference(String, Int32) WriteNull(String) Not yet documented. Declaration public override void WriteNull(string name) Parameters Type Name Description String name Overrides BaseDataWriter.WriteNull(String) WritePrimitiveArray<T>(T[]) Not yet documented. Declaration public override void WritePrimitiveArray<T>(T[] array) where T : struct Parameters Type Name Description T[] array Type Parameters Name Description T Overrides TirUtilities.External.OdinSerializer.BaseDataWriter.WritePrimitiveArray<T>(T[]) WriteSByte(String, SByte) Not yet documented. Declaration public override void WriteSByte(string name, sbyte value) Parameters Type Name Description String name SByte value Overrides BaseDataWriter.WriteSByte(String, SByte) WriteSingle(String, Single) Not yet documented. Declaration public override void WriteSingle(string name, float value) Parameters Type Name Description String name Single value Overrides BaseDataWriter.WriteSingle(String, Single) WriteString(String, String) Not yet documented. Declaration public override void WriteString(string name, string value) Parameters Type Name Description String name String value Overrides BaseDataWriter.WriteString(String, String) WriteUInt16(String, UInt16) Not yet documented. Declaration public override void WriteUInt16(string name, ushort value) Parameters Type Name Description String name UInt16 value Overrides BaseDataWriter.WriteUInt16(String, UInt16) WriteUInt32(String, UInt32) Not yet documented. Declaration public override void WriteUInt32(string name, uint value) Parameters Type Name Description String name UInt32 value Overrides BaseDataWriter.WriteUInt32(String, UInt32) WriteUInt64(String, UInt64) Not yet documented. Declaration public override void WriteUInt64(string name, ulong value) Parameters Type Name Description String name UInt64 value Overrides BaseDataWriter.WriteUInt64(String, UInt64) Implements IDataWriter"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationPolicies.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationPolicies.html",
    "title": "Class SerializationPolicies | TirUtilities",
    "keywords": "Class SerializationPolicies Contains a set of default implementations of the ISerializationPolicy interface. NOTE: Policies are not necessarily compatible with each other in intuitive ways. Data serialized with the Everything policy will for example fail to deserialize auto-properties with Strict , even if only strict data is needed. It is best to ensure that you always use the same policy for serialization and deserialization. This class and all of its policies are thread-safe. Inheritance Object SerializationPolicies Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class SerializationPolicies Properties Everything All fields not marked with NonSerializedAttribute are serialized. If a field is marked with both NonSerializedAttribute and OdinSerializeAttribute , then the field will be serialized. Declaration public static ISerializationPolicy Everything { get; } Property Value Type Description ISerializationPolicy Strict Only fields and auto-properties marked with or OdinSerializeAttribute and not marked with NonSerializedAttribute are serialized. There are two exceptions: 1) All fields in private nested types marked as compiler generated (e.g. lambda capture classes) are also serialized. 2) Virtual auto-properties are never serialized. Note that properties specified by an implemented interface are automatically marked virtual by the compiler. Declaration public static ISerializationPolicy Strict { get; } Property Value Type Description ISerializationPolicy Unity Public fields, as well as fields or auto-properties marked with or OdinSerializeAttribute and not marked with NonSerializedAttribute , are serialized. There are two exceptions: 1) All fields in tuples, as well as in private nested types marked as compiler generated (e.g. lambda capture classes) are also serialized. 2) Virtual auto-properties are never serialized. Note that properties specified by an implemented interface are automatically marked virtual by the compiler. Declaration public static ISerializationPolicy Unity { get; } Property Value Type Description ISerializationPolicy Methods TryGetByID(String, out ISerializationPolicy) Tries to get a serialization policy by its id, in case a serialization graph has the policy used for serialization stored by name. Declaration public static bool TryGetByID(string name, out ISerializationPolicy policy) Parameters Type Name Description String name ISerializationPolicy policy Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.SerializationUtility.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializationUtility.html",
    "title": "Class SerializationUtility | TirUtilities",
    "keywords": "Class SerializationUtility Provides an array of utility wrapper methods for easy serialization and deserialization of objects of any type. Inheritance Object SerializationUtility Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class SerializationUtility Methods CreateCopy(Object) Creates a deep copy of an object. Returns null if null. All Unity objects references will remain the same - they will not get copied. Declaration public static object CreateCopy(object obj) Parameters Type Name Description Object obj Returns Type Description Object CreateReader(Stream, DeserializationContext, DataFormat) Creates an IDataReader for a given format. Declaration public static IDataReader CreateReader(Stream stream, DeserializationContext context, DataFormat format) Parameters Type Name Description Stream stream The stream to read from. DeserializationContext context The deserialization context to use. DataFormat format The format to read. Returns Type Description IDataReader An IDataReader for a given format. Exceptions Type Condition NotImplementedException CreateWriter(Stream, SerializationContext, DataFormat) Creates an IDataWriter for a given format. Declaration public static IDataWriter CreateWriter(Stream stream, SerializationContext context, DataFormat format) Parameters Type Name Description Stream stream The stream to write to. SerializationContext context The serialization context to use. DataFormat format The format to write. Returns Type Description IDataWriter An IDataWriter for a given format. Exceptions Type Condition NotImplementedException DeserializeValue<T>(Byte[], DataFormat, List<UnityEngine.Object>, DeserializationContext) Deserializes a value of a given type from the given byte array in the given format, using the given list of Unity objects for external index reference resolution. Declaration public static T DeserializeValue<T>(byte[] bytes, DataFormat format, List<UnityEngine.Object> referencedUnityObjects, DeserializationContext context = null) Parameters Type Name Description Byte [] bytes The bytes to deserialize from. DataFormat format The format to read. List < UnityEngine.Object > referencedUnityObjects The list of Unity objects to use for external index reference resolution. DeserializationContext context The context to use. Returns Type Description T The deserialized value. Type Parameters Name Description T The type to deserialize. DeserializeValue<T>(Byte[], DataFormat, DeserializationContext) Deserializes a value of a given type from the given byte array in the given format. Declaration public static T DeserializeValue<T>(byte[] bytes, DataFormat format, DeserializationContext context = null) Parameters Type Name Description Byte [] bytes The bytes to deserialize from. DataFormat format The format to read. DeserializationContext context The context to use. Returns Type Description T The deserialized value. Type Parameters Name Description T The type to deserialize. DeserializeValue<T>(Stream, DataFormat, List<UnityEngine.Object>, DeserializationContext) Deserializes a value of a given type from the given stream in the given format, using the given list of Unity objects for external index reference resolution. Declaration public static T DeserializeValue<T>(Stream stream, DataFormat format, List<UnityEngine.Object> referencedUnityObjects, DeserializationContext context = null) Parameters Type Name Description Stream stream The stream to read from. DataFormat format The format to read. List < UnityEngine.Object > referencedUnityObjects The list of Unity objects to use for external index reference resolution. DeserializationContext context The context. Returns Type Description T The deserialized value. Type Parameters Name Description T The type to deserialize. DeserializeValue<T>(Stream, DataFormat, DeserializationContext) Deserializes a value of a given type from the given stream in the given format. Declaration public static T DeserializeValue<T>(Stream stream, DataFormat format, DeserializationContext context = null) Parameters Type Name Description Stream stream The stream to read from. DataFormat format The format to read. DeserializationContext context The context. Returns Type Description T The deserialized value. Type Parameters Name Description T The type to deserialize. DeserializeValue<T>(IDataReader) Deserializes a value from the given reader. Declaration public static T DeserializeValue<T>(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The deserialized value. Type Parameters Name Description T The type to deserialize. DeserializeValue<T>(IDataReader, List<UnityEngine.Object>) Deserializes a value of a given type from the given reader, using the given list of Unity objects for external index reference resolution. Declaration public static T DeserializeValue<T>(IDataReader reader, List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description IDataReader reader The reader to use. List < UnityEngine.Object > referencedUnityObjects The list of Unity objects to use for external index reference resolution. Returns Type Description T The deserialized value. Type Parameters Name Description T The type to deserialize. DeserializeValueWeak(Byte[], DataFormat, List<UnityEngine.Object>) Deserializes a value from the given byte array in the given format, using the given list of Unity objects for external index reference resolution. This might fail with primitive values, as they don't come with type metadata. Declaration public static object DeserializeValueWeak(byte[] bytes, DataFormat format, List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description Byte [] bytes The bytes to deserialize from. DataFormat format The format to read. List < UnityEngine.Object > referencedUnityObjects The list of Unity objects to use for external index reference resolution. Returns Type Description Object The deserialized value. DeserializeValueWeak(Byte[], DataFormat, DeserializationContext) Deserializes a value from the given byte array in the given format. This might fail with primitive values, as they don't come with type metadata. Declaration public static object DeserializeValueWeak(byte[] bytes, DataFormat format, DeserializationContext context = null) Parameters Type Name Description Byte [] bytes The bytes to deserialize from. DataFormat format The format to read. DeserializationContext context The context. Returns Type Description Object The deserialized value. DeserializeValueWeak(Stream, DataFormat, List<UnityEngine.Object>, DeserializationContext) Deserializes a value from the given stream in the given format, using the given list of Unity objects for external index reference resolution. This might fail with primitive values, as they don't come with type metadata. Declaration public static object DeserializeValueWeak(Stream stream, DataFormat format, List<UnityEngine.Object> referencedUnityObjects, DeserializationContext context = null) Parameters Type Name Description Stream stream The stream to read from. DataFormat format The format to read. List < UnityEngine.Object > referencedUnityObjects The list of Unity objects to use for external index reference resolution. DeserializationContext context The context. Returns Type Description Object The deserialized value. DeserializeValueWeak(Stream, DataFormat, DeserializationContext) Deserializes a value from the given stream in the given format. This might fail with primitive values, as they don't come with type metadata. Declaration public static object DeserializeValueWeak(Stream stream, DataFormat format, DeserializationContext context = null) Parameters Type Name Description Stream stream The reader to use. DataFormat format The format to read. DeserializationContext context The context. Returns Type Description Object The deserialized value. DeserializeValueWeak(IDataReader) Deserializes a value from the given reader. This might fail with primitive values, as they don't come with metadata. Declaration public static object DeserializeValueWeak(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Object The deserialized value. DeserializeValueWeak(IDataReader, List<UnityEngine.Object>) Deserializes a value from the given reader, using the given list of Unity objects for external index reference resolution. This might fail with primitive values, as they don't come with type metadata. Declaration public static object DeserializeValueWeak(IDataReader reader, List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description IDataReader reader The reader to use. List < UnityEngine.Object > referencedUnityObjects The list of Unity objects to use for external index reference resolution. Returns Type Description Object The deserialized value. SerializeValue<T>(T, Stream, DataFormat, out List<UnityEngine.Object>, SerializationContext) Serializes the given value to a given stream in the specified format. Declaration public static void SerializeValue<T>(T value, Stream stream, DataFormat format, out List<UnityEngine.Object> unityObjects, SerializationContext context = null) Parameters Type Name Description T value The value to serialize. Stream stream The stream to serialize to. DataFormat format The format to serialize in. List < UnityEngine.Object > unityObjects A list of the Unity objects which were referenced during serialization. SerializationContext context The context. Type Parameters Name Description T The type of the value to serialize. SerializeValue<T>(T, Stream, DataFormat, SerializationContext) Serializes the given value to a given stream in the specified format. Declaration public static void SerializeValue<T>(T value, Stream stream, DataFormat format, SerializationContext context = null) Parameters Type Name Description T value The value to serialize. Stream stream The stream to serialize to. DataFormat format The format to serialize in. SerializationContext context The context. Type Parameters Name Description T The type of the value to serialize. SerializeValue<T>(T, DataFormat, out List<UnityEngine.Object>, SerializationContext) Serializes the given value using the specified format and returns the result as a byte array. Declaration public static byte[] SerializeValue<T>(T value, DataFormat format, out List<UnityEngine.Object> unityObjects, SerializationContext context = null) Parameters Type Name Description T value The value to serialize. DataFormat format The format to use. List < UnityEngine.Object > unityObjects A list of the Unity objects which were referenced during serialization. SerializationContext context The context to use. Returns Type Description Byte [] A byte array containing the serialized value. Type Parameters Name Description T The type of the value to serialize. SerializeValue<T>(T, DataFormat, SerializationContext) Serializes the given value using the specified format, and returns the result as a byte array. Declaration public static byte[] SerializeValue<T>(T value, DataFormat format, SerializationContext context = null) Parameters Type Name Description T value The value to serialize. DataFormat format The format to use. SerializationContext context The context to use. Returns Type Description Byte [] A byte array containing the serialized value. Type Parameters Name Description T The type of the value to serialize. SerializeValue<T>(T, IDataWriter) Serializes the given value using the given writer. Declaration public static void SerializeValue<T>(T value, IDataWriter writer) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to use. Type Parameters Name Description T The type of the value to serialize. SerializeValue<T>(T, IDataWriter, out List<UnityEngine.Object>) Serializes the given value, using the given writer. Declaration public static void SerializeValue<T>(T value, IDataWriter writer, out List<UnityEngine.Object> unityObjects) Parameters Type Name Description T value The value to serialize. IDataWriter writer The writer to use. List < UnityEngine.Object > unityObjects A list of the Unity objects which were referenced during serialization. Type Parameters Name Description T The type of the value to serialize. SerializeValueWeak(Object, Stream, DataFormat, out List<UnityEngine.Object>, SerializationContext) Serializes the given value to a given stream in the specified format. Declaration public static void SerializeValueWeak(object value, Stream stream, DataFormat format, out List<UnityEngine.Object> unityObjects, SerializationContext context = null) Parameters Type Name Description Object value The value to serialize. Stream stream The stream to serialize to. DataFormat format The format to serialize in. List < UnityEngine.Object > unityObjects A list of the Unity objects which were referenced during serialization. SerializationContext context The context. SerializeValueWeak(Object, Stream, DataFormat, SerializationContext) Serializes the given value to a given stream in the specified format. Declaration public static void SerializeValueWeak(object value, Stream stream, DataFormat format, SerializationContext context = null) Parameters Type Name Description Object value The value to serialize. Stream stream The stream to serialize to. DataFormat format The format to serialize in. SerializationContext context The context. SerializeValueWeak(Object, DataFormat, out List<UnityEngine.Object>) Serializes the given value using the specified format, and returns the result as a byte array. Declaration public static byte[] SerializeValueWeak(object value, DataFormat format, out List<UnityEngine.Object> unityObjects) Parameters Type Name Description Object value The value to serialize. DataFormat format The format to use. List < UnityEngine.Object > unityObjects A list of the Unity objects which were referenced during serialization. Returns Type Description Byte [] A byte array containing the serialized value. SerializeValueWeak(Object, DataFormat, SerializationContext) Serializes the given value using the specified format, and returns the result as a byte array. Declaration public static byte[] SerializeValueWeak(object value, DataFormat format, SerializationContext context = null) Parameters Type Name Description Object value The value to serialize. DataFormat format The format to use. SerializationContext context The context. Returns Type Description Byte [] A byte array containing the serialized value. SerializeValueWeak(Object, IDataWriter) Serializes the given value using the given writer. Declaration public static void SerializeValueWeak(object value, IDataWriter writer) Parameters Type Name Description Object value The value to serialize. IDataWriter writer The writer to use. SerializeValueWeak(Object, IDataWriter, out List<UnityEngine.Object>) Serializes the given value, using the given writer. Declaration public static void SerializeValueWeak(object value, IDataWriter writer, out List<UnityEngine.Object> unityObjects) Parameters Type Name Description Object value The value to serialize. IDataWriter writer The writer to use. List < UnityEngine.Object > unityObjects A list of the Unity objects which were referenced during serialization."
  },
  "api/TirUtilities.External.OdinSerializer.SerializedBehaviour.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializedBehaviour.html",
    "title": "Class SerializedBehaviour | TirUtilities",
    "keywords": "Class SerializedBehaviour A Unity Behaviour which is serialized by the Sirenix serialization system. Inheritance Object SerializedBehaviour Implements ISerializationCallbackReceiver ISupportsPrefabSerialization Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class SerializedBehaviour : Behaviour, ISerializationCallbackReceiver, ISupportsPrefabSerialization Methods OnAfterDeserialize() Invoked after deserialization has taken place. Declaration protected virtual void OnAfterDeserialize() OnBeforeSerialize() Invoked before serialization has taken place. Declaration protected virtual void OnBeforeSerialize() Explicit Interface Implementations ISupportsPrefabSerialization.SerializationData Declaration SerializationData ISupportsPrefabSerialization.SerializationData { get; set; } Returns Type Description SerializationData Implements ISerializationCallbackReceiver ISupportsPrefabSerialization"
  },
  "api/TirUtilities.External.OdinSerializer.SerializedComponent.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializedComponent.html",
    "title": "Class SerializedComponent | TirUtilities",
    "keywords": "Class SerializedComponent A Unity Component which is serialized by the Sirenix serialization system. Inheritance Object SerializedComponent Implements ISerializationCallbackReceiver ISupportsPrefabSerialization Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class SerializedComponent : Component, ISerializationCallbackReceiver, ISupportsPrefabSerialization Methods OnAfterDeserialize() Invoked after deserialization has taken place. Declaration protected virtual void OnAfterDeserialize() OnBeforeSerialize() Invoked before serialization has taken place. Declaration protected virtual void OnBeforeSerialize() Explicit Interface Implementations ISupportsPrefabSerialization.SerializationData Declaration SerializationData ISupportsPrefabSerialization.SerializationData { get; set; } Returns Type Description SerializationData Implements ISerializationCallbackReceiver ISupportsPrefabSerialization"
  },
  "api/TirUtilities.External.OdinSerializer.SerializedMonoBehaviour.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializedMonoBehaviour.html",
    "title": "Class SerializedMonoBehaviour | TirUtilities",
    "keywords": "Class SerializedMonoBehaviour A Unity MonoBehaviour which is serialized by the Sirenix serialization system. Inheritance Object SerializedMonoBehaviour Implements ISerializationCallbackReceiver ISupportsPrefabSerialization Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class SerializedMonoBehaviour : MonoBehaviour, ISerializationCallbackReceiver, ISupportsPrefabSerialization Methods OnAfterDeserialize() Invoked after deserialization has taken place. Declaration protected virtual void OnAfterDeserialize() OnBeforeSerialize() Invoked before serialization has taken place. Declaration protected virtual void OnBeforeSerialize() Explicit Interface Implementations ISupportsPrefabSerialization.SerializationData Declaration SerializationData ISupportsPrefabSerialization.SerializationData { get; set; } Returns Type Description SerializationData Implements ISerializationCallbackReceiver ISupportsPrefabSerialization"
  },
  "api/TirUtilities.External.OdinSerializer.SerializedScriptableObject.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializedScriptableObject.html",
    "title": "Class SerializedScriptableObject | TirUtilities",
    "keywords": "Class SerializedScriptableObject A Unity ScriptableObject which is serialized by the Sirenix serialization system. Inheritance Object SerializedScriptableObject Implements ISerializationCallbackReceiver Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class SerializedScriptableObject : ScriptableObject, ISerializationCallbackReceiver Methods OnAfterDeserialize() Invoked after deserialization has taken place. Declaration protected virtual void OnAfterDeserialize() OnBeforeSerialize() Invoked before serialization has taken place. Declaration protected virtual void OnBeforeSerialize() Implements ISerializationCallbackReceiver"
  },
  "api/TirUtilities.External.OdinSerializer.SerializedStateMachineBehaviour.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializedStateMachineBehaviour.html",
    "title": "Class SerializedStateMachineBehaviour | TirUtilities",
    "keywords": "Class SerializedStateMachineBehaviour A Unity StateMachineBehaviour which is serialized by the Sirenix serialization system. Inheritance Object SerializedStateMachineBehaviour Implements ISerializationCallbackReceiver Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class SerializedStateMachineBehaviour : StateMachineBehaviour, ISerializationCallbackReceiver Methods OnAfterDeserialize() Invoked after deserialization has taken place. Declaration protected virtual void OnAfterDeserialize() OnBeforeSerialize() Invoked before serialization has taken place. Declaration protected virtual void OnBeforeSerialize() Implements ISerializationCallbackReceiver"
  },
  "api/TirUtilities.External.OdinSerializer.SerializedUnityObject.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SerializedUnityObject.html",
    "title": "Class SerializedUnityObject | TirUtilities",
    "keywords": "Class SerializedUnityObject A Unity ScriptableObject which is serialized by the Sirenix serialization system. Inheritance Object SerializedUnityObject Implements ISerializationCallbackReceiver Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class SerializedUnityObject : UnityEngine.Object, ISerializationCallbackReceiver Methods OnAfterDeserialize() Invoked after deserialization has taken place. Declaration protected virtual void OnAfterDeserialize() OnBeforeSerialize() Invoked before serialization has taken place. Declaration protected virtual void OnBeforeSerialize() Implements ISerializationCallbackReceiver"
  },
  "api/TirUtilities.External.OdinSerializer.Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Serializer.html",
    "title": "Class Serializer | TirUtilities",
    "keywords": "Class Serializer Serializes and deserializes a given type, and wraps serialization and deserialization with all the proper calls to free formatters from tedious boilerplate. Whenever serializing or deserializing anything, it is strongly recommended to use Get<T>() to get a proper wrapping serializer for that type. NOTE: This class should NOT be inherited from; it is hard-coded into the system. To extend the serialization system, instead create custom formatters, which are used by the ComplexTypeSerializer<T> class. Inheritance Object Serializer Serializer <T> Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class Serializer Methods FireOnSerializedType(Type) Fires the event. Declaration [Conditional(\"UNITY_EDITOR\")] protected static void FireOnSerializedType(Type type) Parameters Type Name Description Type type Get(Type) Gets a Serializer for the given type. Declaration public static Serializer Get(Type type) Parameters Type Name Description Type type The type to get a Serializer for. Returns Type Description Serializer A Serializer for the given type. Exceptions Type Condition ArgumentNullException The type argument is null. Get<T>() Gets a Serializer for type T. Declaration public static Serializer<T> Get<T>() Returns Type Description Serializer <T> A Serializer for type T. Type Parameters Name Description T The type to get a Serializer for. GetForValue(Object) Gets a Serializer for the given value. If the value is null, it will be treated as a value of type Object . Declaration public static Serializer GetForValue(object value) Parameters Type Name Description Object value The value to get a Serializer for. Returns Type Description Serializer A Serializer for the given value. ReadValueWeak(IDataReader) Reads a value weakly, casting it into object. Use this method if you don't know what type you're going to be working with at compile time. Declaration public abstract object ReadValueWeak(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Object The value which has been read. WriteValueWeak(Object, IDataWriter) Writes a weakly typed value. Use this method if you don't know what type you're going to be working with at compile time. Declaration public void WriteValueWeak(object value, IDataWriter writer) Parameters Type Name Description Object value The value to write. IDataWriter writer The writer to use. WriteValueWeak(String, Object, IDataWriter) Writes a weakly typed value with a given name. Use this method if you don't know what type you're going to be working with at compile time. Declaration public abstract void WriteValueWeak(string name, object value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Object value The value to write. IDataWriter writer The writer to use."
  },
  "api/TirUtilities.External.OdinSerializer.Serializer-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Serializer-1.html",
    "title": "Class Serializer<T> | TirUtilities",
    "keywords": "Class Serializer<T> Serializes and deserializes the type , and wraps serialization and deserialization with all the proper calls to free formatters from tedious boilerplate. Whenever serializing or deserializing anything, it is strongly recommended to use Get<T>() to get a proper wrapping serializer for that type. NOTE: This class should NOT be inherited from; it is hard-coded into the system. To extend the serialization system, instead create custom formatters, which are used by the ComplexTypeSerializer<T> class. Inheritance Object Serializer Serializer<T> BooleanSerializer ByteSerializer CharSerializer ComplexTypeSerializer <T> DecimalSerializer DoubleSerializer EnumSerializer<T> GuidSerializer Int16Serializer Int32Serializer Int64Serializer IntPtrSerializer SByteSerializer SingleSerializer StringSerializer UInt16Serializer UInt32Serializer UInt64Serializer UIntPtrSerializer Inherited Members Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class Serializer<T> : Serializer Type Parameters Name Description T The type which the Serializer<T> can serialize and deserialize. Methods FireOnSerializedType() Fires the event with the T generic argument of the serializer. Declaration [Conditional(\"UNITY_EDITOR\")] protected static void FireOnSerializedType() ReadValue(IDataReader) Reads a value of type . Declaration public abstract T ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description T The value which has been read. ReadValueWeak(IDataReader) Reads a value of type weakly, casting it into object. Use this method if you don't know what type you're going to be working with at compile time. Declaration public override object ReadValueWeak(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Object The value which has been read. Overrides Serializer.ReadValueWeak(IDataReader) WriteValue(T, IDataWriter) Writes a value of type . Declaration public void WriteValue(T value, IDataWriter writer) Parameters Type Name Description T value The value to write. IDataWriter writer The writer to use. WriteValue(String, T, IDataWriter) Writes a value of type with a given name. Declaration public abstract void WriteValue(string name, T value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. T value The value to write. IDataWriter writer The writer to use. WriteValueWeak(String, Object, IDataWriter) Writes a weakly typed value of type with a given name. Use this method if you don't know what type you're going to be working with at compile time. Declaration public override void WriteValueWeak(string name, object value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Object value The value to write. IDataWriter writer The writer to use. Overrides Serializer.WriteValueWeak(String, Object, IDataWriter)"
  },
  "api/TirUtilities.External.OdinSerializer.SingleSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.SingleSerializer.html",
    "title": "Class SingleSerializer | TirUtilities",
    "keywords": "Class SingleSerializer Serializer for the Single type. Inheritance Object Serializer Serializer < Single > SingleSerializer Inherited Members Serializer<Single>.ReadValueWeak(IDataReader) Serializer<Single>.WriteValueWeak(String, Object, IDataWriter) Serializer<Single>.WriteValue(Single, IDataWriter) Serializer<Single>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class SingleSerializer : Serializer<float> Methods ReadValue(IDataReader) Reads a value of type Single . Declaration public override float ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description Single The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Single>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, Single, IDataWriter) Writes a value of type Single . Declaration public override void WriteValue(string name, float value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. Single value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.Single>.WriteValue(System.String, System.Single, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.StackFormatter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.StackFormatter-2.html",
    "title": "Class StackFormatter<TStack, TValue> | TirUtilities",
    "keywords": "Class StackFormatter<TStack, TValue> Custom generic formatter for the generic type definition Stack<T> and types derived from it. Inheritance Object BaseFormatter <TStack> StackFormatter<TStack, TValue> Implements IFormatter <TStack> IFormatter Inherited Members BaseFormatter<TStack>.OnSerializingCallbacks BaseFormatter<TStack>.OnSerializedCallbacks BaseFormatter<TStack>.OnDeserializingCallbacks BaseFormatter<TStack>.OnDeserializedCallbacks BaseFormatter<TStack>.IsValueType BaseFormatter<TStack>.ImplementsISerializationCallbackReceiver BaseFormatter<TStack>.ImplementsIDeserializationCallback BaseFormatter<TStack>.ImplementsIObjectReference BaseFormatter<TStack>.SerializedType BaseFormatter<TStack>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<TStack>.IFormatter.Deserialize(IDataReader) BaseFormatter<TStack>.Deserialize(IDataReader) BaseFormatter<TStack>.Serialize(TStack, IDataWriter) BaseFormatter<TStack>.RegisterReferenceID(TStack, IDataReader) BaseFormatter<TStack>.InvokeOnDeserializingCallbacks(TStack, DeserializationContext) BaseFormatter<TStack>.InvokeOnDeserializingCallbacks(TStack, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class StackFormatter<TStack, TValue> : BaseFormatter<TStack>, IFormatter<TStack>, IFormatter where TStack : Stack<TValue>, new() Type Parameters Name Description TStack TValue Constructors StackFormatter() Declaration public StackFormatter() Methods DeserializeImplementation(ref TStack, IDataReader) Provides the actual implementation for deserializing a value of type . Declaration protected override void DeserializeImplementation(ref TStack value, IDataReader reader) Parameters Type Name Description TStack value The uninitialized value to serialize into. This value will have been created earlier using GetUninitializedObject() . IDataReader reader The reader to deserialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TStack>.DeserializeImplementation(TStack, TirUtilities.External.OdinSerializer.IDataReader) GetUninitializedObject() Returns null. Declaration protected override TStack GetUninitializedObject() Returns Type Description TStack A null value. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TStack>.GetUninitializedObject() SerializeImplementation(ref TStack, IDataWriter) Provides the actual implementation for serializing a value of type . Declaration protected override void SerializeImplementation(ref TStack value, IDataWriter writer) Parameters Type Name Description TStack value The value to serialize. IDataWriter writer The writer to serialize with. Overrides TirUtilities.External.OdinSerializer.BaseFormatter<TStack>.SerializeImplementation(TStack, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also BaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.StringSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.StringSerializer.html",
    "title": "Class StringSerializer | TirUtilities",
    "keywords": "Class StringSerializer Serializer for the String type. Inheritance Object Serializer Serializer < String > StringSerializer Inherited Members Serializer<String>.ReadValueWeak(IDataReader) Serializer<String>.WriteValueWeak(String, Object, IDataWriter) Serializer<String>.WriteValue(String, IDataWriter) Serializer<String>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class StringSerializer : Serializer<string> Methods ReadValue(IDataReader) Reads a value of type String . Declaration public override string ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description String The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.String>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, String, IDataWriter) Writes a value of type String . Declaration public override void WriteValue(string name, string value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. String value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.String>.WriteValue(System.String, System.String, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.TimeSpanFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.TimeSpanFormatter.html",
    "title": "Class TimeSpanFormatter | TirUtilities",
    "keywords": "Class TimeSpanFormatter Custom formatter for the TimeSpan type. Inheritance Object MinimalBaseFormatter < TimeSpan > TimeSpanFormatter Implements IFormatter < TimeSpan > IFormatter Inherited Members MinimalBaseFormatter<TimeSpan>.IsValueType MinimalBaseFormatter<TimeSpan>.SerializedType MinimalBaseFormatter<TimeSpan>.Deserialize(IDataReader) MinimalBaseFormatter<TimeSpan>.Serialize(TimeSpan, IDataWriter) MinimalBaseFormatter<TimeSpan>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<TimeSpan>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<TimeSpan>.GetUninitializedObject() MinimalBaseFormatter<TimeSpan>.RegisterReferenceID(TimeSpan, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class TimeSpanFormatter : MinimalBaseFormatter<TimeSpan>, IFormatter<TimeSpan>, IFormatter Methods Read(ref TimeSpan, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref TimeSpan value, IDataReader reader) Parameters Type Name Description TimeSpan value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.TimeSpan>.Read(System.TimeSpan, TirUtilities.External.OdinSerializer.IDataReader) Write(ref TimeSpan, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref TimeSpan value, IDataWriter writer) Parameters Type Name Description TimeSpan value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.TimeSpan>.Write(System.TimeSpan, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.TwoWaySerializationBinder.html": {
    "href": "api/TirUtilities.External.OdinSerializer.TwoWaySerializationBinder.html",
    "title": "Class TwoWaySerializationBinder | TirUtilities",
    "keywords": "Class TwoWaySerializationBinder Binds types to strings during serialization, and strings to types during deserialization. Inheritance Object TwoWaySerializationBinder DefaultSerializationBinder Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public abstract class TwoWaySerializationBinder Fields Default Provides a default, catch-all TwoWaySerializationBinder implementation. This binder only includes assembly names, without versions and tokens, in order to increase compatibility. Declaration public static readonly TwoWaySerializationBinder Default Field Value Type Description TwoWaySerializationBinder Methods BindToName(Type, DebugContext) Bind a type to a name. Declaration public abstract string BindToName(Type type, DebugContext debugContext = null) Parameters Type Name Description Type type The type to bind. DebugContext debugContext The debug context to log to. Returns Type Description String The name that the type has been bound to. BindToType(String, DebugContext) Binds a name to a type. Declaration public abstract Type BindToType(string typeName, DebugContext debugContext = null) Parameters Type Name Description String typeName The name of the type to bind. DebugContext debugContext The debug context to log to. Returns Type Description Type The type that the name has been bound to, or null if the type could not be resolved. ContainsType(String) Determines whether the specified type name is mapped. Declaration public abstract bool ContainsType(string typeName) Parameters Type Name Description String typeName Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.TypeFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.TypeFormatter.html",
    "title": "Class TypeFormatter | TirUtilities",
    "keywords": "Class TypeFormatter Formatter for the Type type which uses the reader/writer's TwoWaySerializationBinder to bind types. Inheritance Object MinimalBaseFormatter < Type > TypeFormatter Implements IFormatter < Type > IFormatter Inherited Members MinimalBaseFormatter<Type>.IsValueType MinimalBaseFormatter<Type>.SerializedType MinimalBaseFormatter<Type>.Deserialize(IDataReader) MinimalBaseFormatter<Type>.Serialize(Type, IDataWriter) MinimalBaseFormatter<Type>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Type>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Type>.RegisterReferenceID(Type, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class TypeFormatter : MinimalBaseFormatter<Type>, IFormatter<Type>, IFormatter Methods GetUninitializedObject() Returns null. Declaration protected override Type GetUninitializedObject() Returns Type Description Type null. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.Type>.GetUninitializedObject() Read(ref Type, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Type value, IDataReader reader) Parameters Type Name Description Type value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.Type>.Read(System.Type, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Type, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Type value, IDataWriter writer) Parameters Type Name Description Type value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.Type>.Write(System.Type, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter"
  },
  "api/TirUtilities.External.OdinSerializer.UInt16Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UInt16Serializer.html",
    "title": "Class UInt16Serializer | TirUtilities",
    "keywords": "Class UInt16Serializer Serializer for the UInt16 type. Inheritance Object Serializer Serializer < UInt16 > UInt16Serializer Inherited Members Serializer<UInt16>.ReadValueWeak(IDataReader) Serializer<UInt16>.WriteValueWeak(String, Object, IDataWriter) Serializer<UInt16>.WriteValue(UInt16, IDataWriter) Serializer<UInt16>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class UInt16Serializer : Serializer<ushort> Methods ReadValue(IDataReader) Reads a value of type UInt16 . Declaration public override ushort ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description UInt16 The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UInt16>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, UInt16, IDataWriter) Writes a value of type UInt64 . Declaration public override void WriteValue(string name, ushort value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. UInt16 value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UInt16>.WriteValue(System.String, System.UInt16, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.UInt32Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UInt32Serializer.html",
    "title": "Class UInt32Serializer | TirUtilities",
    "keywords": "Class UInt32Serializer Serializer for the UInt32 type. Inheritance Object Serializer Serializer < UInt32 > UInt32Serializer Inherited Members Serializer<UInt32>.ReadValueWeak(IDataReader) Serializer<UInt32>.WriteValueWeak(String, Object, IDataWriter) Serializer<UInt32>.WriteValue(UInt32, IDataWriter) Serializer<UInt32>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class UInt32Serializer : Serializer<uint> Methods ReadValue(IDataReader) Reads a value of type UInt32 . Declaration public override uint ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description UInt32 The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UInt32>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, UInt32, IDataWriter) Writes a value of type UInt32 . Declaration public override void WriteValue(string name, uint value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. UInt32 value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UInt32>.WriteValue(System.String, System.UInt32, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.UInt64Serializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UInt64Serializer.html",
    "title": "Class UInt64Serializer | TirUtilities",
    "keywords": "Class UInt64Serializer Serializer for the UInt64 type. Inheritance Object Serializer Serializer < UInt64 > UInt64Serializer Inherited Members Serializer<UInt64>.ReadValueWeak(IDataReader) Serializer<UInt64>.WriteValueWeak(String, Object, IDataWriter) Serializer<UInt64>.WriteValue(UInt64, IDataWriter) Serializer<UInt64>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class UInt64Serializer : Serializer<ulong> Methods ReadValue(IDataReader) Reads a value of type UInt64 . Declaration public override ulong ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description UInt64 The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UInt64>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, UInt64, IDataWriter) Writes a value of type UInt64 . Declaration public override void WriteValue(string name, ulong value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. UInt64 value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UInt64>.WriteValue(System.String, System.UInt64, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.UIntPtrSerializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UIntPtrSerializer.html",
    "title": "Class UIntPtrSerializer | TirUtilities",
    "keywords": "Class UIntPtrSerializer Serializer for the UIntPtr type. Inheritance Object Serializer Serializer < UIntPtr > UIntPtrSerializer Inherited Members Serializer<UIntPtr>.ReadValueWeak(IDataReader) Serializer<UIntPtr>.WriteValueWeak(String, Object, IDataWriter) Serializer<UIntPtr>.WriteValue(UIntPtr, IDataWriter) Serializer<UIntPtr>.FireOnSerializedType() Serializer.FireOnSerializedType(Type) Serializer.GetForValue(Object) Serializer.Get<T>() Serializer.Get(Type) Serializer.WriteValueWeak(Object, IDataWriter) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class UIntPtrSerializer : Serializer<UIntPtr> Methods ReadValue(IDataReader) Reads a value of type UIntPtr . Declaration public override UIntPtr ReadValue(IDataReader reader) Parameters Type Name Description IDataReader reader The reader to use. Returns Type Description UIntPtr The value which has been read. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UIntPtr>.ReadValue(TirUtilities.External.OdinSerializer.IDataReader) WriteValue(String, UIntPtr, IDataWriter) Writes a value of type UIntPtr . Declaration public override void WriteValue(string name, UIntPtr value, IDataWriter writer) Parameters Type Name Description String name The name of the value to write. UIntPtr value The value to write. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.Serializer<System.UIntPtr>.WriteValue(System.String, System.UIntPtr, TirUtilities.External.OdinSerializer.IDataWriter) See Also Serializer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.UnityEventFormatter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UnityEventFormatter-1.html",
    "title": "Class UnityEventFormatter<T> | TirUtilities",
    "keywords": "Class UnityEventFormatter<T> Custom generic formatter for the , , and types. Inheritance Object BaseFormatter <T> ReflectionFormatter <T> UnityEventFormatter<T> Implements IFormatter <T> IFormatter Inherited Members ReflectionFormatter<T>.OverridePolicy ReflectionFormatter<T>.DeserializeImplementation(T, IDataReader) ReflectionFormatter<T>.SerializeImplementation(T, IDataWriter) BaseFormatter<T>.OnSerializingCallbacks BaseFormatter<T>.OnSerializedCallbacks BaseFormatter<T>.OnDeserializingCallbacks BaseFormatter<T>.OnDeserializedCallbacks BaseFormatter<T>.IsValueType BaseFormatter<T>.ImplementsISerializationCallbackReceiver BaseFormatter<T>.ImplementsIDeserializationCallback BaseFormatter<T>.ImplementsIObjectReference BaseFormatter<T>.SerializedType BaseFormatter<T>.IFormatter.Serialize(Object, IDataWriter) BaseFormatter<T>.IFormatter.Deserialize(IDataReader) BaseFormatter<T>.Deserialize(IDataReader) BaseFormatter<T>.Serialize(T, IDataWriter) BaseFormatter<T>.RegisterReferenceID(T, IDataReader) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) BaseFormatter<T>.InvokeOnDeserializingCallbacks(T, DeserializationContext) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class UnityEventFormatter<T> : ReflectionFormatter<T>, IFormatter<T>, IFormatter where T : UnityEventBase, new() Type Parameters Name Description T The type of UnityEvent that this formatter can serialize and deserialize. Methods GetUninitializedObject() Get an uninitialized object of type . Declaration protected override T GetUninitializedObject() Returns Type Description T An uninitialized object of type . Overrides TirUtilities.External.OdinSerializer.BaseFormatter<T>.GetUninitializedObject() Implements IFormatter<T> IFormatter See Also ReflectionFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.UnityReferenceResolver.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UnityReferenceResolver.html",
    "title": "Class UnityReferenceResolver | TirUtilities",
    "keywords": "Class UnityReferenceResolver Resolves external index references to Unity objects. Inheritance Object UnityReferenceResolver Implements IExternalIndexReferenceResolver ICacheNotificationReceiver Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class UnityReferenceResolver : IExternalIndexReferenceResolver, ICacheNotificationReceiver Constructors UnityReferenceResolver() Initializes a new instance of the UnityReferenceResolver class. Declaration public UnityReferenceResolver() UnityReferenceResolver(List<UnityEngine.Object>) Initializes a new instance of the UnityReferenceResolver class with a list of Unity objects. Declaration public UnityReferenceResolver(List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description List < UnityEngine.Object > referencedUnityObjects The referenced Unity objects. Methods CanReference(Object, out Int32) Determines whether the specified value can be referenced externally via this resolver. Declaration public bool CanReference(object value, out int index) Parameters Type Name Description Object value The value to reference. Int32 index The index of the resolved value, if it can be referenced. Returns Type Description Boolean true if the reference can be resolved, otherwise false . GetReferencedUnityObjects() Gets the currently referenced Unity objects. Declaration public List<UnityEngine.Object> GetReferencedUnityObjects() Returns Type Description List < UnityEngine.Object > A list of the currently referenced Unity objects. Reset() Resets this instance. Declaration public void Reset() SetReferencedUnityObjects(List<UnityEngine.Object>) Sets the referenced Unity objects of the resolver to a given list, or a new list if the value is null. Declaration public void SetReferencedUnityObjects(List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description List < UnityEngine.Object > referencedUnityObjects The referenced Unity objects to set, or null if a new list is required. TryResolveReference(Int32, out Object) Tries to resolve the given reference index to a reference value. Declaration public bool TryResolveReference(int index, out object value) Parameters Type Name Description Int32 index The index to resolve. Object value The resolved value. Returns Type Description Boolean true if the index could be resolved to a value, otherwise false . Explicit Interface Implementations ICacheNotificationReceiver.OnClaimed() Declaration void ICacheNotificationReceiver.OnClaimed() ICacheNotificationReceiver.OnFreed() Declaration void ICacheNotificationReceiver.OnFreed() Implements IExternalIndexReferenceResolver ICacheNotificationReceiver See Also IExternalIndexReferenceResolver ICacheNotificationReceiver"
  },
  "api/TirUtilities.External.OdinSerializer.UnitySerializationInitializer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UnitySerializationInitializer.html",
    "title": "Class UnitySerializationInitializer | TirUtilities",
    "keywords": "Class UnitySerializationInitializer Utility class which initializes the Sirenix serialization system to be compatible with Unity. Inheritance Object UnitySerializationInitializer Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class UnitySerializationInitializer Properties CurrentPlatform Declaration public static RuntimePlatform CurrentPlatform { get; } Property Value Type Description RuntimePlatform Initialized Declaration public static bool Initialized { get; } Property Value Type Description Boolean Methods Initialize() Initializes the Sirenix serialization system to be compatible with Unity. Declaration public static void Initialize()"
  },
  "api/TirUtilities.External.OdinSerializer.UnitySerializationUtility.html": {
    "href": "api/TirUtilities.External.OdinSerializer.UnitySerializationUtility.html",
    "title": "Class UnitySerializationUtility | TirUtilities",
    "keywords": "Class UnitySerializationUtility Provides an array of utility wrapper methods for easy serialization and deserialization of Unity objects of any type. Note that, during serialization, it is always assumed that we are running on Unity's main thread. Deserialization can happen on any thread, and all API's interacting with deserialization are thread-safe. Note that setting the IndexReferenceResolver on contexts passed into methods on this class will have no effect, as it will always be set to a UnityReferenceResolver. Inheritance Object UnitySerializationUtility Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public static class UnitySerializationUtility Fields SerializeReferenceAttributeType Declaration public static readonly Type SerializeReferenceAttributeType Field Value Type Description Type Methods CreateDefaultUnityInitializedObject(Type) Creates an object with default values initialized in the style of Unity; strings will be \"\", classes will be instantiated recursively with default values, and so on. Declaration public static object CreateDefaultUnityInitializedObject(Type type) Parameters Type Name Description Type type Returns Type Description Object DeserializePrefabModifications(List<String>, List<UnityEngine.Object>) Not yet documented. Declaration public static List<PrefabModification> DeserializePrefabModifications(List<string> modifications, List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description List < String > modifications List < UnityEngine.Object > referencedUnityObjects Returns Type Description List < PrefabModification > DeserializeUnityObject(UnityEngine.Object, ref Byte[], ref List<UnityEngine.Object>, DataFormat, DeserializationContext) Not yet documented. Declaration public static void DeserializeUnityObject(UnityEngine.Object unityObject, ref byte[] bytes, ref List<UnityEngine.Object> referencedUnityObjects, DataFormat format, DeserializationContext context = null) Parameters Type Name Description UnityEngine.Object unityObject Byte [] bytes List < UnityEngine.Object > referencedUnityObjects DataFormat format DeserializationContext context DeserializeUnityObject(UnityEngine.Object, ref String, ref List<UnityEngine.Object>, DataFormat, DeserializationContext) Not yet documented. Declaration public static void DeserializeUnityObject(UnityEngine.Object unityObject, ref string base64Bytes, ref List<UnityEngine.Object> referencedUnityObjects, DataFormat format, DeserializationContext context = null) Parameters Type Name Description UnityEngine.Object unityObject String base64Bytes List < UnityEngine.Object > referencedUnityObjects DataFormat format DeserializationContext context DeserializeUnityObject(UnityEngine.Object, IDataReader) Not yet documented. Declaration public static void DeserializeUnityObject(UnityEngine.Object unityObject, IDataReader reader) Parameters Type Name Description UnityEngine.Object unityObject IDataReader reader DeserializeUnityObject(UnityEngine.Object, ref SerializationData, DeserializationContext) Not yet documented. Declaration public static void DeserializeUnityObject(UnityEngine.Object unityObject, ref SerializationData data, DeserializationContext context = null) Parameters Type Name Description UnityEngine.Object unityObject SerializationData data DeserializationContext context GuessIfUnityWillSerialize(MemberInfo) Guesses whether or not Unity will serialize a given member. This is not completely accurate. Declaration public static bool GuessIfUnityWillSerialize(MemberInfo member) Parameters Type Name Description MemberInfo member The member to check. Returns Type Description Boolean True if it is guessed that Unity will serialize the member, otherwise false. Exceptions Type Condition ArgumentNullException The parameter member is null. GuessIfUnityWillSerialize(Type) Guesses whether or not Unity will serialize a given type. This is not completely accurate. Declaration public static bool GuessIfUnityWillSerialize(Type type) Parameters Type Name Description Type type The type to check. Returns Type Description Boolean True if it is guessed that Unity will serialize the type, otherwise false. Exceptions Type Condition ArgumentNullException The parameter type is null. OdinWillSerialize(MemberInfo, Boolean, ISerializationPolicy) Checks whether Odin will serialize a given member. Declaration public static bool OdinWillSerialize(MemberInfo member, bool serializeUnityFields, ISerializationPolicy policy = null) Parameters Type Name Description MemberInfo member The member to check. Boolean serializeUnityFields Whether to allow serialization of members that will also be serialized by Unity. ISerializationPolicy policy The policy that Odin should be using for serialization of the given member. If this parameter is null, it defaults to Unity . Returns Type Description Boolean True if Odin will serialize the member, otherwise false. SerializePrefabModifications(List<PrefabModification>, ref List<UnityEngine.Object>) Not yet documented. Declaration public static List<string> SerializePrefabModifications(List<PrefabModification> modifications, ref List<UnityEngine.Object> referencedUnityObjects) Parameters Type Name Description List < PrefabModification > modifications List < UnityEngine.Object > referencedUnityObjects Returns Type Description List < String > SerializeUnityObject(UnityEngine.Object, ref Byte[], ref List<UnityEngine.Object>, DataFormat, Boolean, SerializationContext) Not yet documented. Declaration public static void SerializeUnityObject(UnityEngine.Object unityObject, ref byte[] bytes, ref List<UnityEngine.Object> referencedUnityObjects, DataFormat format, bool serializeUnityFields = false, SerializationContext context = null) Parameters Type Name Description UnityEngine.Object unityObject Byte [] bytes List < UnityEngine.Object > referencedUnityObjects DataFormat format Boolean serializeUnityFields SerializationContext context SerializeUnityObject(UnityEngine.Object, ref String, ref List<UnityEngine.Object>, DataFormat, Boolean, SerializationContext) Not yet documented. Declaration public static void SerializeUnityObject(UnityEngine.Object unityObject, ref string base64Bytes, ref List<UnityEngine.Object> referencedUnityObjects, DataFormat format, bool serializeUnityFields = false, SerializationContext context = null) Parameters Type Name Description UnityEngine.Object unityObject String base64Bytes List < UnityEngine.Object > referencedUnityObjects DataFormat format Boolean serializeUnityFields SerializationContext context SerializeUnityObject(UnityEngine.Object, IDataWriter, Boolean) Not yet documented. Declaration public static void SerializeUnityObject(UnityEngine.Object unityObject, IDataWriter writer, bool serializeUnityFields = false) Parameters Type Name Description UnityEngine.Object unityObject IDataWriter writer Boolean serializeUnityFields SerializeUnityObject(UnityEngine.Object, ref SerializationData, Boolean, SerializationContext) Not yet documented. Declaration public static void SerializeUnityObject(UnityEngine.Object unityObject, ref SerializationData data, bool serializeUnityFields = false, SerializationContext context = null) Parameters Type Name Description UnityEngine.Object unityObject SerializationData data Boolean serializeUnityFields SerializationContext context"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.Cache-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.Cache-1.html",
    "title": "Class Cache<T> | TirUtilities",
    "keywords": "Class Cache<T> Provides an easy way of claiming and freeing cached values of any non-abstract reference type with a public parameterless constructor. Cached types which implement the ICacheNotificationReceiver interface will receive notifications when they are claimed and freed. Only one thread should be holding a given cache instance at a time if ICacheNotificationReceiver is implemented, since the invocation of OnFreed() is not thread safe, IE, weird stuff might happen if multiple different threads are trying to free the same cache instance at the same time. This will practically never happen unless you're doing really strange stuff, but the case is documented here. Inheritance Object Cache<T> Implements ICache Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public sealed class Cache<T> : ICache, IDisposable where T : class, new() Type Parameters Name Description T The type which is cached. Fields Value The cached value. Declaration public T Value Field Value Type Description T Properties IsFree Gets a value indicating whether this cached value is free. Declaration public bool IsFree { get; } Property Value Type Description Boolean true if this cached value is free; otherwise, false . MaxCacheSize Gets or sets the maximum size of the cache. This value can never go beneath 1. Declaration public static int MaxCacheSize { get; set; } Property Value Type Description Int32 The maximum size of the cache. Methods Claim() Claims a cached value of type . Declaration public static Cache<T> Claim() Returns Type Description Cache <T> A cached value of type . Release() Releases this cached value. Declaration public void Release() Release(Cache<T>) Releases a cached value. Declaration public static void Release(Cache<T> cache) Parameters Type Name Description Cache <T> cache The cached value to release. Exceptions Type Condition ArgumentNullException The cached value to release is null. Operators Implicit(Cache<T> to T) Performs an implicit conversion from Cache<T> to . Declaration public static implicit operator T(Cache<T> cache) Parameters Type Name Description Cache <T> cache The cache to convert. Returns Type Description T The result of the conversion. Explicit Interface Implementations ICache.Value Declaration object ICache.Value { get; } Returns Type Description Object Implements ICache See Also IDisposable"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary-3.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.DoubleLookupDictionary-3.html",
    "title": "Class DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> | TirUtilities",
    "keywords": "Class DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> Not yet documented. Inheritance Object Dictionary <TFirstKey, Dictionary <TSecondKey, TValue>> DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public class DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> : Dictionary<TFirstKey, Dictionary<TSecondKey, TValue>>, IDictionary<TFirstKey, Dictionary<TSecondKey, TValue>>, ICollection<KeyValuePair<TFirstKey, Dictionary<TSecondKey, TValue>>>, IDictionary, ICollection, IReadOnlyDictionary<TFirstKey, Dictionary<TSecondKey, TValue>>, IReadOnlyCollection<KeyValuePair<TFirstKey, Dictionary<TSecondKey, TValue>>>, IEnumerable<KeyValuePair<TFirstKey, Dictionary<TSecondKey, TValue>>>, IEnumerable, ISerializable, IDeserializationCallback Type Parameters Name Description TFirstKey TSecondKey TValue Constructors DoubleLookupDictionary() Declaration public DoubleLookupDictionary() DoubleLookupDictionary(IEqualityComparer<TFirstKey>, IEqualityComparer<TSecondKey>) Declaration public DoubleLookupDictionary(IEqualityComparer<TFirstKey> firstKeyComparer, IEqualityComparer<TSecondKey> secondKeyComparer) Parameters Type Name Description IEqualityComparer <TFirstKey> firstKeyComparer IEqualityComparer <TSecondKey> secondKeyComparer Properties Item[TFirstKey] Not yet documented. Declaration public Dictionary<TSecondKey, TValue> this[TFirstKey firstKey] { get; } Parameters Type Name Description TFirstKey firstKey Property Value Type Description Dictionary <TSecondKey, TValue> Methods AddInner(TFirstKey, TSecondKey, TValue) Not yet documented. Declaration public TValue AddInner(TFirstKey firstKey, TSecondKey secondKey, TValue value) Parameters Type Name Description TFirstKey firstKey TSecondKey secondKey TValue value Returns Type Description TValue ContainsKeys(TFirstKey, TSecondKey) Not yet documented. Declaration public bool ContainsKeys(TFirstKey firstKey, TSecondKey secondKey) Parameters Type Name Description TFirstKey firstKey TSecondKey secondKey Returns Type Description Boolean InnerCount(TFirstKey) Not yet documented. Declaration public int InnerCount(TFirstKey firstKey) Parameters Type Name Description TFirstKey firstKey Returns Type Description Int32 RemoveInner(TFirstKey, TSecondKey) Not yet documented. Declaration public bool RemoveInner(TFirstKey firstKey, TSecondKey secondKey) Parameters Type Name Description TFirstKey firstKey TSecondKey secondKey Returns Type Description Boolean RemoveWhere(Func<TValue, Boolean>) Not yet documented. Declaration public void RemoveWhere(Func<TValue, bool> predicate) Parameters Type Name Description Func <TValue, Boolean > predicate TotalInnerCount() Not yet documented. Declaration public int TotalInnerCount() Returns Type Description Int32 TryGetInnerValue(TFirstKey, TSecondKey, out TValue) Not yet documented. Declaration public bool TryGetInnerValue(TFirstKey firstKey, TSecondKey secondKey, out TValue value) Parameters Type Name Description TFirstKey firstKey TSecondKey secondKey TValue value Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.EmitUtilities.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.EmitUtilities.html",
    "title": "Class EmitUtilities | TirUtilities",
    "keywords": "Class EmitUtilities Provides utilities for using the System.Reflection.Emit namespace. This class is due for refactoring. Use at your own peril. Inheritance Object EmitUtilities Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class EmitUtilities Properties CanEmit Gets a value indicating whether emitting is supported on the current platform. Declaration public static bool CanEmit { get; } Property Value Type Description Boolean true if the current platform can emit; otherwise, false . Methods CreateInstanceFieldGetter<InstanceType, FieldType>(FieldInfo) Creates a delegate which gets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static ValueGetter<InstanceType, FieldType> CreateInstanceFieldGetter<InstanceType, FieldType>(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The FieldInfo instance describing the field to create a getter for. Returns Type Description ValueGetter <InstanceType, FieldType> A delegate which gets the value of the given field. Type Parameters Name Description InstanceType The type of the instance to get a value from. FieldType The type of the field to get a value from. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateInstanceFieldSetter<InstanceType, FieldType>(FieldInfo) Creates a delegate which sets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static ValueSetter<InstanceType, FieldType> CreateInstanceFieldSetter<InstanceType, FieldType>(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The FieldInfo instance describing the field to create a setter for. Returns Type Description ValueSetter <InstanceType, FieldType> A delegate which sets the value of the given field. Type Parameters Name Description InstanceType The type of the instance to set a value on. FieldType The type of the field to set a value to. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateInstanceMethodCaller<InstanceType>(MethodInfo) Creates a fast delegate method which calls a given parameterless instance method on a reference type. Declaration public static Action<InstanceType> CreateInstanceMethodCaller<InstanceType>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description Action <InstanceType> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description InstanceType The type of the class which the method is on. CreateInstanceMethodCaller<InstanceType, Arg1>(MethodInfo) Creates a fast delegate method which calls a given instance method with a given argument on a reference type. Declaration public static Action<InstanceType, Arg1> CreateInstanceMethodCaller<InstanceType, Arg1>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description Action <InstanceType, Arg1> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description InstanceType The type of the class which the method is on. Arg1 The type of the argument with which to call the method. CreateInstancePropertyGetter<InstanceType, PropType>(PropertyInfo) Creates a delegate which gets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static ValueGetter<InstanceType, PropType> CreateInstancePropertyGetter<InstanceType, PropType>(PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The PropertyInfo instance describing the property to create a getter for. Returns Type Description ValueGetter <InstanceType, PropType> A delegate which gets the value of the given property. Type Parameters Name Description InstanceType The type of the instance to get a value from. PropType The type of the property to get a value from. Exceptions Type Condition ArgumentNullException The propertyInfo parameter is null. CreateInstancePropertySetter<InstanceType, PropType>(PropertyInfo) Creates a delegate which sets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static ValueSetter<InstanceType, PropType> CreateInstancePropertySetter<InstanceType, PropType>(PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The PropertyInfo instance describing the property to create a setter for. Returns Type Description ValueSetter <InstanceType, PropType> A delegate which sets the value of the given property. Type Parameters Name Description InstanceType The type of the instance to set a value on. PropType The type of the property to set a value to. Exceptions Type Condition ArgumentNullException The propertyInfo parameter is null. CreateInstanceRefMethodCaller<InstanceType>(MethodInfo) Creates a fast delegate method which calls a given parameterless instance method. Declaration public static EmitUtilities.InstanceRefMethodCaller<InstanceType> CreateInstanceRefMethodCaller<InstanceType>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description EmitUtilities.InstanceRefMethodCaller <InstanceType> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description InstanceType The type of the class which the method is on. CreateInstanceRefMethodCaller<InstanceType, Arg1>(MethodInfo) Creates a fast delegate method which calls a given instance method with a given argument on a struct type. Declaration public static EmitUtilities.InstanceRefMethodCaller<InstanceType, Arg1> CreateInstanceRefMethodCaller<InstanceType, Arg1>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description EmitUtilities.InstanceRefMethodCaller <InstanceType, Arg1> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description InstanceType The type of the class which the method is on. Arg1 The type of the argument with which to call the method. CreateMethodReturner<InstanceType, ReturnType>(MethodInfo) Creates a fast delegate method which calls a given parameterless instance method and returns the result. Declaration public static Func<InstanceType, ReturnType> CreateMethodReturner<InstanceType, ReturnType>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description Func <InstanceType, ReturnType> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description InstanceType The type of the class which the method is on. ReturnType The type which is returned by the given method info. CreateStaticFieldGetter<FieldType>(FieldInfo) Creates a delegate which gets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static Func<FieldType> CreateStaticFieldGetter<FieldType>(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The FieldInfo instance describing the field to create a getter for. Returns Type Description Func <FieldType> A delegate which gets the value of the given field. Type Parameters Name Description FieldType The type of the field to get a value from. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateStaticFieldSetter<FieldType>(FieldInfo) Creates a delegate which sets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static Action<FieldType> CreateStaticFieldSetter<FieldType>(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The FieldInfo instance describing the field to create a setter for. Returns Type Description Action <FieldType> A delegate which sets the value of the given field. Type Parameters Name Description FieldType The type of the field to set a value to. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateStaticMethodCaller(MethodInfo) Creates a fast delegate method which calls a given parameterless static method. Declaration public static Action CreateStaticMethodCaller(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description Action A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. CreateStaticPropertyGetter<PropType>(PropertyInfo) Creates a delegate which gets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static Func<PropType> CreateStaticPropertyGetter<PropType>(PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The PropertyInfo instance describing the property to create a getter for. Returns Type Description Func <PropType> A delegate which gets the value of the given property. Type Parameters Name Description PropType The type of the property to get a value from. Exceptions Type Condition ArgumentNullException The propertyInfo parameter is null. CreateStaticPropertySetter<PropType>(PropertyInfo) Creates a delegate which sets the value of a property. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static Action<PropType> CreateStaticPropertySetter<PropType>(PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The PropertyInfo instance describing the property to create a setter for. Returns Type Description Action <PropType> A delegate which sets the value of the given property. Type Parameters Name Description PropType The type of the property to set a value to. Exceptions Type Condition ArgumentNullException The propertyInfo parameter is null. CreateWeakInstanceFieldGetter(Type, FieldInfo) Creates a delegate which gets the weakly typed value of a field from a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static WeakValueGetter CreateWeakInstanceFieldGetter(Type instanceType, FieldInfo fieldInfo) Parameters Type Name Description Type instanceType The Type of the instance to get a value from. FieldInfo fieldInfo The FieldInfo instance describing the field to create a getter for. Returns Type Description WeakValueGetter A delegate which gets the value of the given field. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateWeakInstanceFieldGetter<FieldType>(Type, FieldInfo) Creates a delegate which gets the value of a field from a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static WeakValueGetter<FieldType> CreateWeakInstanceFieldGetter<FieldType>(Type instanceType, FieldInfo fieldInfo) Parameters Type Name Description Type instanceType The Type of the instance to get a value from. FieldInfo fieldInfo The FieldInfo instance describing the field to create a getter for. Returns Type Description WeakValueGetter <FieldType> A delegate which gets the value of the given field. Type Parameters Name Description FieldType The type of the field to get a value from. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateWeakInstanceFieldSetter(Type, FieldInfo) Creates a delegate which sets the weakly typed value of a field on a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static WeakValueSetter CreateWeakInstanceFieldSetter(Type instanceType, FieldInfo fieldInfo) Parameters Type Name Description Type instanceType Type of the instance. FieldInfo fieldInfo The FieldInfo instance describing the field to create a setter for. Returns Type Description WeakValueSetter A delegate which sets the value of the given field. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. ArgumentException Field cannot be static. CreateWeakInstanceFieldSetter<FieldType>(Type, FieldInfo) Creates a delegate which sets the value of a field on a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static WeakValueSetter<FieldType> CreateWeakInstanceFieldSetter<FieldType>(Type instanceType, FieldInfo fieldInfo) Parameters Type Name Description Type instanceType Type of the instance. FieldInfo fieldInfo The FieldInfo instance describing the field to create a setter for. Returns Type Description WeakValueSetter <FieldType> A delegate which sets the value of the given field. Type Parameters Name Description FieldType The type of the field to set a value to. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. ArgumentException Field cannot be static. CreateWeakInstanceMethodCaller(MethodInfo) Not yet documented. Declaration public static Action<object> CreateWeakInstanceMethodCaller(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo Returns Type Description Action < Object > CreateWeakInstanceMethodCaller<TArg1>(MethodInfo) Creates a fast delegate method which calls a given parameterless weakly typed instance method. Declaration public static Action<object, TArg1> CreateWeakInstanceMethodCaller<TArg1>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description Action < Object , TArg1> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description TArg1 CreateWeakInstanceMethodCaller<TResult, TArg1>(MethodInfo) Creates a fast delegate method which calls a given weakly typed instance method with one argument and returns a value. Declaration public static Func<object, TArg1, TResult> CreateWeakInstanceMethodCaller<TResult, TArg1>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method info instance which is used. Returns Type Description Func < Object , TArg1, TResult> A delegate which calls the method and returns the result, except it's hundreds of times faster than MethodInfo.Invoke. Type Parameters Name Description TResult The type of the result. TArg1 The type of the first argument. Exceptions Type Condition ArgumentNullException methodInfo ArgumentException Given method ' + methodInfo.Name + ' is static when it has to be an instance method. or Given method ' + methodInfo.Name + ' must return type + typeof(TResult) + . or Given method ' + methodInfo.Name + ' must have exactly one parameter. or The first parameter of the method ' + methodInfo.Name + ' must be of type + typeof(TArg1) + . CreateWeakInstanceMethodCallerFunc<TResult>(MethodInfo) Not yet documented. Declaration public static Func<object, TResult> CreateWeakInstanceMethodCallerFunc<TResult>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo Returns Type Description Func < Object , TResult> Type Parameters Name Description TResult CreateWeakInstanceMethodCallerFunc<TArg, TResult>(MethodInfo) Not yet documented. Declaration public static Func<object, TArg, TResult> CreateWeakInstanceMethodCallerFunc<TArg, TResult>(MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo Returns Type Description Func < Object , TArg, TResult> Type Parameters Name Description TArg TResult CreateWeakInstancePropertyGetter(Type, PropertyInfo) Creates a delegate which gets the weakly typed value of a field from a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static WeakValueGetter CreateWeakInstancePropertyGetter(Type instanceType, PropertyInfo propertyInfo) Parameters Type Name Description Type instanceType The Type of the instance to get a value from. PropertyInfo propertyInfo The FieldInfo instance describing the field to create a getter for. Returns Type Description WeakValueGetter A delegate which gets the value of the given field. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateWeakInstancePropertySetter(Type, PropertyInfo) Creates a delegate which sets the weakly typed value of a property on a weakly typed instance of a given type. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static WeakValueSetter CreateWeakInstancePropertySetter(Type instanceType, PropertyInfo propertyInfo) Parameters Type Name Description Type instanceType Type of the instance. PropertyInfo propertyInfo The PropertyInfo instance describing the property to create a setter for. Returns Type Description WeakValueSetter A delegate which sets the value of the given field. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. ArgumentException Property cannot be static. CreateWeakStaticFieldGetter(FieldInfo) Creates a delegate which gets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to get the value. Declaration public static Func<object> CreateWeakStaticFieldGetter(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The FieldInfo instance describing the field to create a getter for. Returns Type Description Func < Object > A delegate which gets the value of the given field. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null. CreateWeakStaticFieldSetter(FieldInfo) Creates a delegate which sets the value of a field. If emitting is not supported on the current platform, the delegate will use reflection to set the value. Declaration public static Action<object> CreateWeakStaticFieldSetter(FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The FieldInfo instance describing the field to create a setter for. Returns Type Description Action < Object > A delegate which sets the value of the given field. Exceptions Type Condition ArgumentNullException The fieldInfo parameter is null."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.EmitUtilities.InstanceRefMethodCaller-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.EmitUtilities.InstanceRefMethodCaller-1.html",
    "title": "Delegate EmitUtilities.InstanceRefMethodCaller<InstanceType> | TirUtilities",
    "keywords": "Delegate EmitUtilities.InstanceRefMethodCaller<InstanceType> Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void InstanceRefMethodCaller<InstanceType>(ref InstanceType instance); Parameters Type Name Description InstanceType instance Type Parameters Name Description InstanceType"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.EmitUtilities.InstanceRefMethodCaller-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.EmitUtilities.InstanceRefMethodCaller-2.html",
    "title": "Delegate EmitUtilities.InstanceRefMethodCaller<InstanceType, TArg1> | TirUtilities",
    "keywords": "Delegate EmitUtilities.InstanceRefMethodCaller<InstanceType, TArg1> Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void InstanceRefMethodCaller<InstanceType, TArg1>(ref InstanceType instance, TArg1 arg1); Parameters Type Name Description InstanceType instance TArg1 arg1 Type Parameters Name Description InstanceType TArg1"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.FastTypeComparer.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.FastTypeComparer.html",
    "title": "Class FastTypeComparer | TirUtilities",
    "keywords": "Class FastTypeComparer Compares types by reference before comparing them using the default type equality operator. This can constitute a significant speedup when used as the comparer for dictionaries. Inheritance Object FastTypeComparer Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public class FastTypeComparer : IEqualityComparer<Type> Fields Instance Declaration public static readonly FastTypeComparer Instance Field Value Type Description FastTypeComparer Methods Equals(Type, Type) Declaration public bool Equals(Type x, Type y) Parameters Type Name Description Type x Type y Returns Type Description Boolean GetHashCode(Type) Declaration public int GetHashCode(Type obj) Parameters Type Name Description Type obj Returns Type Description Int32 See Also IEqualityComparer <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.FieldInfoExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.FieldInfoExtensions.html",
    "title": "Class FieldInfoExtensions | TirUtilities",
    "keywords": "Class FieldInfoExtensions FieldInfo method extensions. Inheritance Object FieldInfoExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class FieldInfoExtensions Methods DeAliasField(FieldInfo, Boolean) Returns the original, backing field of an alias field if the field is an alias. Declaration public static FieldInfo DeAliasField(this FieldInfo fieldInfo, bool throwOnNotAliased = false) Parameters Type Name Description FieldInfo fieldInfo The field to check. Boolean throwOnNotAliased if set to true an exception will be thrown if the field is not aliased. Returns Type Description FieldInfo Exceptions Type Condition ArgumentException The field was not aliased; this only occurs if throwOnNotAliased is true. IsAliasField(FieldInfo) Determines whether the specified field is an alias. Declaration public static bool IsAliasField(this FieldInfo fieldInfo) Parameters Type Name Description FieldInfo fieldInfo The field to check. Returns Type Description Boolean true if the specified field is an alias; otherwise, false ."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.Flags.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.Flags.html",
    "title": "Class Flags | TirUtilities",
    "keywords": "Class Flags This class encapsulates common BindingFlags combinations. Inheritance Object Flags Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class Flags Fields AllMembers Search criteria encompassing all members (public and non-public, instance and static), including base members. Declaration public const BindingFlags AllMembers = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy Field Value Type Description BindingFlags AnyVisibility Search criteria encompassing all public and non-public members, including base members. Note that you also need to specify either the Instance or Static flag. Declaration public const BindingFlags AnyVisibility = BindingFlags.Public | BindingFlags.NonPublic Field Value Type Description BindingFlags InstanceAnyDeclaredOnly Search criteria encompassing all public and non-public instance members, excluding base members. Declaration public const BindingFlags InstanceAnyDeclaredOnly = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic Field Value Type Description BindingFlags InstanceAnyVisibility Search criteria encompassing all public and non-public instance members, including base members. Declaration public const BindingFlags InstanceAnyVisibility = BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic Field Value Type Description BindingFlags InstancePrivate Search criteria encompassing all non-public instance members, including base members. Declaration public const BindingFlags InstancePrivate = BindingFlags.Instance | BindingFlags.NonPublic Field Value Type Description BindingFlags InstancePrivateDeclaredOnly Search criteria encompassing all non-public instance members, excluding base members. Declaration public const BindingFlags InstancePrivateDeclaredOnly = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.NonPublic Field Value Type Description BindingFlags InstancePublic Search criteria encompassing all public instance members, including base members. Declaration public const BindingFlags InstancePublic = BindingFlags.Instance | BindingFlags.Public Field Value Type Description BindingFlags InstancePublicDeclaredOnly Search criteria encompassing all public instance members, excluding base members. Declaration public const BindingFlags InstancePublicDeclaredOnly = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public Field Value Type Description BindingFlags StaticAnyDeclaredOnly Search criteria encompassing all public and non-public static members, excluding base members. Declaration public const BindingFlags StaticAnyDeclaredOnly = BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic Field Value Type Description BindingFlags StaticAnyVisibility Search criteria encompassing all public and non-public static members, including base members. Declaration public const BindingFlags StaticAnyVisibility = BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic Field Value Type Description BindingFlags StaticInstanceAnyVisibility Search criteria encompassing all members, including base and static members. Declaration public const BindingFlags StaticInstanceAnyVisibility = BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic Field Value Type Description BindingFlags StaticPrivate Search criteria encompassing all non-public static members, including base members. Declaration public const BindingFlags StaticPrivate = BindingFlags.Static | BindingFlags.NonPublic Field Value Type Description BindingFlags StaticPrivateDeclaredOnly Search criteria encompassing all non-public static members, excluding base members. Declaration public const BindingFlags StaticPrivateDeclaredOnly = BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.NonPublic Field Value Type Description BindingFlags StaticPublic Search criteria encompassing all public static members, including base members. Declaration public const BindingFlags StaticPublic = BindingFlags.Static | BindingFlags.Public Field Value Type Description BindingFlags StaticPublicDeclaredOnly Search criteria encompassing all public static members, excluding base members. Declaration public const BindingFlags StaticPublicDeclaredOnly = BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public Field Value Type Description BindingFlags"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.DictionaryIterator-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.DictionaryIterator-2.html",
    "title": "Struct GarbageFreeIterators.DictionaryIterator<T1, T2> | TirUtilities",
    "keywords": "Struct GarbageFreeIterators.DictionaryIterator<T1, T2> Dictionary iterator. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public struct DictionaryIterator<T1, T2> : IDisposable Type Parameters Name Description T1 T2 Constructors DictionaryIterator(Dictionary<T1, T2>) Creates a dictionary iterator. Declaration public DictionaryIterator(Dictionary<T1, T2> dictionary) Parameters Type Name Description Dictionary <T1, T2> dictionary Properties Current Gets the current value. Declaration public readonly KeyValuePair<T1, T2> Current { get; } Property Value Type Description KeyValuePair <T1, T2> Methods Dispose() Disposes the iterator. Declaration public void Dispose() GetEnumerator() Gets the enumerator. Declaration public GarbageFreeIterators.DictionaryIterator<T1, T2> GetEnumerator() Returns Type Description GarbageFreeIterators.DictionaryIterator <T1, T2> MoveNext() Moves to the next value. Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.DictionaryValueIterator-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.DictionaryValueIterator-2.html",
    "title": "Struct GarbageFreeIterators.DictionaryValueIterator<T1, T2> | TirUtilities",
    "keywords": "Struct GarbageFreeIterators.DictionaryValueIterator<T1, T2> Dictionary value iterator. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public struct DictionaryValueIterator<T1, T2> : IDisposable Type Parameters Name Description T1 T2 Constructors DictionaryValueIterator(Dictionary<T1, T2>) Creates a dictionary value iterator. Declaration public DictionaryValueIterator(Dictionary<T1, T2> dictionary) Parameters Type Name Description Dictionary <T1, T2> dictionary Properties Current Gets the current value. Declaration public readonly T2 Current { get; } Property Value Type Description T2 Methods Dispose() Disposes the iterator. Declaration public void Dispose() GetEnumerator() Gets the enumerator. Declaration public GarbageFreeIterators.DictionaryValueIterator<T1, T2> GetEnumerator() Returns Type Description GarbageFreeIterators.DictionaryValueIterator <T1, T2> MoveNext() Moves to the next value. Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.HashsetIterator-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.HashsetIterator-1.html",
    "title": "Struct GarbageFreeIterators.HashsetIterator<T> | TirUtilities",
    "keywords": "Struct GarbageFreeIterators.HashsetIterator<T> Hashset iterator. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public struct HashsetIterator<T> : IDisposable Type Parameters Name Description T Constructors HashsetIterator(HashSet<T>) Creates a hashset iterator. Declaration public HashsetIterator(HashSet<T> hashset) Parameters Type Name Description HashSet <T> hashset Properties Current Gets the current value. Declaration public readonly T Current { get; } Property Value Type Description T Methods Dispose() Disposes the iterator. Declaration public void Dispose() GetEnumerator() Gets the enumerator. Declaration public GarbageFreeIterators.HashsetIterator<T> GetEnumerator() Returns Type Description GarbageFreeIterators.HashsetIterator <T> MoveNext() Moves to the next value. Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.html",
    "title": "Class GarbageFreeIterators | TirUtilities",
    "keywords": "Class GarbageFreeIterators Garbage free enumerator methods. Inheritance Object GarbageFreeIterators Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class GarbageFreeIterators Methods GFIterator<T>(HashSet<T>) Garbage free enumerator for hashsets. Declaration public static GarbageFreeIterators.HashsetIterator<T> GFIterator<T>(this HashSet<T> hashset) Parameters Type Name Description HashSet <T> hashset Returns Type Description GarbageFreeIterators.HashsetIterator <T> Type Parameters Name Description T GFIterator<T>(List<T>) Garbage free enumerator for lists. Declaration public static GarbageFreeIterators.ListIterator<T> GFIterator<T>(this List<T> list) Parameters Type Name Description List <T> list Returns Type Description GarbageFreeIterators.ListIterator <T> Type Parameters Name Description T GFIterator<T1, T2>(Dictionary<T1, T2>) Garbage free enumerator for dictionaries. Declaration public static GarbageFreeIterators.DictionaryIterator<T1, T2> GFIterator<T1, T2>(this Dictionary<T1, T2> dictionary) Parameters Type Name Description Dictionary <T1, T2> dictionary Returns Type Description GarbageFreeIterators.DictionaryIterator <T1, T2> Type Parameters Name Description T1 T2 GFValueIterator<T1, T2>(Dictionary<T1, T2>) Garbage free enumator for dictionary values. Declaration public static GarbageFreeIterators.DictionaryValueIterator<T1, T2> GFValueIterator<T1, T2>(this Dictionary<T1, T2> dictionary) Parameters Type Name Description Dictionary <T1, T2> dictionary Returns Type Description GarbageFreeIterators.DictionaryValueIterator <T1, T2> Type Parameters Name Description T1 T2"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.ListIterator-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.GarbageFreeIterators.ListIterator-1.html",
    "title": "Struct GarbageFreeIterators.ListIterator<T> | TirUtilities",
    "keywords": "Struct GarbageFreeIterators.ListIterator<T> List iterator. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public struct ListIterator<T> : IDisposable Type Parameters Name Description T Constructors ListIterator(List<T>) Creates a list iterator. Declaration public ListIterator(List<T> list) Parameters Type Name Description List <T> list Properties Current Gets the current value. Declaration public readonly T Current { get; } Property Value Type Description T Methods Dispose() Disposes the iterator. Declaration public void Dispose() GetEnumerator() Gets the enumerator. Declaration public GarbageFreeIterators.ListIterator<T> GetEnumerator() Returns Type Description GarbageFreeIterators.ListIterator <T> MoveNext() Moves to the next value. Declaration public bool MoveNext() Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.html",
    "title": "Namespace TirUtilities.External.OdinSerializer.Utilities | TirUtilities",
    "keywords": "Namespace TirUtilities.External.OdinSerializer.Utilities Classes Cache<T> Provides an easy way of claiming and freeing cached values of any non-abstract reference type with a public parameterless constructor. Cached types which implement the ICacheNotificationReceiver interface will receive notifications when they are claimed and freed. Only one thread should be holding a given cache instance at a time if ICacheNotificationReceiver is implemented, since the invocation of OnFreed() is not thread safe, IE, weird stuff might happen if multiple different threads are trying to free the same cache instance at the same time. This will practically never happen unless you're doing really strange stuff, but the case is documented here. DoubleLookupDictionary<TFirstKey, TSecondKey, TValue> Not yet documented. EmitUtilities Provides utilities for using the System.Reflection.Emit namespace. This class is due for refactoring. Use at your own peril. FastTypeComparer Compares types by reference before comparing them using the default type equality operator. This can constitute a significant speedup when used as the comparer for dictionaries. FieldInfoExtensions FieldInfo method extensions. Flags This class encapsulates common BindingFlags combinations. GarbageFreeIterators Garbage free enumerator methods. ImmutableList Immutable list wraps another list, and allows for reading the inner list, without the ability to change it. ImmutableList<T> Not yet documented. ImmutableList<TList, TElement> Immutable list wraps another list, and allows for reading the inner list, without the ability to change it. LinqExtensions Various LinQ extensions. MemberAliasFieldInfo Provides a methods of representing imaginary fields which are unique to serialization. We aggregate the FieldInfo associated with this member and return a mangled form of the name. MemberAliasMethodInfo Provides a methods of representing aliased methods. In this case, what we're representing is a method on a parent class with the same name. We aggregate the MethodInfo associated with this member and return a mangled form of the name. The name that we return is \"parentname+methodName\". MemberAliasPropertyInfo Provides a methods of representing imaginary properties which are unique to serialization. We aggregate the PropertyInfo associated with this member and return a mangled form of the name. MemberInfoExtensions MemberInfo method extensions. MethodInfoExtensions Various extensions for MethodInfo. PathUtilities DirectoryInfo method extensions. PropertyInfoExtensions PropertyInfo method extensions. ReferenceEqualityComparer<T> Compares objects by reference only, ignoring equality operators completely. This is used by the property tree reference dictionaries to keep track of references. StringExtensions String method extensions. TypeExtensions Type method extensions. UnityExtensions Extends various Unity classes. UnityVersion Utility class indicating current Unity version. Structs GarbageFreeIterators.DictionaryIterator<T1, T2> Dictionary iterator. GarbageFreeIterators.DictionaryValueIterator<T1, T2> Dictionary value iterator. GarbageFreeIterators.HashsetIterator<T> Hashset iterator. GarbageFreeIterators.ListIterator<T> List iterator. Interfaces ICache ICacheNotificationReceiver Provides notification callbacks for values that are cached using the Cache<T> class. IImmutableList Interface for immutable list. IImmutableList<T> Interface for generic immutable list. Enums Operator Determines the type of operator. Delegates EmitUtilities.InstanceRefMethodCaller<InstanceType> EmitUtilities.InstanceRefMethodCaller<InstanceType, TArg1> ValueGetter<InstanceType, FieldType> Not yet documented. ValueSetter<InstanceType, FieldType> Not yet documented. WeakValueGetter Not yet documented. WeakValueGetter<FieldType> Not yet documented. WeakValueSetter Not yet documented. WeakValueSetter<FieldType> Not yet documented."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ICache.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ICache.html",
    "title": "Interface ICache | TirUtilities",
    "keywords": "Interface ICache Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public interface ICache : IDisposable Properties Value Declaration object Value { get; } Property Value Type Description Object"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ICacheNotificationReceiver.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ICacheNotificationReceiver.html",
    "title": "Interface ICacheNotificationReceiver | TirUtilities",
    "keywords": "Interface ICacheNotificationReceiver Provides notification callbacks for values that are cached using the Cache<T> class. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public interface ICacheNotificationReceiver Methods OnClaimed() Called when the cached value is claimed. Declaration void OnClaimed() OnFreed() Called when the cached value is freed. Declaration void OnFreed()"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.IImmutableList.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.IImmutableList.html",
    "title": "Interface IImmutableList | TirUtilities",
    "keywords": "Interface IImmutableList Interface for immutable list. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public interface IImmutableList : IList, ICollection, IEnumerable"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.IImmutableList-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.IImmutableList-1.html",
    "title": "Interface IImmutableList<T> | TirUtilities",
    "keywords": "Interface IImmutableList<T> Interface for generic immutable list. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public interface IImmutableList<T> : IImmutableList, IList, ICollection, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Properties Item[Int32] Index accessor. Declaration T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ImmutableList.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ImmutableList.html",
    "title": "Class ImmutableList | TirUtilities",
    "keywords": "Class ImmutableList Immutable list wraps another list, and allows for reading the inner list, without the ability to change it. Inheritance Object ImmutableList Implements IImmutableList < Object > IImmutableList Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class ImmutableList : IImmutableList<object>, IImmutableList, IList, ICollection, IList<object>, ICollection<object>, IEnumerable<object>, IEnumerable Constructors ImmutableList(IList) Creates an immutable list around another list. Declaration public ImmutableList(IList innerList) Parameters Type Name Description IList innerList Properties Count Number of items in the list. Declaration public int Count { get; } Property Value Type Description Int32 IsFixedSize Immutable list cannot be changed directly, so it's size is always fixed. Declaration public bool IsFixedSize { get; } Property Value Type Description Boolean IsReadOnly Immutable list are always readonly. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean IsSynchronized Returns true if the inner list is synchronized. Declaration public bool IsSynchronized { get; } Property Value Type Description Boolean Item[Int32] Index accessor. Declaration public object this[int index] { get; } Parameters Type Name Description Int32 index Index. Property Value Type Description Object SyncRoot Gets the sync root object. Declaration public object SyncRoot { get; } Property Value Type Description Object Methods Contains(Object) Returns true if the item is contained in the list. Declaration public bool Contains(object value) Parameters Type Name Description Object value The item's value. Returns Type Description Boolean CopyTo(Array, Int32) Copy the list to an array, Declaration public void CopyTo(Array array, int index) Parameters Type Name Description Array array Target array. Int32 index Index. CopyTo(Object[], Int32) Copy the list to an array, Declaration public void CopyTo(object[] array, int arrayIndex) Parameters Type Name Description Object [] array Target array. Int32 arrayIndex Index. GetEnumerator() Gets an enumerator. Declaration public IEnumerator GetEnumerator() Returns Type Description IEnumerator IndexOf(Object) Get the index of a value. Declaration public int IndexOf(object value) Parameters Type Name Description Object value The item's value. Returns Type Description Int32 Implements IImmutableList<T> IImmutableList"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ImmutableList-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ImmutableList-1.html",
    "title": "Class ImmutableList<T> | TirUtilities",
    "keywords": "Class ImmutableList<T> Not yet documented. Inheritance Object ImmutableList<T> Implements IImmutableList <T> IImmutableList Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class ImmutableList<T> : IImmutableList<T>, IImmutableList, IList, ICollection, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors ImmutableList(IList<T>) Not yet documented. Declaration public ImmutableList(IList<T> innerList) Parameters Type Name Description IList <T> innerList Properties Count Not yet documented. Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Not yet documented. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Not yet documented. Declaration public T this[int index] { get; } Parameters Type Name Description Int32 index Property Value Type Description T Methods Contains(T) Not yet documented. Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Not yet documented. Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex GetEnumerator() Not yet documented. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IndexOf(T) Not yet documented. Declaration public int IndexOf(T item) Parameters Type Name Description T item Returns Type Description Int32 Implements IImmutableList<T> IImmutableList"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ImmutableList-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ImmutableList-2.html",
    "title": "Class ImmutableList<TList, TElement> | TirUtilities",
    "keywords": "Class ImmutableList<TList, TElement> Immutable list wraps another list, and allows for reading the inner list, without the ability to change it. Inheritance Object ImmutableList<TList, TElement> Implements IImmutableList <TElement> IImmutableList Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class ImmutableList<TList, TElement> : IImmutableList<TElement>, IImmutableList, IList, ICollection, IList<TElement>, ICollection<TElement>, IEnumerable<TElement>, IEnumerable where TList : IList<TElement> Type Parameters Name Description TList TElement Constructors ImmutableList(TList) Creates an immutable list around another list. Declaration public ImmutableList(TList innerList) Parameters Type Name Description TList innerList Properties Count Number of items in the list. Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Immutable list are always readonly. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Index accessor. Declaration public TElement this[int index] { get; } Parameters Type Name Description Int32 index Index. Property Value Type Description TElement Methods Contains(TElement) Returns true if the item is contained in the list. Declaration public bool Contains(TElement item) Parameters Type Name Description TElement item Returns Type Description Boolean CopyTo(TElement[], Int32) Copies the list to an array. Declaration public void CopyTo(TElement[] array, int arrayIndex) Parameters Type Name Description TElement[] array Int32 arrayIndex GetEnumerator() Gets an enumerator. Declaration public IEnumerator<TElement> GetEnumerator() Returns Type Description IEnumerator <TElement> IndexOf(TElement) Gets the index of an item. Declaration public int IndexOf(TElement item) Parameters Type Name Description TElement item Returns Type Description Int32 Implements IImmutableList<T> IImmutableList"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.LinqExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.LinqExtensions.html",
    "title": "Class LinqExtensions | TirUtilities",
    "keywords": "Class LinqExtensions Various LinQ extensions. Inheritance Object LinqExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class LinqExtensions Methods Append<T>(IEnumerable<T>, IEnumerable<T>) Add a collection to the end of another collection. Declaration public static IEnumerable<T> Append<T>(this IEnumerable<T> source, IEnumerable<T> append) Parameters Type Name Description IEnumerable <T> source The collection. IEnumerable <T> append The collection to append. Returns Type Description IEnumerable <T> Type Parameters Name Description T ForEach<T>(IEnumerable<T>, Action<T, Int32>) Perform an action on each item. Declaration public static IEnumerable<T> ForEach<T>(this IEnumerable<T> source, Action<T, int> action) Parameters Type Name Description IEnumerable <T> source The source. Action <T, Int32 > action The action to perform. Returns Type Description IEnumerable <T> Type Parameters Name Description T ForEach<T>(IEnumerable<T>, Action<T>) Perform an action on each item. Declaration public static IEnumerable<T> ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters Type Name Description IEnumerable <T> source The source. Action <T> action The action to perform. Returns Type Description IEnumerable <T> Type Parameters Name Description T"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.MemberAliasFieldInfo.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.MemberAliasFieldInfo.html",
    "title": "Class MemberAliasFieldInfo | TirUtilities",
    "keywords": "Class MemberAliasFieldInfo Provides a methods of representing imaginary fields which are unique to serialization. We aggregate the FieldInfo associated with this member and return a mangled form of the name. Inheritance Object MemberInfo FieldInfo MemberAliasFieldInfo Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public sealed class MemberAliasFieldInfo : FieldInfo, ICustomAttributeProvider, _MemberInfo, _FieldInfo Constructors MemberAliasFieldInfo(FieldInfo, String) Initializes a new instance of the MemberAliasFieldInfo class. Declaration public MemberAliasFieldInfo(FieldInfo field, string namePrefix) Parameters Type Name Description FieldInfo field The field to alias. String namePrefix The name prefix to use. MemberAliasFieldInfo(FieldInfo, String, String) Initializes a new instance of the MemberAliasFieldInfo class. Declaration public MemberAliasFieldInfo(FieldInfo field, string namePrefix, string separatorString) Parameters Type Name Description FieldInfo field The field to alias. String namePrefix The name prefix to use. String separatorString The separator string to use. Properties AliasedField Gets the aliased field. Declaration public FieldInfo AliasedField { get; } Property Value Type Description FieldInfo The aliased field. Attributes Gets the attributes. Declaration public override FieldAttributes Attributes { get; } Property Value Type Description FieldAttributes The attributes. Overrides FieldInfo.Attributes DeclaringType Gets the class that declares this member. Declaration public override Type DeclaringType { get; } Property Value Type Description Type Overrides MemberInfo.DeclaringType FieldHandle Gets a RuntimeFieldHandle, which is a handle to the internal metadata representation of a field. Declaration public override RuntimeFieldHandle FieldHandle { get; } Property Value Type Description RuntimeFieldHandle Overrides FieldInfo.FieldHandle FieldType Gets the type of the field. Declaration public override Type FieldType { get; } Property Value Type Description Type The type of the field. Overrides FieldInfo.FieldType MetadataToken Gets a value that identifies a metadata element. Declaration public override int MetadataToken { get; } Property Value Type Description Int32 Overrides MemberInfo.MetadataToken Module Gets the module in which the type that declares the member represented by the current MemberInfo is defined. Declaration public override Module Module { get; } Property Value Type Description Module Overrides MemberInfo.Module Name Gets the name of the current member. Declaration public override string Name { get; } Property Value Type Description String Overrides MemberInfo.Name ReflectedType Gets the class object that was used to obtain this instance of MemberInfo. Declaration public override Type ReflectedType { get; } Property Value Type Description Type Overrides MemberInfo.ReflectedType Methods GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) GetCustomAttributes(Type, Boolean) When overridden in a derived class, returns an array of custom attributes applied to this member and identified by Type . Declaration public override object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of attribute to search for. Only attributes that are assignable to this type are returned. Boolean inherit True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Object [] An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to attributeType have been applied. Overrides MemberInfo.GetCustomAttributes(Type, Boolean) GetValue(Object) Gets the value of the field. Declaration public override object GetValue(object obj) Parameters Type Name Description Object obj The object instance to get the value from. Returns Type Description Object The value of the field. Overrides FieldInfo.GetValue(Object) IsDefined(Type, Boolean) When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member. Declaration public override bool IsDefined(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of custom attribute to search for. The search includes derived types. Boolean inherit True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Boolean True if one or more instances of attributeType or any of its derived types is applied to this member; otherwise, false. Overrides MemberInfo.IsDefined(Type, Boolean) SetValue(Object, Object, BindingFlags, Binder, CultureInfo) When overridden in a derived class, sets the value of the field supported by the given object. Declaration public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, CultureInfo culture) Parameters Type Name Description Object obj The object whose field value will be set. Object value The value to assign to the field. BindingFlags invokeAttr A field of Binder that specifies the type of binding that is desired (for example, Binder.CreateInstance or Binder.ExactBinding). Binder binder A set of properties that enables the binding, coercion of argument types, and invocation of members through reflection. If binder is null, then Binder.DefaultBinding is used. CultureInfo culture The software preferences of a particular culture. Overrides FieldInfo.SetValue(Object, Object, BindingFlags, Binder, CultureInfo) See Also FieldInfo"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.MemberAliasMethodInfo.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.MemberAliasMethodInfo.html",
    "title": "Class MemberAliasMethodInfo | TirUtilities",
    "keywords": "Class MemberAliasMethodInfo Provides a methods of representing aliased methods. In this case, what we're representing is a method on a parent class with the same name. We aggregate the MethodInfo associated with this member and return a mangled form of the name. The name that we return is \"parentname+methodName\". Inheritance Object MemberInfo MethodBase MethodInfo MemberAliasMethodInfo Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public sealed class MemberAliasMethodInfo : MethodInfo, ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo Constructors MemberAliasMethodInfo(MethodInfo, String) Initializes a new instance of the MemberAliasMethodInfo class. Declaration public MemberAliasMethodInfo(MethodInfo method, string namePrefix) Parameters Type Name Description MethodInfo method The method to alias. String namePrefix The name prefix to use. MemberAliasMethodInfo(MethodInfo, String, String) Initializes a new instance of the MemberAliasMethodInfo class. Declaration public MemberAliasMethodInfo(MethodInfo method, string namePrefix, string separatorString) Parameters Type Name Description MethodInfo method The method to alias. String namePrefix The name prefix to use. String separatorString The separator string to use. Properties AliasedMethod Gets the aliased method. Declaration public MethodInfo AliasedMethod { get; } Property Value Type Description MethodInfo The aliased method. Attributes Gets the attributes associated with this method. Declaration public override MethodAttributes Attributes { get; } Property Value Type Description MethodAttributes Overrides MethodBase.Attributes DeclaringType Gets the class that declares this member. Declaration public override Type DeclaringType { get; } Property Value Type Description Type Overrides MemberInfo.DeclaringType MethodHandle Gets a handle to the internal metadata representation of a method. Declaration public override RuntimeMethodHandle MethodHandle { get; } Property Value Type Description RuntimeMethodHandle Overrides MethodBase.MethodHandle Name Gets the name of the current member. Declaration public override string Name { get; } Property Value Type Description String Overrides MemberInfo.Name ReflectedType Gets the class object that was used to obtain this instance of MemberInfo. Declaration public override Type ReflectedType { get; } Property Value Type Description Type Overrides MemberInfo.ReflectedType ReturnType Declaration public override Type ReturnType { get; } Property Value Type Description Type Overrides MethodInfo.ReturnType ReturnTypeCustomAttributes Gets the custom attributes for the return type. Declaration public override ICustomAttributeProvider ReturnTypeCustomAttributes { get; } Property Value Type Description ICustomAttributeProvider Overrides MethodInfo.ReturnTypeCustomAttributes Methods GetBaseDefinition() When overridden in a derived class, returns the MethodInfo object for the method on the direct or indirect base class in which the method represented by this instance was first declared. Declaration public override MethodInfo GetBaseDefinition() Returns Type Description MethodInfo A MethodInfo object for the first implementation of this method. Overrides MethodInfo.GetBaseDefinition() GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) GetCustomAttributes(Type, Boolean) When overridden in a derived class, returns an array of custom attributes applied to this member and identified by Type . Declaration public override object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of attribute to search for. Only attributes that are assignable to this type are returned. Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Object [] An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to attributeType have been applied. Overrides MemberInfo.GetCustomAttributes(Type, Boolean) GetMethodImplementationFlags() When overridden in a derived class, returns the MethodImplAttributes flags. Declaration public override MethodImplAttributes GetMethodImplementationFlags() Returns Type Description MethodImplAttributes The MethodImplAttributes flags. Overrides MethodBase.GetMethodImplementationFlags() GetParameters() When overridden in a derived class, gets the parameters of the specified method or constructor. Declaration public override ParameterInfo[] GetParameters() Returns Type Description ParameterInfo [] An array of type ParameterInfo containing information that matches the signature of the method (or constructor) reflected by this MethodBase instance. Overrides MethodBase.GetParameters() Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) When overridden in a derived class, invokes the reflected method or constructor with the given parameters. Declaration public override object Invoke(object obj, BindingFlags invokeAttr, Binder binder, object[] parameters, CultureInfo culture) Parameters Type Name Description Object obj The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be null or an instance of the class that defines the constructor. BindingFlags invokeAttr A bitmask that is a combination of 0 or more bit flags from BindingFlags . If binder is null, this parameter is assigned the value Default ; thus, whatever you pass in is ignored. Binder binder An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is null, the default binder is used. Object [] parameters An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, this should be null.If the method or constructor represented by this instance takes a ByRef parameter, there is no special attribute required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is null. For value-type elements, this value is 0, 0.0, or false, depending on the specific element type. CultureInfo culture An instance of CultureInfo used to govern the coercion of types. If this is null, the CultureInfo for the current thread is used. (This is necessary to convert a String that represents 1000 to a Double value, for example, since 1000 is represented differently by different cultures.) Returns Type Description Object An Object containing the return value of the invoked method, or null in the case of a constructor, or null if the method's return type is void. Before calling the method or constructor, Invoke checks to see if the user has access permission and verifies that the parameters are valid.CautionElements of the parameters array that represent parameters declared with the ref or out keyword may also be modified. Overrides MethodBase.Invoke(Object, BindingFlags, Binder, Object[], CultureInfo) IsDefined(Type, Boolean) When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member. Declaration public override bool IsDefined(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of custom attribute to search for. The search includes derived types. Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Boolean true if one or more instances of attributeType or any of its derived types is applied to this member; otherwise, false. Overrides MemberInfo.IsDefined(Type, Boolean) See Also FieldInfo"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.MemberAliasPropertyInfo.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.MemberAliasPropertyInfo.html",
    "title": "Class MemberAliasPropertyInfo | TirUtilities",
    "keywords": "Class MemberAliasPropertyInfo Provides a methods of representing imaginary properties which are unique to serialization. We aggregate the PropertyInfo associated with this member and return a mangled form of the name. Inheritance Object MemberInfo PropertyInfo MemberAliasPropertyInfo Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public sealed class MemberAliasPropertyInfo : PropertyInfo, ICustomAttributeProvider, _MemberInfo, _PropertyInfo Constructors MemberAliasPropertyInfo(PropertyInfo, String) Initializes a new instance of the MemberAliasPropertyInfo class. Declaration public MemberAliasPropertyInfo(PropertyInfo prop, string namePrefix) Parameters Type Name Description PropertyInfo prop The property to alias. String namePrefix The name prefix to use. MemberAliasPropertyInfo(PropertyInfo, String, String) Initializes a new instance of the MemberAliasPropertyInfo class. Declaration public MemberAliasPropertyInfo(PropertyInfo prop, string namePrefix, string separatorString) Parameters Type Name Description PropertyInfo prop The property to alias. String namePrefix The name prefix to use. String separatorString The separator string to use. Properties AliasedProperty The backing PropertyInfo that is being aliased. Declaration public PropertyInfo AliasedProperty { get; } Property Value Type Description PropertyInfo Attributes Gets the attributes. Declaration public override PropertyAttributes Attributes { get; } Property Value Type Description PropertyAttributes The attributes. Overrides PropertyInfo.Attributes CanRead Gets a value indicating whether this instance can read. Declaration public override bool CanRead { get; } Property Value Type Description Boolean true if this instance can read; otherwise, false . Overrides PropertyInfo.CanRead CanWrite Gets a value indicating whether this instance can write. Declaration public override bool CanWrite { get; } Property Value Type Description Boolean true if this instance can write; otherwise, false . Overrides PropertyInfo.CanWrite DeclaringType Gets the class that declares this member. Declaration public override Type DeclaringType { get; } Property Value Type Description Type Overrides MemberInfo.DeclaringType MetadataToken Gets a value that identifies a metadata element. Declaration public override int MetadataToken { get; } Property Value Type Description Int32 Overrides MemberInfo.MetadataToken Module Gets the module in which the type that declares the member represented by the current MemberInfo is defined. Declaration public override Module Module { get; } Property Value Type Description Module Overrides MemberInfo.Module Name Gets the name of the current member. Declaration public override string Name { get; } Property Value Type Description String Overrides MemberInfo.Name PropertyType Gets the type of the property. Declaration public override Type PropertyType { get; } Property Value Type Description Type The type of the property. Overrides PropertyInfo.PropertyType ReflectedType Gets the class object that was used to obtain this instance of MemberInfo. Declaration public override Type ReflectedType { get; } Property Value Type Description Type Overrides MemberInfo.ReflectedType Methods GetAccessors(Boolean) Returns an array whose elements reflect the public and, if specified, non-public get, set, and other accessors of the property reflected by the current instance. Declaration public override MethodInfo[] GetAccessors(bool nonPublic) Parameters Type Name Description Boolean nonPublic Indicates whether non-public methods should be returned in the MethodInfo array. true if non-public methods are to be included; otherwise, false. Returns Type Description MethodInfo [] An array of MethodInfo objects whose elements reflect the get, set, and other accessors of the property reflected by the current instance. If nonPublic is true, this array contains public and non-public get, set, and other accessors. If nonPublic is false, this array contains only public get, set, and other accessors. If no accessors with the specified visibility are found, this method returns an array with zero (0) elements. Overrides PropertyInfo.GetAccessors(Boolean) GetCustomAttributes(Boolean) When overridden in a derived class, returns an array of all custom attributes applied to this member. Declaration public override object[] GetCustomAttributes(bool inherit) Parameters Type Name Description Boolean inherit True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Object [] An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined. Overrides MemberInfo.GetCustomAttributes(Boolean) GetCustomAttributes(Type, Boolean) When overridden in a derived class, returns an array of custom attributes applied to this member and identified by Type . Declaration public override object[] GetCustomAttributes(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of attribute to search for. Only attributes that are assignable to this type are returned. Boolean inherit True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Object [] An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to attributeType have been applied. Overrides MemberInfo.GetCustomAttributes(Type, Boolean) GetGetMethod(Boolean) When overridden in a derived class, returns the public or non-public get accessor for this property. Declaration public override MethodInfo GetGetMethod(bool nonPublic) Parameters Type Name Description Boolean nonPublic Indicates whether a non-public get accessor should be returned. true if a non-public accessor is to be returned; otherwise, false. Returns Type Description MethodInfo A MethodInfo object representing the get accessor for this property, if nonPublic is true. Returns null if nonPublic is false and the get accessor is non-public, or if nonPublic is true but no get accessors exist. Overrides PropertyInfo.GetGetMethod(Boolean) GetIndexParameters() Gets the index parameters of the property. Declaration public override ParameterInfo[] GetIndexParameters() Returns Type Description ParameterInfo [] The index parameters of the property. Overrides PropertyInfo.GetIndexParameters() GetSetMethod(Boolean) When overridden in a derived class, returns the set accessor for this property. Declaration public override MethodInfo GetSetMethod(bool nonPublic) Parameters Type Name Description Boolean nonPublic Indicates whether the accessor should be returned if it is non-public. true if a non-public accessor is to be returned; otherwise, false. Returns Type Description MethodInfo Value Condition A MethodInfo object representing the Set method for this property. The set accessor is public.-or- nonPublic is true and the set accessor is non-public. null nonPublic is true, but the property is read-only.-or- nonPublic is false and the set accessor is non-public.-or- There is no set accessor. Overrides PropertyInfo.GetSetMethod(Boolean) GetValue(Object, BindingFlags, Binder, Object[], CultureInfo) Gets the value of the property on the given instance. Declaration public override object GetValue(object obj, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) Parameters Type Name Description Object obj The object to invoke the getter on. BindingFlags invokeAttr The BindingFlags to invoke with. Binder binder The binder to use. Object [] index The indices to use. CultureInfo culture The culture to use. Returns Type Description Object The value of the property on the given instance. Overrides PropertyInfo.GetValue(Object, BindingFlags, Binder, Object[], CultureInfo) IsDefined(Type, Boolean) When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member. Declaration public override bool IsDefined(Type attributeType, bool inherit) Parameters Type Name Description Type attributeType The type of custom attribute to search for. The search includes derived types. Boolean inherit True to search this member's inheritance chain to find the attributes; otherwise, false. This parameter is ignored for properties and events; see Remarks. Returns Type Description Boolean True if one or more instances of attributeType or any of its derived types is applied to this member; otherwise, false. Overrides MemberInfo.IsDefined(Type, Boolean) SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo) Sets the value of the property on the given instance. Declaration public override void SetValue(object obj, object value, BindingFlags invokeAttr, Binder binder, object[] index, CultureInfo culture) Parameters Type Name Description Object obj The object to set the value on. Object value The value to set. BindingFlags invokeAttr The BindingFlags to invoke with. Binder binder The binder to use. Object [] index The indices to use. CultureInfo culture The culture to use. Overrides PropertyInfo.SetValue(Object, Object, BindingFlags, Binder, Object[], CultureInfo) See Also FieldInfo"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.MemberInfoExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.MemberInfoExtensions.html",
    "title": "Class MemberInfoExtensions | TirUtilities",
    "keywords": "Class MemberInfoExtensions MemberInfo method extensions. Inheritance Object MemberInfoExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class MemberInfoExtensions Methods DeAlias(MemberInfo, Boolean) Returns the original, backing member of an alias member if the member is an alias. Declaration public static MemberInfo DeAlias(this MemberInfo memberInfo, bool throwOnNotAliased = false) Parameters Type Name Description MemberInfo memberInfo The member to check. Boolean throwOnNotAliased if set to true an exception will be thrown if the member is not aliased. Returns Type Description MemberInfo Exceptions Type Condition ArgumentException The member was not aliased; this only occurs if throwOnNotAliased is true. GetAttribute<T>(ICustomAttributeProvider) Returns the first found non-inherited custom attribute of type T on this member Returns null if none was found Declaration public static T GetAttribute<T>(this ICustomAttributeProvider member) where T : Attribute Parameters Type Name Description ICustomAttributeProvider member Returns Type Description T Type Parameters Name Description T GetAttribute<T>(ICustomAttributeProvider, Boolean) Returns the first found custom attribute of type T on this member Returns null if none was found Declaration public static T GetAttribute<T>(this ICustomAttributeProvider member, bool inherit) where T : Attribute Parameters Type Name Description ICustomAttributeProvider member Boolean inherit Returns Type Description T Type Parameters Name Description T GetAttributes(ICustomAttributeProvider) Gets all attribute instances defined on a MemeberInfo. Declaration public static Attribute[] GetAttributes(this ICustomAttributeProvider member) Parameters Type Name Description ICustomAttributeProvider member The member. Returns Type Description Attribute [] GetAttributes(ICustomAttributeProvider, Boolean) Gets all attribute instances on a MemberInfo. Declaration public static Attribute[] GetAttributes(this ICustomAttributeProvider member, bool inherit) Parameters Type Name Description ICustomAttributeProvider member The member. Boolean inherit If true, specifies to also search the ancestors of element for custom attributes. Returns Type Description Attribute [] GetAttributes<T>(ICustomAttributeProvider) Gets all attributes of the specified generic type. Declaration public static IEnumerable<T> GetAttributes<T>(this ICustomAttributeProvider member) where T : Attribute Parameters Type Name Description ICustomAttributeProvider member The member. Returns Type Description IEnumerable <T> Type Parameters Name Description T GetAttributes<T>(ICustomAttributeProvider, Boolean) Gets all attributes of the specified generic type. Declaration public static IEnumerable<T> GetAttributes<T>(this ICustomAttributeProvider member, bool inherit) where T : Attribute Parameters Type Name Description ICustomAttributeProvider member The member. Boolean inherit If true, specifies to also search the ancestors of element for custom attributes. Returns Type Description IEnumerable <T> Type Parameters Name Description T GetNiceName(MemberInfo) If this member is a method, returns the full method name (name + params) otherwise the member name paskal splitted Declaration public static string GetNiceName(this MemberInfo member) Parameters Type Name Description MemberInfo member Returns Type Description String IsAlias(MemberInfo) Determines whether the specified member is an alias. Declaration public static bool IsAlias(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo The member to check. Returns Type Description Boolean true if the specified member is an alias; otherwise, false . IsDefined<T>(ICustomAttributeProvider) Returns true if the attribute whose type is specified by the generic argument is defined on this member Declaration public static bool IsDefined<T>(this ICustomAttributeProvider member) where T : Attribute Parameters Type Name Description ICustomAttributeProvider member Returns Type Description Boolean Type Parameters Name Description T IsDefined<T>(ICustomAttributeProvider, Boolean) Returns true if the attribute whose type is specified by the generic argument is defined on this member Declaration public static bool IsDefined<T>(this ICustomAttributeProvider member, bool inherit) where T : Attribute Parameters Type Name Description ICustomAttributeProvider member Boolean inherit Returns Type Description Boolean Type Parameters Name Description T IsStatic(MemberInfo) Determines whether a FieldInfo, PropertyInfo or MethodInfo is static. Declaration public static bool IsStatic(this MemberInfo member) Parameters Type Name Description MemberInfo member The member. Returns Type Description Boolean true if the specified member is static; otherwise, false . Exceptions Type Condition NotSupportedException"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.MethodInfoExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.MethodInfoExtensions.html",
    "title": "Class MethodInfoExtensions | TirUtilities",
    "keywords": "Class MethodInfoExtensions Various extensions for MethodInfo. Inheritance Object MethodInfoExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class MethodInfoExtensions Methods DeAliasMethod(MethodInfo, Boolean) Returns the original, backing method of an alias method if the method is an alias. Declaration public static MethodInfo DeAliasMethod(this MethodInfo methodInfo, bool throwOnNotAliased = false) Parameters Type Name Description MethodInfo methodInfo The method to check. Boolean throwOnNotAliased if set to true an exception will be thrown if the method is not aliased. Returns Type Description MethodInfo Exceptions Type Condition ArgumentException The method was not aliased; this only occurs if throwOnNotAliased is true. GetFullName(MethodBase) Returns the specified method's full name. Declaration public static string GetFullName(this MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description String GetFullName(MethodBase, String) Returns the specified method's full name \"methodName(argType1 arg1, argType2 arg2, etc)\" Uses the specified gauntlet to replaces type names, ex: \"int\" instead of \"Int32\" Declaration public static string GetFullName(this MethodBase method, string extensionMethodPrefix) Parameters Type Name Description MethodBase method String extensionMethodPrefix Returns Type Description String GetParamsNames(MethodBase) Returns a string representing the passed method parameters names. Ex \"int num, float damage, Transform target\" Declaration public static string GetParamsNames(this MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description String IsAliasMethod(MethodInfo) Determines whether the specified method is an alias. Declaration public static bool IsAliasMethod(this MethodInfo methodInfo) Parameters Type Name Description MethodInfo methodInfo The method to check. Returns Type Description Boolean true if the specified method is an alias; otherwise, false . IsExtensionMethod(MethodBase) Tests if a method is an extension method. Declaration public static bool IsExtensionMethod(this MethodBase method) Parameters Type Name Description MethodBase method Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.Operator.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.Operator.html",
    "title": "Enum Operator | TirUtilities",
    "keywords": "Enum Operator Determines the type of operator. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public enum Operator Fields Name Description Addition The + operator. BitwiseAnd The & operator. BitwiseComplement The ~ operator. BitwiseOr The | operator. Division The / operator. Equality The == operator. ExclusiveOr The ^ operator. GreaterThan The > operator. GreaterThanOrEqual The >= operator. Inequality The != operator. LeftShift The << operator. LessThan The < operator. LessThanOrEqual The <= operator. LogicalAnd The && operator. LogicalNot The ! operator. LogicalOr The || operator. Modulus The % operator. Multiply The * operator. RightShift The >> operator. Subtraction The - operator. See Also TypeExtensions"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.PathUtilities.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.PathUtilities.html",
    "title": "Class PathUtilities | TirUtilities",
    "keywords": "Class PathUtilities DirectoryInfo method extensions. Inheritance Object PathUtilities Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class PathUtilities Methods HasSubDirectory(DirectoryInfo, DirectoryInfo) Determines whether the directory has a given directory in its hierarchy of children. Declaration public static bool HasSubDirectory(this DirectoryInfo parentDir, DirectoryInfo subDir) Parameters Type Name Description DirectoryInfo parentDir The parent directory. DirectoryInfo subDir The sub directory. Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.PropertyInfoExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.PropertyInfoExtensions.html",
    "title": "Class PropertyInfoExtensions | TirUtilities",
    "keywords": "Class PropertyInfoExtensions PropertyInfo method extensions. Inheritance Object PropertyInfoExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class PropertyInfoExtensions Methods DeAliasProperty(PropertyInfo, Boolean) Returns the original, backing property of an alias property if the property is an alias. Declaration public static PropertyInfo DeAliasProperty(this PropertyInfo propertyInfo, bool throwOnNotAliased = false) Parameters Type Name Description PropertyInfo propertyInfo The property to check. Boolean throwOnNotAliased if set to true an exception will be thrown if the property is not aliased. Returns Type Description PropertyInfo Exceptions Type Condition ArgumentException The property was not aliased; this only occurs if throwOnNotAliased is true. IsAliasProperty(PropertyInfo) Determines whether the specified property is an alias. Declaration public static bool IsAliasProperty(this PropertyInfo propertyInfo) Parameters Type Name Description PropertyInfo propertyInfo The property to check. Returns Type Description Boolean true if the specified property is an alias; otherwise, false . IsAutoProperty(PropertyInfo, Boolean) Determines whether a property is an auto property with a usable getter and setter. Declaration public static bool IsAutoProperty(this PropertyInfo propInfo, bool allowVirtual = false) Parameters Type Name Description PropertyInfo propInfo Boolean allowVirtual Returns Type Description Boolean"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ReferenceEqualityComparer-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ReferenceEqualityComparer-1.html",
    "title": "Class ReferenceEqualityComparer<T> | TirUtilities",
    "keywords": "Class ReferenceEqualityComparer<T> Compares objects by reference only, ignoring equality operators completely. This is used by the property tree reference dictionaries to keep track of references. Inheritance Object ReferenceEqualityComparer<T> Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public class ReferenceEqualityComparer<T> : IEqualityComparer<T> where T : class Type Parameters Name Description T Fields Default A default, cached instance of this generic variant of the reference equality comparer. Declaration public static readonly ReferenceEqualityComparer<T> Default Field Value Type Description ReferenceEqualityComparer <T> Methods Equals(T, T) Returns true if the object references are equal. Declaration public bool Equals(T x, T y) Parameters Type Name Description T x T y Returns Type Description Boolean GetHashCode(T) Returns the result of the object's own GetHashCode method. Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj Returns Type Description Int32"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.StringExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.StringExtensions.html",
    "title": "Class StringExtensions | TirUtilities",
    "keywords": "Class StringExtensions String method extensions. Inheritance Object StringExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class StringExtensions Methods IsNullOrWhitespace(String) Returns true if this string is null, empty, or contains only whitespace. Declaration public static bool IsNullOrWhitespace(this string str) Parameters Type Name Description String str The string to check. Returns Type Description Boolean true if this string is null, empty, or contains only whitespace; otherwise, false . ToTitleCase(String) Eg MY_INT_VALUE => MyIntValue Declaration public static string ToTitleCase(this string input) Parameters Type Name Description String input Returns Type Description String"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.TypeExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.TypeExtensions.html",
    "title": "Class TypeExtensions | TirUtilities",
    "keywords": "Class TypeExtensions Type method extensions. Inheritance Object TypeExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class TypeExtensions Fields TypeNameAlternatives Type name alias lookup. TypeNameAlternatives[\"Single\"] will give you \"float\", \"UInt16\" will give you \"ushort\", \"Boolean[]\" will give you \"bool[]\" etc.. Declaration public static readonly Dictionary<string, string> TypeNameAlternatives Field Value Type Description Dictionary < String , String > Methods AreGenericConstraintsSatisfiedBy(MethodBase, Type[]) Checks whether an array of types satisfy the constraints of a given generic method definition. If this method returns true, the given parameters can be safely used with MakeGenericMethod(Type[]) with the given generic method definition. Declaration public static bool AreGenericConstraintsSatisfiedBy(this MethodBase genericMethod, params Type[] parameters) Parameters Type Name Description MethodBase genericMethod Type [] parameters The parameters to check validity for. Returns Type Description Boolean Exceptions Type Condition ArgumentNullException genericType is null or types is null ArgumentException The genericMethod parameter must be a generic method definition. AreGenericConstraintsSatisfiedBy(Type, Type[]) Checks whether an array of types satisfy the constraints of a given generic type definition. If this method returns true, the given parameters can be safely used with MakeGenericType(Type[]) with the given generic type definition. Declaration public static bool AreGenericConstraintsSatisfiedBy(this Type genericType, params Type[] parameters) Parameters Type Name Description Type genericType The generic type definition to check. Type [] parameters The parameters to check validity for. Returns Type Description Boolean Exceptions Type Condition ArgumentNullException genericType is null or types is null ArgumentException The genericType parameter must be a generic type definition. AreGenericConstraintsSatisfiedBy(Type[], Type[]) Declaration public static bool AreGenericConstraintsSatisfiedBy(Type[] definitions, Type[] parameters) Parameters Type Name Description Type [] definitions Type [] parameters Returns Type Description Boolean GenericArgumentsContainsTypes(Type, Type[]) Determines whether a generic type contains the specified generic argument constraints. Declaration public static bool GenericArgumentsContainsTypes(this Type type, params Type[] types) Parameters Type Name Description Type type The type. Type [] types The generic argument types. Returns Type Description Boolean GenericParameterIsFulfilledBy(Type, Type) Declaration public static bool GenericParameterIsFulfilledBy(this Type genericParameterDefinition, Type parameterType) Parameters Type Name Description Type genericParameterDefinition Type parameterType Returns Type Description Boolean GetAllMembers(Type, BindingFlags) Gets all members from a given type, including members from all base types if the DeclaredOnly flag isn't set. Declaration public static IEnumerable<MemberInfo> GetAllMembers(this Type type, BindingFlags flags = BindingFlags.Default) Parameters Type Name Description Type type BindingFlags flags Returns Type Description IEnumerable < MemberInfo > GetAllMembers(Type, String, BindingFlags) Gets all members from a given type, including members from all base types. Declaration public static IEnumerable<MemberInfo> GetAllMembers(this Type type, string name, BindingFlags flags = BindingFlags.Default) Parameters Type Name Description Type type String name BindingFlags flags Returns Type Description IEnumerable < MemberInfo > GetAllMembers<T>(Type, BindingFlags) Gets all members of a specific type from a type, including members from all base types, if the DeclaredOnly flag isn't set. Declaration public static IEnumerable<T> GetAllMembers<T>(this Type type, BindingFlags flags = BindingFlags.Default) where T : MemberInfo Parameters Type Name Description Type type BindingFlags flags Returns Type Description IEnumerable <T> Type Parameters Name Description T GetArgumentsOfInheritedOpenGenericClass(Type, Type) Gets the generic arguments of an inherited open generic class. Declaration public static Type[] GetArgumentsOfInheritedOpenGenericClass(this Type candidateType, Type openGenericType) Parameters Type Name Description Type candidateType Type of the candidate. Type openGenericType Type of the open generic class. Returns Type Description Type [] GetArgumentsOfInheritedOpenGenericInterface(Type, Type) Gets the generic arguments of an inherited open generic interface. Declaration public static Type[] GetArgumentsOfInheritedOpenGenericInterface(this Type candidateType, Type openGenericInterfaceType) Parameters Type Name Description Type candidateType Type of the candidate. Type openGenericInterfaceType Type of the open generic interface. Returns Type Description Type [] GetArgumentsOfInheritedOpenGenericType(Type, Type) Gets the generic arguments of an inherited open generic class or interface. Declaration public static Type[] GetArgumentsOfInheritedOpenGenericType(this Type candidateType, Type openGenericType) Parameters Type Name Description Type candidateType Type of the candidate. Type openGenericType The open generic type to get the arguments of. Returns Type Description Type [] GetAttribute<T>(Type, Boolean) Gets the first attribute of type T. Returns null in the no attribute of type T was found. Declaration public static T GetAttribute<T>(this Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type The type. Boolean inherit If true, specifies to also search the ancestors of element for custom attributes. Returns Type Description T Type Parameters Name Description T GetBaseClasses(Type, Boolean) Returns a lazy enumerable of all the base classes of this type Declaration public static IEnumerable<Type> GetBaseClasses(this Type type, bool includeSelf = false) Parameters Type Name Description Type type Boolean includeSelf Returns Type Description IEnumerable < Type > GetBaseTypes(Type, Boolean) Returns a lazy enumerable of all the base types of this type including interfaces and classes Declaration public static IEnumerable<Type> GetBaseTypes(this Type type, bool includeSelf = false) Parameters Type Name Description Type type Boolean includeSelf Returns Type Description IEnumerable < Type > GetCastMethod(Type, Type, Boolean) If a type can be casted to another type, this provides the method info of the method in charge of converting the type. Declaration public static MethodInfo GetCastMethod(this Type from, Type to, bool requireImplicitCast = false) Parameters Type Name Description Type from From. Type to To. Boolean requireImplicitCast if set to true an implicit or explicit operator must be defined on the given type. Returns Type Description MethodInfo GetCastMethodDelegate(Type, Type, Boolean) If a type can be casted to another type, this provides a function to manually convert the type. Declaration public static Func<object, object> GetCastMethodDelegate(this Type from, Type to, bool requireImplicitCast = false) Parameters Type Name Description Type from From. Type to To. Boolean requireImplicitCast if set to true an implicit or explicit operator must be defined on the given type. Returns Type Description Func < Object , Object > GetCastMethodDelegate<TFrom, TTo>(Boolean) If a type can be casted to another type, this provides a function to manually convert the type. Declaration public static Func<TFrom, TTo> GetCastMethodDelegate<TFrom, TTo>(bool requireImplicitCast = false) Parameters Type Name Description Boolean requireImplicitCast if set to true an implicit or explicit operator must be defined on the given type. Returns Type Description Func <TFrom, TTo> Type Parameters Name Description TFrom TTo GetCompilableNiceFullName(Type) Gets the full name of the compilable nice. Declaration public static string GetCompilableNiceFullName(this Type type) Parameters Type Name Description Type type The type. Returns Type Description String GetCompilableNiceName(Type) Gets the name of the compilable nice. Declaration public static string GetCompilableNiceName(this Type type) Parameters Type Name Description Type type The type. Returns Type Description String GetCustomAttribute<T>(Type) Returns the first found non-inherited custom attribute of type T on this type Returns null if none was found Declaration public static T GetCustomAttribute<T>(this Type type) where T : Attribute Parameters Type Name Description Type type Returns Type Description T Type Parameters Name Description T GetCustomAttribute<T>(Type, Boolean) Returns the first found custom attribute of type T on this type Returns null if none was found Declaration public static T GetCustomAttribute<T>(this Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description T Type Parameters Name Description T GetCustomAttributes<T>(Type) Gets all attributes of type T. Declaration public static IEnumerable<T> GetCustomAttributes<T>(this Type type) where T : Attribute Parameters Type Name Description Type type The type. Returns Type Description IEnumerable <T> Type Parameters Name Description T GetCustomAttributes<T>(Type, Boolean) Gets all attributes of type T. Declaration public static IEnumerable<T> GetCustomAttributes<T>(this Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type The type Boolean inherit If true, specifies to also search the ancestors of element for custom attributes. Returns Type Description IEnumerable <T> Type Parameters Name Description T GetEnumBitmask(Object, Type) Gets the enum bitmask in a ulong. Declaration public static ulong GetEnumBitmask(object value, Type enumType) Parameters Type Name Description Object value Type enumType Returns Type Description UInt64 Exceptions Type Condition ArgumentException enumType GetEqualityComparerDelegate<T>() Gets an equality comparer delegate used to compare the equality of values of a given type. In order, this will be: The == operator, if one is defined on the type. A delegate that uses IEquatable<T> , if the type implements that interface. .NET's own Default Declaration public static Func<T, T, bool> GetEqualityComparerDelegate<T>() Returns Type Description Func <T, T, Boolean > Type Parameters Name Description T Remarks Note that in the special case of the type , a special equality comparer is returned that only checks whether all the Quaternion components are equal. This is because, by default, Quaternion's equality operator is broken when operating on invalid quaternions; \"default(Quaternion) == default(Quaternion)\" evaluates to false, and this causes a multitude of problems. Special delegates are also returned for float and double, that consider float.NaN to be equal to float.NaN, and double.NaN to be equal to double.NaN. GetGenericBaseType(Type, Type) Gets the generic type definition of an open generic base type. Declaration public static Type GetGenericBaseType(this Type type, Type baseType) Parameters Type Name Description Type type Type baseType Returns Type Description Type GetGenericBaseType(Type, Type, out Int32) Gets the generic type definition of an open generic base type. Declaration public static Type GetGenericBaseType(this Type type, Type baseType, out int depthCount) Parameters Type Name Description Type type Type baseType Int32 depthCount Returns Type Description Type GetGenericConstraintsString(Type, Boolean) Not yet documented. Declaration public static string GetGenericConstraintsString(this Type type, bool useFullTypeNames = false) Parameters Type Name Description Type type Boolean useFullTypeNames Returns Type Description String GetGenericParameterConstraintsString(Type, Boolean) Formats a string with the specified generic parameter constraints on any given type. Example output: where T : class Declaration public static string GetGenericParameterConstraintsString(this Type type, bool useFullTypeNames = false) Parameters Type Name Description Type type Boolean useFullTypeNames Returns Type Description String GetInheritanceDistance(Type, Type) Gets the number of base types between given type and baseType. Declaration public static int GetInheritanceDistance(this Type type, Type baseType) Parameters Type Name Description Type type Type baseType Returns Type Description Int32 GetMemberValue(MemberInfo, Object) Gets the value contained in a given MemberInfo . Currently only FieldInfo and PropertyInfo is supported. Declaration public static object GetMemberValue(this MemberInfo member, object obj) Parameters Type Name Description MemberInfo member The MemberInfo to get the value of. Object obj The instance to get the value from. Returns Type Description Object The value contained in the given MemberInfo . Exceptions Type Condition ArgumentException Can't get the value of the given MemberInfo type. GetNiceFullName(Type) Returns a nicely formatted full name of a type. Declaration public static string GetNiceFullName(this Type type) Parameters Type Name Description Type type Returns Type Description String GetNiceName(Type) Returns a nicely formatted name of a type. Declaration public static string GetNiceName(this Type type) Parameters Type Name Description Type type Returns Type Description String GetOperatorMethod(Type, Operator) Gets the MethodInfo of a specific operator type. Declaration public static MethodInfo GetOperatorMethod(this Type type, Operator op) Parameters Type Name Description Type type Operator op Returns Type Description MethodInfo GetOperatorMethod(Type, Operator, Type, Type) Gets the MethodInfo of a specific operator kind, with the given left and right operands. This overload is far faster than any of the other GetOperatorMethod implementations, and should be used whenever possible. Declaration public static MethodInfo GetOperatorMethod(this Type type, Operator op, Type leftOperand, Type rightOperand) Parameters Type Name Description Type type Operator op Type leftOperand Type rightOperand Returns Type Description MethodInfo GetOperatorMethods(Type, Operator) Gets the MethodInfo of a specific operator type. Declaration public static MethodInfo[] GetOperatorMethods(this Type type, Operator op) Parameters Type Name Description Type type Operator op Returns Type Description MethodInfo [] GetReturnType(MemberInfo) FieldInfo will return the fieldType, propertyInfo the PropertyType, MethodInfo the return type and EventInfo will return the EventHandlerType. Declaration public static Type GetReturnType(this MemberInfo memberInfo) Parameters Type Name Description MemberInfo memberInfo The MemberInfo. Returns Type Description Type HasParamaters(MethodInfo, IList<Type>, Boolean) Determines whether a method has the specified parameter types. Declaration public static bool HasParamaters(this MethodInfo methodInfo, IList<Type> paramTypes, bool inherit = true) Parameters Type Name Description MethodInfo methodInfo IList < Type > paramTypes Boolean inherit Returns Type Description Boolean ImplementsOpenGenericClass(Type, Type) Determines whether a type implements an open generic class such as List<>. Declaration public static bool ImplementsOpenGenericClass(this Type candidateType, Type openGenericType) Parameters Type Name Description Type candidateType Type of the candidate. Type openGenericType Type of the open generic interface. Returns Type Description Boolean ImplementsOpenGenericInterface(Type, Type) Determines whether a type implements an open generic interface such as IList<>. Declaration public static bool ImplementsOpenGenericInterface(this Type candidateType, Type openGenericInterfaceType) Parameters Type Name Description Type candidateType Type of the candidate. Type openGenericInterfaceType Type of the open generic interface. Returns Type Description Boolean Exceptions Type Condition ArgumentNullException ArgumentException Type \" + openGenericInterfaceType.Name + \" is not a generic type definition and an interface. ImplementsOpenGenericType(Type, Type) Determines whether a type implements an open generic interface or class such as IList<> or List<>. Declaration public static bool ImplementsOpenGenericType(this Type candidateType, Type openGenericType) Parameters Type Name Description Type candidateType Type of the candidate. Type openGenericType Type of the open generic type. Returns Type Description Boolean ImplementsOrInherits(Type, Type) Determines whether a type implements or inherits from another type. Declaration public static bool ImplementsOrInherits(this Type type, Type to) Parameters Type Name Description Type type The type. Type to To. Returns Type Description Boolean InheritsFrom(Type, Type) Determines whether a type inherits or implements another type. Also include support for open generic base types such as List<>. Declaration public static bool InheritsFrom(this Type type, Type baseType) Parameters Type Name Description Type type Type baseType Returns Type Description Boolean InheritsFrom<TBase>(Type) Determines whether a type inherits or implements another type. Also include support for open generic base types such as List<>. Declaration public static bool InheritsFrom<TBase>(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean Type Parameters Name Description TBase IsCastableTo(Type, Type, Boolean) Determines whether a type can be casted to another type. Declaration public static bool IsCastableTo(this Type from, Type to, bool requireImplicitCast = false) Parameters Type Name Description Type from From. Type to To. Boolean requireImplicitCast if set to true an implicit or explicit operator must be defined on the given type. Returns Type Description Boolean IsDefined<T>(Type) Returns true if the attribute whose type is specified by the generic argument is defined on this type Declaration public static bool IsDefined<T>(this Type type) where T : Attribute Parameters Type Name Description Type type Returns Type Description Boolean Type Parameters Name Description T IsDefined<T>(Type, Boolean) Returns true if the attribute whose type is specified by the generic argument is defined on this type Declaration public static bool IsDefined<T>(this Type type, bool inherit) where T : Attribute Parameters Type Name Description Type type Boolean inherit Returns Type Description Boolean Type Parameters Name Description T IsFullyConstructedGenericType(Type) Determines whether a type is a fully constructed generic type. Declaration public static bool IsFullyConstructedGenericType(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean IsNullableType(Type) Determines whether a type is nullable by ensuring the type is neither a PrimitiveType, ValueType or an Enum. Declaration public static bool IsNullableType(this Type type) Parameters Type Name Description Type type Returns Type Description Boolean IsValidIdentifier(String) Checks whether a given string is a valid CSharp identifier name. This also checks full type names including namespaces. Declaration public static bool IsValidIdentifier(string identifier) Parameters Type Name Description String identifier The identifier to check. Returns Type Description Boolean SafeGetCustomAttributes(Assembly, Type, Boolean) Declaration public static object[] SafeGetCustomAttributes(this Assembly assembly, Type type, bool inherit) Parameters Type Name Description Assembly assembly Type type Boolean inherit Returns Type Description Object [] SafeGetTypes(Assembly) Declaration public static Type[] SafeGetTypes(this Assembly assembly) Parameters Type Name Description Assembly assembly Returns Type Description Type [] SafeIsDefined(Assembly, Type, Boolean) Declaration public static bool SafeIsDefined(this Assembly assembly, Type attribute, bool inherit) Parameters Type Name Description Assembly assembly Type attribute Boolean inherit Returns Type Description Boolean SetMemberValue(MemberInfo, Object, Object) Sets the value of a given MemberInfo. Currently only FieldInfo and PropertyInfo is supported. Declaration public static void SetMemberValue(this MemberInfo member, object obj, object value) Parameters Type Name Description MemberInfo member The MemberInfo to set the value of. Object obj The object to set the value on. Object value The value to set. Exceptions Type Condition ArgumentException Property has no setter or Can't set the value of the given MemberInfo type. TryInferGenericParameters(Type, out Type[], Type[]) Tries to infer a set of valid generic parameters for a generic type definition, given a subset of known parameters. Declaration public static bool TryInferGenericParameters(this Type genericTypeDefinition, out Type[] inferredParams, params Type[] knownParameters) Parameters Type Name Description Type genericTypeDefinition The generic type definition to attempt to infer parameters for. Type [] inferredParams The inferred parameters, if inferral was successful. Type [] knownParameters The known parameters to infer from. Returns Type Description Boolean True if the parameters could be inferred, otherwise, false. Exceptions Type Condition ArgumentNullException genericTypeDefinition is null or knownParameters is null ArgumentException The genericTypeDefinition parameter must be a generic type definition."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.UnityExtensions.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.UnityExtensions.html",
    "title": "Class UnityExtensions | TirUtilities",
    "keywords": "Class UnityExtensions Extends various Unity classes. Inheritance Object UnityExtensions Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class UnityExtensions Methods SafeIsUnityNull(UnityEngine.Object) Determines whether a Unity object is null or \"fake null\", without ever calling Unity's own equality operators. This method is useful for checking if a Unity object is null, destroyed or missing at times when it is not allowed to call Unity's own equality operators, for example when not running on the main thread. Declaration public static bool SafeIsUnityNull(this UnityEngine.Object obj) Parameters Type Name Description UnityEngine.Object obj The Unity object to check. Returns Type Description Boolean True if the object is null, missing or destroyed; otherwise false."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.UnityVersion.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.UnityVersion.html",
    "title": "Class UnityVersion | TirUtilities",
    "keywords": "Class UnityVersion Utility class indicating current Unity version. Inheritance Object UnityVersion Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public static class UnityVersion Fields Major The current Unity version major. Declaration public static readonly int Major Field Value Type Description Int32 Minor The current Unity version minor. Declaration public static readonly int Minor Field Value Type Description Int32 Methods IsVersionOrGreater(Int32, Int32) Tests current Unity version is equal or greater. Declaration public static bool IsVersionOrGreater(int major, int minor) Parameters Type Name Description Int32 major Minimum major version. Int32 minor Minimum minor version. Returns Type Description Boolean true if the current Unity version is greater. Otherwise false ."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.Unsafe.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.Unsafe.html",
    "title": "Namespace TirUtilities.External.OdinSerializer.Utilities.Unsafe | TirUtilities",
    "keywords": "Namespace TirUtilities.External.OdinSerializer.Utilities.Unsafe Classes UnsafeUtilities Contains utilities for performing common unsafe operations."
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.Unsafe.UnsafeUtilities.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.Unsafe.UnsafeUtilities.html",
    "title": "Class UnsafeUtilities | TirUtilities",
    "keywords": "Class UnsafeUtilities Contains utilities for performing common unsafe operations. Inheritance Object UnsafeUtilities Namespace : TirUtilities.External.OdinSerializer.Utilities.Unsafe Assembly : cs.temp.dll.dll Syntax public static class UnsafeUtilities Methods MemoryCopy(Object, Object, Int32, Int32, Int32) Blindly mem-copies a given number of bytes from the memory location of one object to another. WARNING: This method is ridiculously dangerous. Only use if you know what you're doing. Declaration public static void MemoryCopy(object from, object to, int byteCount, int fromByteOffset, int toByteOffset) Parameters Type Name Description Object from Object to Int32 byteCount Int32 fromByteOffset Int32 toByteOffset MemoryCopy(Void*, Void*, Int32) Declaration public static void MemoryCopy(void *from, void *to, int bytes) Parameters Type Name Description Void * from Void * to Int32 bytes StringFromBytes(Byte[], Int32, Boolean) Creates a new string from the contents of a given byte buffer. Declaration public static string StringFromBytes(byte[] buffer, int charLength, bool needs16BitSupport) Parameters Type Name Description Byte [] buffer Int32 charLength Boolean needs16BitSupport Returns Type Description String StringToBytes(Byte[], String, Boolean) Writes the contents of a string into a given byte buffer. Declaration public static int StringToBytes(byte[] buffer, string value, bool needs16BitSupport) Parameters Type Name Description Byte [] buffer String value Boolean needs16BitSupport Returns Type Description Int32 StructArrayFromBytes<T>(Byte[], Int32) Blindly creates an array of structs from an array of bytes via direct memory copy/blit. Declaration public static T[] StructArrayFromBytes<T>(byte[] bytes, int byteLength) where T : struct Parameters Type Name Description Byte [] bytes Int32 byteLength Returns Type Description T[] Type Parameters Name Description T StructArrayFromBytes<T>(Byte[], Int32, Int32) Blindly creates an array of structs from an array of bytes via direct memory copy/blit. Declaration public static T[] StructArrayFromBytes<T>(byte[] bytes, int byteLength, int byteOffset) where T : struct Parameters Type Name Description Byte [] bytes Int32 byteLength Int32 byteOffset Returns Type Description T[] Type Parameters Name Description T StructArrayToBytes<T>(T[]) Blindly copies an array of structs into an array of bytes via direct memory copy/blit. Declaration public static byte[] StructArrayToBytes<T>(T[] array) where T : struct Parameters Type Name Description T[] array Returns Type Description Byte [] Type Parameters Name Description T StructArrayToBytes<T>(T[], ref Byte[], Int32) Blindly copies an array of structs into an array of bytes via direct memory copy/blit. Declaration public static byte[] StructArrayToBytes<T>(T[] array, ref byte[] bytes, int byteOffset) where T : struct Parameters Type Name Description T[] array Byte [] bytes Int32 byteOffset Returns Type Description Byte [] Type Parameters Name Description T"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ValueGetter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ValueGetter-2.html",
    "title": "Delegate ValueGetter<InstanceType, FieldType> | TirUtilities",
    "keywords": "Delegate ValueGetter<InstanceType, FieldType> Not yet documented. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate FieldType ValueGetter<InstanceType, FieldType>(ref InstanceType instance); Parameters Type Name Description InstanceType instance Returns Type Description FieldType Type Parameters Name Description InstanceType FieldType"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.ValueSetter-2.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.ValueSetter-2.html",
    "title": "Delegate ValueSetter<InstanceType, FieldType> | TirUtilities",
    "keywords": "Delegate ValueSetter<InstanceType, FieldType> Not yet documented. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void ValueSetter<InstanceType, FieldType>(ref InstanceType instance, FieldType value); Parameters Type Name Description InstanceType instance FieldType value Type Parameters Name Description InstanceType FieldType"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueGetter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueGetter.html",
    "title": "Delegate WeakValueGetter | TirUtilities",
    "keywords": "Delegate WeakValueGetter Not yet documented. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate object WeakValueGetter(ref object instance); Parameters Type Name Description Object instance Returns Type Description Object"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueGetter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueGetter-1.html",
    "title": "Delegate WeakValueGetter<FieldType> | TirUtilities",
    "keywords": "Delegate WeakValueGetter<FieldType> Not yet documented. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate FieldType WeakValueGetter<FieldType>(ref object instance); Parameters Type Name Description Object instance Returns Type Description FieldType Type Parameters Name Description FieldType"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueSetter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueSetter.html",
    "title": "Delegate WeakValueSetter | TirUtilities",
    "keywords": "Delegate WeakValueSetter Not yet documented. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void WeakValueSetter(ref object instance, object value); Parameters Type Name Description Object instance Object value"
  },
  "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueSetter-1.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Utilities.WeakValueSetter-1.html",
    "title": "Delegate WeakValueSetter<FieldType> | TirUtilities",
    "keywords": "Delegate WeakValueSetter<FieldType> Not yet documented. Namespace : TirUtilities.External.OdinSerializer.Utilities Assembly : cs.temp.dll.dll Syntax public delegate void WeakValueSetter<FieldType>(ref object instance, FieldType value); Parameters Type Name Description Object instance FieldType value Type Parameters Name Description FieldType"
  },
  "api/TirUtilities.External.OdinSerializer.Vector2DictionaryKeyPathProvider.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Vector2DictionaryKeyPathProvider.html",
    "title": "Class Vector2DictionaryKeyPathProvider | TirUtilities",
    "keywords": "Class Vector2DictionaryKeyPathProvider Not yet documented. Inheritance Object BaseDictionaryKeyPathProvider < Vector2 > Vector2DictionaryKeyPathProvider Implements IDictionaryKeyPathProvider < Vector2 > IDictionaryKeyPathProvider Inherited Members BaseDictionaryKeyPathProvider<Vector2>.IDictionaryKeyPathProvider.Compare(Object, Object) BaseDictionaryKeyPathProvider<Vector2>.IDictionaryKeyPathProvider.GetKeyFromPathString(String) BaseDictionaryKeyPathProvider<Vector2>.IDictionaryKeyPathProvider.GetPathStringFromKey(Object) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Vector2DictionaryKeyPathProvider : BaseDictionaryKeyPathProvider<Vector2>, IDictionaryKeyPathProvider<Vector2>, IDictionaryKeyPathProvider, IComparer<Vector2> Properties ProviderID Not yet documented. Declaration public override string ProviderID { get; } Property Value Type Description String Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector2>.ProviderID Methods Compare(Vector2, Vector2) Not yet documented. Declaration public override int Compare(Vector2 x, Vector2 y) Parameters Type Name Description Vector2 x Vector2 y Returns Type Description Int32 Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector2>.Compare(Vector2, Vector2) GetKeyFromPathString(String) Not yet documented. Declaration public override Vector2 GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr Returns Type Description Vector2 Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector2>.GetKeyFromPathString(System.String) GetPathStringFromKey(Vector2) Not yet documented. Declaration public override string GetPathStringFromKey(Vector2 key) Parameters Type Name Description Vector2 key Returns Type Description String Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector2>.GetPathStringFromKey(Vector2) Implements IDictionaryKeyPathProvider<T> IDictionaryKeyPathProvider"
  },
  "api/TirUtilities.External.OdinSerializer.Vector2Formatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Vector2Formatter.html",
    "title": "Class Vector2Formatter | TirUtilities",
    "keywords": "Class Vector2Formatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Vector2 > Vector2Formatter Implements IFormatter < Vector2 > IFormatter Inherited Members MinimalBaseFormatter<Vector2>.IsValueType MinimalBaseFormatter<Vector2>.SerializedType MinimalBaseFormatter<Vector2>.Deserialize(IDataReader) MinimalBaseFormatter<Vector2>.Serialize(Vector2, IDataWriter) MinimalBaseFormatter<Vector2>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Vector2>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Vector2>.GetUninitializedObject() MinimalBaseFormatter<Vector2>.RegisterReferenceID(Vector2, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class Vector2Formatter : MinimalBaseFormatter<Vector2>, IFormatter<Vector2>, IFormatter Methods Read(ref Vector2, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Vector2 value, IDataReader reader) Parameters Type Name Description Vector2 value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Vector2>.Read(Vector2, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Vector2, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Vector2 value, IDataWriter writer) Parameters Type Name Description Vector2 value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Vector2>.Write(Vector2, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Vector3DictionaryKeyPathProvider.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Vector3DictionaryKeyPathProvider.html",
    "title": "Class Vector3DictionaryKeyPathProvider | TirUtilities",
    "keywords": "Class Vector3DictionaryKeyPathProvider Dictionary key path provider for Inheritance Object BaseDictionaryKeyPathProvider < Vector3 > Vector3DictionaryKeyPathProvider Implements IDictionaryKeyPathProvider < Vector3 > IDictionaryKeyPathProvider Inherited Members BaseDictionaryKeyPathProvider<Vector3>.IDictionaryKeyPathProvider.Compare(Object, Object) BaseDictionaryKeyPathProvider<Vector3>.IDictionaryKeyPathProvider.GetKeyFromPathString(String) BaseDictionaryKeyPathProvider<Vector3>.IDictionaryKeyPathProvider.GetPathStringFromKey(Object) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Vector3DictionaryKeyPathProvider : BaseDictionaryKeyPathProvider<Vector3>, IDictionaryKeyPathProvider<Vector3>, IDictionaryKeyPathProvider, IComparer<Vector3> Properties ProviderID Declaration public override string ProviderID { get; } Property Value Type Description String Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector3>.ProviderID Methods Compare(Vector3, Vector3) Declaration public override int Compare(Vector3 x, Vector3 y) Parameters Type Name Description Vector3 x Vector3 y Returns Type Description Int32 Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector3>.Compare(Vector3, Vector3) GetKeyFromPathString(String) Declaration public override Vector3 GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr Returns Type Description Vector3 Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector3>.GetKeyFromPathString(System.String) GetPathStringFromKey(Vector3) Declaration public override string GetPathStringFromKey(Vector3 key) Parameters Type Name Description Vector3 key Returns Type Description String Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector3>.GetPathStringFromKey(Vector3) Implements IDictionaryKeyPathProvider<T> IDictionaryKeyPathProvider"
  },
  "api/TirUtilities.External.OdinSerializer.Vector3Formatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Vector3Formatter.html",
    "title": "Class Vector3Formatter | TirUtilities",
    "keywords": "Class Vector3Formatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Vector3 > Vector3Formatter Implements IFormatter < Vector3 > IFormatter Inherited Members MinimalBaseFormatter<Vector3>.IsValueType MinimalBaseFormatter<Vector3>.SerializedType MinimalBaseFormatter<Vector3>.Deserialize(IDataReader) MinimalBaseFormatter<Vector3>.Serialize(Vector3, IDataWriter) MinimalBaseFormatter<Vector3>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Vector3>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Vector3>.GetUninitializedObject() MinimalBaseFormatter<Vector3>.RegisterReferenceID(Vector3, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class Vector3Formatter : MinimalBaseFormatter<Vector3>, IFormatter<Vector3>, IFormatter Methods Read(ref Vector3, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Vector3 value, IDataReader reader) Parameters Type Name Description Vector3 value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Vector3>.Read(Vector3, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Vector3, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Vector3 value, IDataWriter writer) Parameters Type Name Description Vector3 value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Vector3>.Write(Vector3, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.Vector4DictionaryKeyPathProvider.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Vector4DictionaryKeyPathProvider.html",
    "title": "Class Vector4DictionaryKeyPathProvider | TirUtilities",
    "keywords": "Class Vector4DictionaryKeyPathProvider Inheritance Object BaseDictionaryKeyPathProvider < Vector4 > Vector4DictionaryKeyPathProvider Implements IDictionaryKeyPathProvider < Vector4 > IDictionaryKeyPathProvider Inherited Members BaseDictionaryKeyPathProvider<Vector4>.IDictionaryKeyPathProvider.Compare(Object, Object) BaseDictionaryKeyPathProvider<Vector4>.IDictionaryKeyPathProvider.GetKeyFromPathString(String) BaseDictionaryKeyPathProvider<Vector4>.IDictionaryKeyPathProvider.GetPathStringFromKey(Object) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class Vector4DictionaryKeyPathProvider : BaseDictionaryKeyPathProvider<Vector4>, IDictionaryKeyPathProvider<Vector4>, IDictionaryKeyPathProvider, IComparer<Vector4> Properties ProviderID Declaration public override string ProviderID { get; } Property Value Type Description String Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector4>.ProviderID Methods Compare(Vector4, Vector4) Declaration public override int Compare(Vector4 x, Vector4 y) Parameters Type Name Description Vector4 x Vector4 y Returns Type Description Int32 Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector4>.Compare(Vector4, Vector4) GetKeyFromPathString(String) Declaration public override Vector4 GetKeyFromPathString(string pathStr) Parameters Type Name Description String pathStr Returns Type Description Vector4 Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector4>.GetKeyFromPathString(System.String) GetPathStringFromKey(Vector4) Declaration public override string GetPathStringFromKey(Vector4 key) Parameters Type Name Description Vector4 key Returns Type Description String Overrides TirUtilities.External.OdinSerializer.BaseDictionaryKeyPathProvider<Vector4>.GetPathStringFromKey(Vector4) Implements IDictionaryKeyPathProvider<T> IDictionaryKeyPathProvider"
  },
  "api/TirUtilities.External.OdinSerializer.Vector4Formatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.Vector4Formatter.html",
    "title": "Class Vector4Formatter | TirUtilities",
    "keywords": "Class Vector4Formatter Custom formatter for the type. Inheritance Object MinimalBaseFormatter < Vector4 > Vector4Formatter Implements IFormatter < Vector4 > IFormatter Inherited Members MinimalBaseFormatter<Vector4>.IsValueType MinimalBaseFormatter<Vector4>.SerializedType MinimalBaseFormatter<Vector4>.Deserialize(IDataReader) MinimalBaseFormatter<Vector4>.Serialize(Vector4, IDataWriter) MinimalBaseFormatter<Vector4>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Vector4>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Vector4>.GetUninitializedObject() MinimalBaseFormatter<Vector4>.RegisterReferenceID(Vector4, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public class Vector4Formatter : MinimalBaseFormatter<Vector4>, IFormatter<Vector4>, IFormatter Methods Read(ref Vector4, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Vector4 value, IDataReader reader) Parameters Type Name Description Vector4 value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Vector4>.Read(Vector4, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Vector4, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Vector4 value, IDataWriter writer) Parameters Type Name Description Vector4 value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<Vector4>.Write(Vector4, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.External.OdinSerializer.VersionFormatter.html": {
    "href": "api/TirUtilities.External.OdinSerializer.VersionFormatter.html",
    "title": "Class VersionFormatter | TirUtilities",
    "keywords": "Class VersionFormatter Custom formatter for the Version type. Inheritance Object MinimalBaseFormatter < Version > VersionFormatter Implements IFormatter < Version > IFormatter Inherited Members MinimalBaseFormatter<Version>.IsValueType MinimalBaseFormatter<Version>.SerializedType MinimalBaseFormatter<Version>.Deserialize(IDataReader) MinimalBaseFormatter<Version>.Serialize(Version, IDataWriter) MinimalBaseFormatter<Version>.IFormatter.Serialize(Object, IDataWriter) MinimalBaseFormatter<Version>.IFormatter.Deserialize(IDataReader) MinimalBaseFormatter<Version>.RegisterReferenceID(Version, IDataReader) Namespace : TirUtilities.External.OdinSerializer Assembly : cs.temp.dll.dll Syntax public sealed class VersionFormatter : MinimalBaseFormatter<Version>, IFormatter<Version>, IFormatter Methods GetUninitializedObject() Declaration protected override Version GetUninitializedObject() Returns Type Description Version Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.Version>.GetUninitializedObject() Read(ref Version, IDataReader) Reads into the specified value using the specified reader. Declaration protected override void Read(ref Version value, IDataReader reader) Parameters Type Name Description Version value The value to read into. IDataReader reader The reader to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.Version>.Read(System.Version, TirUtilities.External.OdinSerializer.IDataReader) Write(ref Version, IDataWriter) Writes from the specified value using the specified writer. Declaration protected override void Write(ref Version value, IDataWriter writer) Parameters Type Name Description Version value The value to write from. IDataWriter writer The writer to use. Overrides TirUtilities.External.OdinSerializer.MinimalBaseFormatter<System.Version>.Write(System.Version, TirUtilities.External.OdinSerializer.IDataWriter) Implements IFormatter<T> IFormatter See Also MinimalBaseFormatter <T>"
  },
  "api/TirUtilities.html": {
    "href": "api/TirUtilities.html",
    "title": "Namespace TirUtilities | TirUtilities",
    "keywords": "Namespace TirUtilities Classes DisplayOnlyAttribute The tagged field is be displayed in the inspector, but cannot be edited. ScenePathAttribute Converts a string field to a UnityEditor.SceneAsset in the inspector. StateMachine TirLogger Vector3Extensions Interfaces IState<T>"
  },
  "api/TirUtilities.IState-1.html": {
    "href": "api/TirUtilities.IState-1.html",
    "title": "Interface IState<T> | TirUtilities",
    "keywords": "Interface IState<T> Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public interface IState<T> where T : StateMachine Type Parameters Name Description T Methods EnterState(T) Declaration void EnterState(T stateMachine) Parameters Type Name Description T stateMachine ExitState(T) Declaration void ExitState(T stateMachine) Parameters Type Name Description T stateMachine UpdateState(T) Declaration void UpdateState(T stateMachine) Parameters Type Name Description T stateMachine"
  },
  "api/TirUtilities.LevelManagment.html": {
    "href": "api/TirUtilities.LevelManagment.html",
    "title": "Namespace TirUtilities.LevelManagment | TirUtilities",
    "keywords": "Namespace TirUtilities.LevelManagment Classes LevelLoader LevelSystem Structs LevelData"
  },
  "api/TirUtilities.LevelManagment.LevelData.html": {
    "href": "api/TirUtilities.LevelManagment.LevelData.html",
    "title": "Struct LevelData | TirUtilities",
    "keywords": "Struct LevelData Namespace : TirUtilities.LevelManagment Assembly : cs.temp.dll.dll Syntax [Serializable] public struct LevelData Constructors LevelData(String, List<String>) Declaration public LevelData(string activeScene, List<string> addativeScenes = null) Parameters Type Name Description String activeScene List < String > addativeScenes Properties ActiveScene Declaration public readonly string ActiveScene { get; } Property Value Type Description String AddativeScenes Declaration public readonly List<string> AddativeScenes { get; } Property Value Type Description List < String >"
  },
  "api/TirUtilities.LevelManagment.LevelLoader.html": {
    "href": "api/TirUtilities.LevelManagment.LevelLoader.html",
    "title": "Class LevelLoader | TirUtilities",
    "keywords": "Class LevelLoader Inheritance Object LevelLoader Namespace : TirUtilities.LevelManagment Assembly : cs.temp.dll.dll Syntax public static class LevelLoader Methods LoadLevelDataAsync(LevelData) Declaration public static IEnumerator LoadLevelDataAsync(LevelData level) Parameters Type Name Description LevelData level Returns Type Description IEnumerator Events OnLoadComplete Declaration public static event Action OnLoadComplete Event Type Type Description Action"
  },
  "api/TirUtilities.LevelManagment.LevelSystem.html": {
    "href": "api/TirUtilities.LevelManagment.LevelSystem.html",
    "title": "Class LevelSystem | TirUtilities",
    "keywords": "Class LevelSystem Inheritance Object LevelSystem Namespace : TirUtilities.LevelManagment Assembly : cs.temp.dll.dll Syntax public class LevelSystem : MonoBehaviour"
  },
  "api/TirUtilities.ScenePathAttribute.html": {
    "href": "api/TirUtilities.ScenePathAttribute.html",
    "title": "Class ScenePathAttribute | TirUtilities",
    "keywords": "Class ScenePathAttribute Converts a string field to a UnityEditor.SceneAsset in the inspector. Inheritance Object ScenePathAttribute Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public class ScenePathAttribute : PropertyAttribute Remarks Based on [Scene] from Mirror. Property drawer: TirUtilities/Editor/PropertyDrawers/ScenePathDrawer.cs"
  },
  "api/TirUtilities.Serialization.html": {
    "href": "api/TirUtilities.Serialization.html",
    "title": "Namespace TirUtilities.Serialization | TirUtilities",
    "keywords": "Namespace TirUtilities.Serialization Classes TirJsonUtility Loads song jsons from a directory."
  },
  "api/TirUtilities.Serialization.TirJsonUtility.html": {
    "href": "api/TirUtilities.Serialization.TirJsonUtility.html",
    "title": "Class TirJsonUtility | TirUtilities",
    "keywords": "Class TirJsonUtility Loads song jsons from a directory. Inheritance Object TirJsonUtility Namespace : TirUtilities.Serialization Assembly : cs.temp.dll.dll Syntax public class TirJsonUtility Methods GetFilesInDirectory(String, String) Stores the paths to all files within the given directory, whose file extensions match the supplied regex. Declaration public static IEnumerable<string> GetFilesInDirectory(string path, string fileExtensions = \"*.txt\") Parameters Type Name Description String path The path to the json files. String fileExtensions A regex of file extensions, *.txt by default. Returns Type Description IEnumerable < String > An IEnumerable over the file paths. ParseJsonToList<T>(String) Deserializes a json file into a list of objects of type T. Declaration public static List<T> ParseJsonToList<T>(string path) Parameters Type Name Description String path The path to the json file. Returns Type Description List <T> List of objects. Type Parameters Name Description T Remarks The json must be formated so that the curly braces are on their own lines. TryParseJsonToList<T>(out List<T>, String) Deserializes a json file into a list of objects of type T. If the path is invalid, then the output list is set to null and false is returned. Declaration public static bool TryParseJsonToList<T>(out List<T> data, string path) Parameters Type Name Description List <T> data The list that will hold the deserialized objects. String path The path to the json file. Returns Type Description Boolean True the path is valid, false if the path is invalid. Type Parameters Name Description T Type of the objects represented by the json."
  },
  "api/TirUtilities.Signals.BoolSignal.html": {
    "href": "api/TirUtilities.Signals.BoolSignal.html",
    "title": "Class BoolSignal | TirUtilities",
    "keywords": "Class BoolSignal A Signal that emits a bool. Inheritance Object SignalBase BoolSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class BoolSignal : SignalBase Methods AddReceiver(UnityAction<Boolean>) Register a callback function to be invoked when this signal is Emit(Boolean) . Declaration public virtual void AddReceiver(UnityAction<bool> receiver) Parameters Type Name Description UnityAction < Boolean > receiver The callback to be invoked. Emit(Boolean) Emit this signal to all receivers, calling their AddReceiver(UnityAction<Boolean>) . Declaration public virtual void Emit(bool value) Parameters Type Name Description Boolean value RemoveReceiver(UnityAction<Boolean>) Register a callback function. Declaration public virtual void RemoveReceiver(UnityAction<bool> receiver) Parameters Type Name Description UnityAction < Boolean > receiver The callback function."
  },
  "api/TirUtilities.Signals.ByteSignal.html": {
    "href": "api/TirUtilities.Signals.ByteSignal.html",
    "title": "Class ByteSignal | TirUtilities",
    "keywords": "Class ByteSignal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. Inheritance Object SignalBase ByteSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class ByteSignal : SignalBase Methods AddReceiver(UnityAction<Byte>) Register a callback function to be invoked when this signal is Emit(Byte) . Declaration public virtual void AddReceiver(UnityAction<byte> receiver) Parameters Type Name Description UnityAction < Byte > receiver The callback to be invoked. Emit(Byte) Emit this signal to all receivers registered with AddReceiver(UnityAction<Byte>) . Declaration public virtual void Emit(byte value) Parameters Type Name Description Byte value RemoveReceiver(UnityAction<Byte>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<byte> receiver) Parameters Type Name Description UnityAction < Byte > receiver The callback function."
  },
  "api/TirUtilities.Signals.FloatSignal.html": {
    "href": "api/TirUtilities.Signals.FloatSignal.html",
    "title": "Class FloatSignal | TirUtilities",
    "keywords": "Class FloatSignal A Signal that emits a float. Inheritance Object SignalBase FloatSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class FloatSignal : SignalBase Methods AddReceiver(UnityAction<Single>) Register a callback function to be invoked when this signal is Emit(Single) . Declaration public virtual void AddReceiver(UnityAction<float> receiver) Parameters Type Name Description UnityAction < Single > receiver The callback to be invoked. Emit(Single) Emit this signal to all receivers registered with AddReceiver(UnityAction<Single>) . Declaration public virtual void Emit(float value) Parameters Type Name Description Single value RemoveReceiver(UnityAction<Single>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<float> receiver) Parameters Type Name Description UnityAction < Single > receiver The callback function."
  },
  "api/TirUtilities.Signals.GameObjectSignal.html": {
    "href": "api/TirUtilities.Signals.GameObjectSignal.html",
    "title": "Class GameObjectSignal | TirUtilities",
    "keywords": "Class GameObjectSignal A Signal that emits a game object. Inheritance Object SignalBase GameObjectSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class GameObjectSignal : SignalBase Methods AddReceiver(UnityAction<GameObject>) Register a callback function to be invoked when this signal is Emit(GameObject) . Declaration public virtual void AddReceiver(UnityAction<GameObject> receiver) Parameters Type Name Description UnityAction < GameObject > receiver The callback to be invoked. Emit(GameObject) Emit this signal to all receivers, calling their AddReceiver(UnityAction<GameObject>) . Declaration public virtual void Emit(GameObject target) Parameters Type Name Description GameObject target RemoveReceiver(UnityAction<GameObject>) Register a callback function. Declaration public virtual void RemoveReceiver(UnityAction<GameObject> receiver) Parameters Type Name Description UnityAction < GameObject > receiver The callback function."
  },
  "api/TirUtilities.Signals.html": {
    "href": "api/TirUtilities.Signals.html",
    "title": "Namespace TirUtilities.Signals | TirUtilities",
    "keywords": "Namespace TirUtilities.Signals Classes BoolSignal A Signal that emits a bool. ByteSignal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. FloatSignal A Signal that emits a float. GameObjectSignal A Signal that emits a game object. IntSignal A Signal that emits an int. LevelLoadSignal Signal that emits a copy of a LevelData value. Signal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. SignalBase Base type for all signals. SignalReceiver Invokes TirUtilities.Signals.SignalReceiver._OnSignalReceived when the TirUtilities.Signals.SignalReceiver._signal is Emit() . StringSignal A Signal that emits a string."
  },
  "api/TirUtilities.Signals.IntSignal.html": {
    "href": "api/TirUtilities.Signals.IntSignal.html",
    "title": "Class IntSignal | TirUtilities",
    "keywords": "Class IntSignal A Signal that emits an int. Inheritance Object SignalBase IntSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class IntSignal : SignalBase Methods AddReceiver(UnityAction<Int32>) Register a callback function to be invoked when this signal is Emit(Int32) . Declaration public virtual void AddReceiver(UnityAction<int> receiver) Parameters Type Name Description UnityAction < Int32 > receiver The callback to be invoked. Emit(Int32) Emit this signal to all receivers registered with AddReceiver(UnityAction<Int32>) . Declaration public virtual void Emit(int value) Parameters Type Name Description Int32 value RemoveReceiver(UnityAction<Int32>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<int> receiver) Parameters Type Name Description UnityAction < Int32 > receiver The callback function."
  },
  "api/TirUtilities.Signals.LevelLoadSignal.html": {
    "href": "api/TirUtilities.Signals.LevelLoadSignal.html",
    "title": "Class LevelLoadSignal | TirUtilities",
    "keywords": "Class LevelLoadSignal Signal that emits a copy of a LevelData value. Inheritance Object SignalBase LevelLoadSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class LevelLoadSignal : SignalBase Methods AddReceiver(UnityAction<LevelData>) Register a callback function to be invoked when this signal is Emit() . Declaration public virtual void AddReceiver(UnityAction<LevelData> receiver) Parameters Type Name Description UnityAction < LevelData > receiver The callback to be invoked. Emit() Emit this signal to all receivers, calling their AddReceiver(UnityAction<LevelData>) . Declaration public virtual void Emit() RemoveReceiver(UnityAction<LevelData>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<LevelData> receiver) Parameters Type Name Description UnityAction < LevelData > receiver The callback function."
  },
  "api/TirUtilities.Signals.Signal.html": {
    "href": "api/TirUtilities.Signals.Signal.html",
    "title": "Class Signal | TirUtilities",
    "keywords": "Class Signal Holds a UnityAction so that it can be referenced across scenes and assigned in the inspector. Inheritance Object SignalBase Signal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class Signal : SignalBase Methods AddReceiver(UnityAction) Register a callback function to be invoked when this signal is Emit() . Declaration public virtual void AddReceiver(UnityAction receiver) Parameters Type Name Description UnityAction receiver The callback to be invoked. Emit() Emit this signal to all receivers, calling their AddReceiver(UnityAction) . Declaration public virtual void Emit() RemoveReceiver(UnityAction) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction receiver) Parameters Type Name Description UnityAction receiver The callback function."
  },
  "api/TirUtilities.Signals.SignalBase.html": {
    "href": "api/TirUtilities.Signals.SignalBase.html",
    "title": "Class SignalBase | TirUtilities",
    "keywords": "Class SignalBase Base type for all signals. Inheritance Object SignalBase BoolSignal ByteSignal FloatSignal GameObjectSignal IntSignal LevelLoadSignal Signal StringSignal Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class SignalBase : ScriptableObject Fields _description The description of what this signal is intended to be used for. Declaration protected string _description Field Value Type Description String Properties Description The description of what this signal is intended to be used for. Declaration public string Description { get; } Property Value Type Description String"
  },
  "api/TirUtilities.Signals.SignalReceiver.html": {
    "href": "api/TirUtilities.Signals.SignalReceiver.html",
    "title": "Class SignalReceiver | TirUtilities",
    "keywords": "Class SignalReceiver Invokes TirUtilities.Signals.SignalReceiver._OnSignalReceived when the TirUtilities.Signals.SignalReceiver._signal is Emit() . Inheritance Object SignalReceiver Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class SignalReceiver : MonoBehaviour"
  },
  "api/TirUtilities.Signals.StringSignal.html": {
    "href": "api/TirUtilities.Signals.StringSignal.html",
    "title": "Class StringSignal | TirUtilities",
    "keywords": "Class StringSignal A Signal that emits a string. Inheritance Object SignalBase StringSignal Inherited Members SignalBase._description SignalBase.Description Namespace : TirUtilities.Signals Assembly : cs.temp.dll.dll Syntax public class StringSignal : SignalBase Methods AddReceiver(UnityAction<String>) Register a callback function to be invoked when this signal is Emit(String) . Declaration public virtual void AddReceiver(UnityAction<string> receiver) Parameters Type Name Description UnityAction < String > receiver The callback to be invoked. Emit(String) Emit this signal to all receivers registered with AddReceiver(UnityAction<String>) . Declaration public virtual void Emit(string value) Parameters Type Name Description String value RemoveReceiver(UnityAction<String>) Unregister a callback function. Declaration public virtual void RemoveReceiver(UnityAction<string> receiver) Parameters Type Name Description UnityAction < String > receiver The callback function."
  },
  "api/TirUtilities.StateMachine.html": {
    "href": "api/TirUtilities.StateMachine.html",
    "title": "Class StateMachine | TirUtilities",
    "keywords": "Class StateMachine Inheritance Object StateMachine ApplicationStateMachine MenuStateMachine Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public abstract class StateMachine : MonoBehaviour"
  },
  "api/TirUtilities.TirLogger.html": {
    "href": "api/TirUtilities.TirLogger.html",
    "title": "Class TirLogger | TirUtilities",
    "keywords": "Class TirLogger Inheritance Object TirLogger Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public static class TirLogger Methods LogCall(String, String) Declaration public static void LogCall(string className, string methodName) Parameters Type Name Description String className String methodName"
  },
  "api/TirUtilities.UI.Buttons.ButtonHotKey.html": {
    "href": "api/TirUtilities.UI.Buttons.ButtonHotKey.html",
    "title": "Class ButtonHotKey | TirUtilities",
    "keywords": "Class ButtonHotKey Invokes the OnClick event on a button. Inheritance Object ButtonHotKey Namespace : TirUtilities.UI.Buttons Assembly : cs.temp.dll.dll Syntax public class ButtonHotKey : MonoBehaviour"
  },
  "api/TirUtilities.UI.Buttons.html": {
    "href": "api/TirUtilities.UI.Buttons.html",
    "title": "Namespace TirUtilities.UI.Buttons | TirUtilities",
    "keywords": "Namespace TirUtilities.UI.Buttons Classes ButtonHotKey Invokes the OnClick event on a button."
  },
  "api/TirUtilities.UI.html": {
    "href": "api/TirUtilities.UI.html",
    "title": "Namespace TirUtilities.UI | TirUtilities",
    "keywords": "Namespace TirUtilities.UI Classes LoadingScreen MenuPage Represents a UI canvas to the MenuStateMachine . MenuState Used by the MenuStateMachine to control which menu is shown. MenuStateMachine Controls the state of a set of MenuPage objects in the scene. MessagePanel A UI panel that displays TMP text elements and moves through them in order. TabButton Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Contains all of the pointer event logic. TabGroup Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Maintains all tabs in child objects. UIBillboard Turns the attached canvas to face the main camera and sets the text of the child TMP text component. UIMessageBox WorldSpaceMessageBox A world space UI panel that holds TMP text and links to another message."
  },
  "api/TirUtilities.UI.Layout.FitType.html": {
    "href": "api/TirUtilities.UI.Layout.FitType.html",
    "title": "Enum FitType | TirUtilities",
    "keywords": "Enum FitType Namespace : TirUtilities.UI.Layout Assembly : cs.temp.dll.dll Syntax public enum FitType Fields Name Description FixedColumns FixedRows Height Uniform Width"
  },
  "api/TirUtilities.UI.Layout.FitTypeExtensions.html": {
    "href": "api/TirUtilities.UI.Layout.FitTypeExtensions.html",
    "title": "Class FitTypeExtensions | TirUtilities",
    "keywords": "Class FitTypeExtensions Inheritance Object FitTypeExtensions Namespace : TirUtilities.UI.Layout Assembly : cs.temp.dll.dll Syntax public static class FitTypeExtensions Methods DistributesColumnwise(FitType) Declaration public static bool DistributesColumnwise(this FitType fitType) Parameters Type Name Description FitType fitType Returns Type Description Boolean DistributesEvenly(FitType) Declaration public static bool DistributesEvenly(this FitType fitType) Parameters Type Name Description FitType fitType Returns Type Description Boolean DistributesRowise(FitType) Declaration public static bool DistributesRowise(this FitType fitType) Parameters Type Name Description FitType fitType Returns Type Description Boolean"
  },
  "api/TirUtilities.UI.Layout.FlexibleGridLayoutGroup.html": {
    "href": "api/TirUtilities.UI.Layout.FlexibleGridLayoutGroup.html",
    "title": "Class FlexibleGridLayoutGroup | TirUtilities",
    "keywords": "Class FlexibleGridLayoutGroup Inheritance Object FlexibleGridLayoutGroup Namespace : TirUtilities.UI.Layout Assembly : cs.temp.dll.dll Syntax public class FlexibleGridLayoutGroup : LayoutGroup Methods CalculateLayoutInputHorizontal() Declaration public override void CalculateLayoutInputHorizontal() CalculateLayoutInputVertical() Declaration public override void CalculateLayoutInputVertical() SetLayoutHorizontal() Declaration public override void SetLayoutHorizontal() SetLayoutVertical() Declaration public override void SetLayoutVertical()"
  },
  "api/TirUtilities.UI.Layout.html": {
    "href": "api/TirUtilities.UI.Layout.html",
    "title": "Namespace TirUtilities.UI.Layout | TirUtilities",
    "keywords": "Namespace TirUtilities.UI.Layout Classes FitTypeExtensions FlexibleGridLayoutGroup Enums FitType"
  },
  "api/TirUtilities.UI.LoadingScreen.html": {
    "href": "api/TirUtilities.UI.LoadingScreen.html",
    "title": "Class LoadingScreen | TirUtilities",
    "keywords": "Class LoadingScreen Inheritance Object LoadingScreen Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class LoadingScreen : MonoBehaviour"
  },
  "api/TirUtilities.UI.MenuPage.html": {
    "href": "api/TirUtilities.UI.MenuPage.html",
    "title": "Class MenuPage | TirUtilities",
    "keywords": "Class MenuPage Represents a UI canvas to the MenuStateMachine . Inheritance Object MenuPage Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MenuPage : MonoBehaviour Properties State This page's MenuState . Declaration public MenuState State { get; } Property Value Type Description MenuState Methods HidePanel() Deactivate the menu panel. Declaration public void HidePanel() ShowPanel() Activate the menu panel. Declaration public void ShowPanel()"
  },
  "api/TirUtilities.UI.MenuState.html": {
    "href": "api/TirUtilities.UI.MenuState.html",
    "title": "Class MenuState | TirUtilities",
    "keywords": "Class MenuState Used by the MenuStateMachine to control which menu is shown. Inheritance Object MenuState Implements IState < MenuStateMachine > Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MenuState : ScriptableObject, IState<MenuStateMachine> Remarks Each MenuPage needs a menu state. This is done to avoid having to add entries to an enum every time a new page is created. Methods EnterState(MenuStateMachine) Transition from PreviousPage to ActivePage . Declaration public void EnterState(MenuStateMachine stateMachine) Parameters Type Name Description MenuStateMachine stateMachine The state machine that requires the update. ExitState(MenuStateMachine) Calls HidePanel for the active state. Declaration public void ExitState(MenuStateMachine stateMachine) Parameters Type Name Description MenuStateMachine stateMachine UpdateState(MenuStateMachine) Calls show panel for the active state. Declaration public void UpdateState(MenuStateMachine stateMachine) Parameters Type Name Description MenuStateMachine stateMachine Implements IState<T>"
  },
  "api/TirUtilities.UI.MenuStateMachine.html": {
    "href": "api/TirUtilities.UI.MenuStateMachine.html",
    "title": "Class MenuStateMachine | TirUtilities",
    "keywords": "Class MenuStateMachine Controls the state of a set of MenuPage objects in the scene. Inheritance Object StateMachine MenuStateMachine Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MenuStateMachine : StateMachine Properties ActivePage Get the currently active page. Declaration public MenuPage ActivePage { get; } Property Value Type Description MenuPage MenuPages Declaration public List<MenuPage> MenuPages { get; } Property Value Type Description List < MenuPage > PreviousPage Get the last active page. Declaration public MenuPage PreviousPage { get; } Property Value Type Description MenuPage Methods Back() Go back to the previous page in the history. Declaration public void Back() TransitionTo(MenuState) Transitions the state machine to the given state. Declaration public void TransitionTo(MenuState state) Parameters Type Name Description MenuState state"
  },
  "api/TirUtilities.UI.MessagePanel.html": {
    "href": "api/TirUtilities.UI.MessagePanel.html",
    "title": "Class MessagePanel | TirUtilities",
    "keywords": "Class MessagePanel A UI panel that displays TMP text elements and moves through them in order. Inheritance Object MessagePanel Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class MessagePanel : MonoBehaviour Fields OnMessagePanelClosed Invoked after the TirUtilities.UI.MessagePanel._messagePanel is deactivated. Declaration public UnityEvent OnMessagePanelClosed Field Value Type Description UnityEvent Methods NextMessage() Activates the next message in the TirUtilities.UI.MessagePanel._messages list. Declaration public void NextMessage() Remarks If called when the final message is active, the TirUtilities.UI.MessagePanel._messagePanel is deactivated and OnMessagePanelClosed is invoked."
  },
  "api/TirUtilities.UI.TabButton.html": {
    "href": "api/TirUtilities.UI.TabButton.html",
    "title": "Class TabButton | TirUtilities",
    "keywords": "Class TabButton Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Contains all of the pointer event logic. Inheritance Object TabButton Implements IPointerEnterHandler IPointerClickHandler IPointerExitHandler Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class TabButton : MonoBehaviour, IPointerEnterHandler, IPointerClickHandler, IPointerExitHandler Fields onTabDeselected Declaration public UnityEvent onTabDeselected Field Value Type Description UnityEvent onTabSelected Declaration public UnityEvent onTabSelected Field Value Type Description UnityEvent Properties Background Declaration public Image Background { get; } Property Value Type Description Image Methods Deselect() Invokes onTabDeselected. Declaration public void Deselect() OnPointerClick(PointerEventData) Declaration public void OnPointerClick(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerEnter(PointerEventData) Declaration public void OnPointerEnter(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData OnPointerExit(PointerEventData) Declaration public void OnPointerExit(PointerEventData eventData) Parameters Type Name Description PointerEventData eventData Select() Invokes onTabSelected. Declaration public void Select() Implements IPointerEnterHandler IPointerClickHandler IPointerExitHandler"
  },
  "api/TirUtilities.UI.TabGroup.html": {
    "href": "api/TirUtilities.UI.TabGroup.html",
    "title": "Class TabGroup | TirUtilities",
    "keywords": "Class TabGroup Derived from code written by Matt Gambell https://youtu.be/211t6r12XPQ Maintains all tabs in child objects. Inheritance Object TabGroup Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class TabGroup : MonoBehaviour Fields tabButtons Declaration public List<TabButton> tabButtons Field Value Type Description List < TabButton > Methods OnTabEnter(TabButton) Call when the mouse hovers over a tab. Declaration public void OnTabEnter(TabButton button) Parameters Type Name Description TabButton button OnTabExit() Call when a tab is deselected or the mouse leaves the tab. Declaration public void OnTabExit() OnTabSelected(TabButton) Call when a tab is selected. Declaration public void OnTabSelected(TabButton button) Parameters Type Name Description TabButton button ResetTabs() Call to reset all tabs to their default state. Declaration public void ResetTabs() Subscribe(TabButton) Adds a button the the list of buttons managed by the tab group. Declaration public void Subscribe(TabButton button) Parameters Type Name Description TabButton button"
  },
  "api/TirUtilities.UI.UIBillboard.html": {
    "href": "api/TirUtilities.UI.UIBillboard.html",
    "title": "Class UIBillboard | TirUtilities",
    "keywords": "Class UIBillboard Turns the attached canvas to face the main camera and sets the text of the child TMP text component. Inheritance Object UIBillboard Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class UIBillboard : MonoBehaviour Properties Text Get and set the TirUtilities.UI.UIBillboard._text displayed on the billboard. Declaration public string Text { get; set; } Property Value Type Description String"
  },
  "api/TirUtilities.UI.UIMessageBox.html": {
    "href": "api/TirUtilities.UI.UIMessageBox.html",
    "title": "Class UIMessageBox | TirUtilities",
    "keywords": "Class UIMessageBox Inheritance Object UIMessageBox Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class UIMessageBox : MonoBehaviour Fields OnDissmissed Declaration public UnityEvent OnDissmissed Field Value Type Description UnityEvent"
  },
  "api/TirUtilities.UI.WorldSpaceMessageBox.html": {
    "href": "api/TirUtilities.UI.WorldSpaceMessageBox.html",
    "title": "Class WorldSpaceMessageBox | TirUtilities",
    "keywords": "Class WorldSpaceMessageBox A world space UI panel that holds TMP text and links to another message. Inheritance Object WorldSpaceMessageBox Namespace : TirUtilities.UI Assembly : cs.temp.dll.dll Syntax public class WorldSpaceMessageBox : MonoBehaviour Fields OnMessageBoxDismissed Declaration public UnityEvent OnMessageBoxDismissed Field Value Type Description UnityEvent Properties IsFirstMessage Whether or not this is the first message in a chain. Declaration public bool IsFirstMessage { get; } Property Value Type Description Boolean Text The text stored in this message's TirUtilities.UI.WorldSpaceMessageBox._billboard . Declaration public string Text { get; } Property Value Type Description String Methods CreateMessageBox(String, GameObject) UNFINISHED Declaration public static WorldSpaceMessageBox CreateMessageBox(string text, GameObject nextMessage = null) Parameters Type Name Description String text GameObject nextMessage Returns Type Description WorldSpaceMessageBox"
  },
  "api/TirUtilities.Vector3Extensions.html": {
    "href": "api/TirUtilities.Vector3Extensions.html",
    "title": "Class Vector3Extensions | TirUtilities",
    "keywords": "Class Vector3Extensions Inheritance Object Vector3Extensions Namespace : TirUtilities Assembly : cs.temp.dll.dll Syntax public static class Vector3Extensions Methods Invariant(Vector3) Declaration public static bool Invariant(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Boolean IsZero(Vector3) Declaration public static bool IsZero(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Boolean NotZero(Vector3) Declaration public static bool NotZero(this Vector3 vector3) Parameters Type Name Description Vector3 vector3 Returns Type Description Boolean"
  },
  "index.html": {
    "href": "index.html",
    "title": "TirUtilities | TirUtilities",
    "keywords": "TirUtilities Description This is a set of utilities that I use in all of my projects. Usage Open the Unity package found under releases. You may have to go to the assembly definition TirUtilities.Editor and exclude all platforms except the editor. Unity tends to lose the settings for assembly definitions when exporting a package for some reason."
  },
  "manual/manual.html": {
    "href": "manual/manual.html",
    "title": "TirUtilities Manual | TirUtilities",
    "keywords": "TirUtilities Manual Here there be instructions."
  }
}